<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在家学习嵌入式5--buildroot的使用</title>
      <link href="/f9af0016/"/>
      <url>/f9af0016/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新冠疫情期间在家里无事可做，奈何手上没有现成的开发板，又想调试学习linux内核，于是就有了这一系列的文章。本系列文章包含以下内容：</p><ul><li><a href="http://wowothink.com/90fb723e/">在家学习嵌入式1-搭建qemu环境</a></li><li><a href="http://wowothink.com/1b0d21a9/">在家学习嵌入式2-在qemu环境下使用uboot启动linux</a></li><li><a href="http://wowothink.com/14c7c84a">在家学习嵌入式3-使用Buildroot构建编译系统</a></li><li><a href="http://wowothink.com/e7173683">在家学习嵌入式4-Versatile Express开发板</a></li><li><a href="http://wowothink.com/f9af0016">在家学习嵌入式5-buildroot的使用</a></li></ul><hr><h2 id="使用buildroot进行开发的问题"><a href="#使用buildroot进行开发的问题" class="headerlink" title="使用buildroot进行开发的问题"></a>使用buildroot进行开发的问题</h2><p>buildroot的正常操作是下载一个tar包，解压缩，配置，编译和安装tar包里面的软件组件。源码文件展开到<code>output/build/&lt;package&gt;-&lt;version&gt;</code>路径下，这是一个临时的目录。当执行<code>make clean</code>的命令后，这个目录将整个被删掉。当下次执行<code>make</code>命令的时候，该目录又会被重新创建。即使将Git或Subversion存储库用作包源代码的输入，Buildroot也会从中创建一个tar包，然后像对待tar包一样正常工作。<br>以我们的uboot为例，当我们执行<code>make</code>的时候，会从 <a href="https://gitee.com/wowothink/u-boot.git" target="_blank" rel="noopener">https://gitee.com/wowothink/u-boot.git</a> 仓库上下载uboot到<code>dl/</code>目录中，然后将其打包到<code>dl/uboot/uboot-v2017.01.tar.gz</code>的tar包，之后再解压该tar包到<code>output/build/uboot-v2017.01/</code>目录，之后就编译该目录。<br>按照上述的行为，我们不能在<code>dl/</code>目录下修改源码，因为该源码会从远程仓库下载，我们也不能修改<code>output/build/</code>目录下的源码，因为当我们执行<code>clean</code>的时候，这个目录就没了。很明显，buildroot这样做使用起来很不方便。buildroot的初衷是用作集成工具来构建和集成嵌入式Linux系统的所有组件，也就是希望尽量的稳定和减少修改。</p><p>buildroot针对此情形提供了一种特定的机制：<code>&lt;pkg&gt;_OVERRIDE_SRCDIR</code>机制，Buildroot读取<code>_override_</code>文件，该文件允许用户告诉buildroot某些软件包的源位置。当buildroot发现给定软件包已经定义了<code>&lt;pkg&gt;_OVERRIDE_SRCDIR</code>时，它将不再尝试下载，提取和给软件包打patch。相反，它将直接使用指定目录中可用的源代码，并且<code>make clean</code>不会触及该目录。这允许将buildroot指向你自己的目录，该目录可以由Git，Subversion或任何其他版本控制系统进行管理。为此，buildroot将使用<code>_rsync_</code>将组件的源代码从指定的<code>&lt;pkg&gt;_OVERRIDE_SRCDIR</code>复制到<code>output/build/&lt;package&gt;-custom/</code>目录。接下来我们就使用该机制，来进行uboot、kernel源码位置的重新指定。<a id="more"></a></p><hr><h2 id="uboot、kernel源码位置重新指定"><a href="#uboot、kernel源码位置重新指定" class="headerlink" title="uboot、kernel源码位置重新指定"></a>uboot、kernel源码位置重新指定</h2><ul><li><p>创建local.mk文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir board/qemu/arm-vexpress/config/</span><br><span class="line">vi board/qemu/arm-vexpress/config/local.mk</span><br></pre></td></tr></table></figure></li><li><p>在<code>local.mk</code>文件中指定uboot和kernel源码的位置。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LINUX_OVERRIDE_SRCDIR=<span class="variable">$(CONFIG_DIR)</span>/dl/linux/git</span><br><span class="line">UBOOT_OVERRIDE_SRCDIR=<span class="variable">$(CONFIG_DIR)</span>/dl/uboot/git</span><br></pre></td></tr></table></figure></li><li><p>重新配置<code>BR2_PACKAGE_OVERRIDE_FILE</code>的路径文件。</p><figure class="highlight shell"><figcaption><span>Build options的配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">($</span><span class="bash">(CONFIG_DIR)/board/qemu/arm-vexpress/config/local.mk) location of a package override file</span></span><br></pre></td></tr></table></figure></li></ul><p>按照上述步骤，就配置好了uboot和kernel的源码的位置，以后修改源码就可以在我们指定的目录上修改。比如说我们编译uboot，会看到这么一句话：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-linux:~/work/temp/buildroot$ make uboot-rebuild</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; uboot custom Syncing from <span class="built_in">source</span> dir /home/victor/work/temp/buildroot/dl/uboot/git</span></span><br><span class="line">rsync -au --chmod=u=rwX,go=rX  --exclude .svn --exclude .git --exclude .hg --exclude .bzr --exclude CVS /home/victor/work/temp/buildroot/dl/uboot/git/ /home/victor/work/temp/buildroot/output/build/uboot-custom</span><br></pre></td></tr></table></figure><p></p><p>很明显我们可以看到，编译uboot的时候会调用<code>rsync</code>命令，将<code>dl/uboot/git/</code>目录拷贝到<code>output/build/uboot-custom/</code>目录，然后再去编译<code>uboot-custom/</code>目录。这样子我们每次修改<code>dl/uboot/git/</code>的内容，在编译的时候都会同步反映到<code>output/build/uboot-custom/</code>目录。</p><p><code>rsync</code>命令是一个拷贝命令，相较于<code>cp</code>命令，它更加的快，并且每次只拷贝有更新的文件。具体差异我也不是很懂。</p><hr><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><code>make menuconfig</code>：配置buildroot<br><code>make linux-dirclean</code>：删除<code>output/build/linux-xxx/</code>目录；<br><code>make uboot-dirclean</code>：删除<code>output/build/uboot-xxx/</code>目录；<br><code>make uboot-rebuild</code>：单独编译uboot；<br><code>make linux-rebuild</code>：单独编译linux kernel；</p><hr><h2 id="buildroot代码结构"><a href="#buildroot代码结构" class="headerlink" title="buildroot代码结构"></a>buildroot代码结构</h2><ul><li>顶层<code>Makefile</code>：处理配置并且构建编译；</li><li>顶层<code>Config.in</code>：主要选项配置，包括其他目录的<code>Config.in</code>；</li><li><code>arch/</code>：<code>Config.in.*</code>文件定义架构相关的配置（处理器类型、ABI、浮点处理）；</li><li><code>toolchain/</code>：产生或使用的toolchains；</li><li><code>system/</code>：用于系统范围的功能的选项，例如<code>init</code>，<code>/dev</code>处理等；</li><li><code>linux/</code>： <code>linux.mk</code>，Linux kernel的包；</li><li><code>package/</code>：所有用户空间的包，包括<code>busybox</code>等；</li><li><code>fs/</code>：生成各种格式的文件系统镜像；</li><li><code>boot/</code>：启动相关的包；</li><li><code>configs/</code>：各个平台默认的配置；</li><li><code>board/</code>：板级专用文件（包含内核配置文件，内核补丁，镜像烧写脚本等）；</li><li><code>support/</code>：各式工具；</li><li><code>utils/</code>：buildroot开发的工具；</li><li><code>docs/</code>：文档目录；</li><li><code>dl/</code>：虽然一开始并没有dl（download）目录，但是在开始使用Buildroot后，会自动生 成一个dl目录，它主要用于存放Buildroot工具下载的内容，因为Buildroot是一系列工具的 管理集合，它本身并不存在这些编译工具，所以在使用时它自动会下载需要的工具，比如交叉 编译器、依赖的库、以 及一些软件源码包等（以压缩包的形式存放，Buildroot在使用时会自动解压），都会放在dl目录下；</li><li><code>output/</code>：虽然一开始Buildroot也并没有output目录，但是在开始使用Buildroot后，就会自 动生成output目录，它是编译出来的输出文件夹，里面存放着解压后的各种软件包编译完后的 现场。同时output目录下还有各种文件夹，如host文件夹是由各类源码编译后在主机上运行工具的安装 目录，如arm-linux-gcc就是安装在这里；build文件夹是所有源码包解压出来的文件 存放地和编译的发生地；images文件夹则是在我们编译完成后存放uboot、内核镜像、设备树以及文件系统等结果的。</li></ul><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://buildroot.org/downloads/manual/using-buildroot-development.txt" target="_blank" rel="noopener">https://buildroot.org/downloads/manual/using-buildroot-development.txt</a></li><li><a href="http://buildroot.uclibc.org/downloads/manual/manual.html#adding-packages" target="_blank" rel="noopener">http://buildroot.uclibc.org/downloads/manual/manual.html#adding-packages</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 在家学习嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 在家学习嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在家学习嵌入式4--Versatile Express开发板</title>
      <link href="/e7173683/"/>
      <url>/e7173683/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新冠疫情期间在家里无事可做，奈何手上没有现成的开发板，又想调试学习linux内核，于是就有了这一系列的文章。本系列文章包含以下内容：</p><ul><li><a href="http://wowothink.com/90fb723e/">在家学习嵌入式1-搭建qemu环境</a></li><li><a href="http://wowothink.com/1b0d21a9/">在家学习嵌入式2-在qemu环境下使用uboot启动linux</a></li><li><a href="http://wowothink.com/14c7c84a">在家学习嵌入式3-使用Buildroot构建编译系统</a></li><li><a href="http://wowothink.com/e7173683">在家学习嵌入式4-Versatile Express开发板</a></li><li><a href="http://wowothink.com/f9af0016">在家学习嵌入式5-buildroot的使用</a></li></ul><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>为啥要用QEMU模拟Versatile Express开发板呢？主要是由于网上使用QEMU模拟Versatile Express开发板的资料比较多，于是乎就用这个开发板了。既然使用这块开发板，那么就要了解相关的信息：比如说SOC、板级硬件、原理图、memorymap等。本文就是详细介绍该开发板的一些资料，对于后续使用这块开发板大概有个认识，本文不是重点。<a id="more"></a></p><hr><h2 id="Versatile-Express-platform"><a href="#Versatile-Express-platform" class="headerlink" title="Versatile Express platform"></a>Versatile Express platform</h2><p>Versatile Express platform是由ARM提供做SOC设计验证的环境，硬件由uATX主板(V2M)和CoreTile Express子板(V2P)组成，CoreTile Express子板有如下的配置：</p><ul><li>V2P-CA5: 2x Cortex-A5 100MHz</li><li>V2P-CA9: 4x Cortex-A9 400MHz</li><li>V2P-CA15 (TC1): 2x Cortex-A15 1GHz</li><li>V2P-CA15-CA7 (TC2): 2x Cortex-A15 1GHz, 3x Cortex-A7 800MHz</li><li>uATX主板(V2M)的详细资料可以参考<a href="http://www.myir-tech.com/product/motherboard.htm" target="_blank" rel="noopener">ARM Versatile Express主板</a><br>官方文档为：<a href="https://developer.arm.com/docs/dui0447/j/introduction" target="_blank" rel="noopener">ARM Motherboard Express µATX Technical Reference Manual V2M-P1</a></li></ul><p>主板 Express uATX（或 V2M-P1）是 Versatile Express 系列中的第一款可用主板。它嵌在 uATX 大小的两件式漂亮塑料外壳内。活动式壳盖可以露出主板以便安装子板和连接测试设备。所有连接器和控制器都安装在后面板上。此主板有两组子板牛角连接器。它必须始终与处理器子板 Express 或软宏模型子板配对使用以提供主系统处理器。可以添加可选的逻辑子板 Express 板以提供自定义 IP 开发和验证功能。<br><img src="https://pic.downk.cc/item/5e7dd2be504f4bcb0469dbeb.png" alt="主板"></p><ul><li>CoreTile Express子板(V2P)的详细资料可以参考<a href="http://www.myir-tech.com/product/coretile.htm" target="_blank" rel="noopener">ARM Versatile Express处理器子板</a><br>官方文档为：<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0448i/CHDEJGAD.html" target="_blank" rel="noopener">ARM CoreTile Express A9×4 Technical Reference Manual Cortex®-A9 MPCore (V2P-CA9)</a></li></ul><p>CoreTile Express 板在 Versatile™ Express 开发系统中提供主系统 CPU。CoreTile 必须与提供电源、配置和外设连接的主板 Express uATX 板配对使用。<br>处理器子板 Express 板与 Versatile 产品系列中的前代产品的不同之处在于，其内存和 LCD 控制器等高带宽外设是与 ARM 处理器一起在测试芯片中实现的。这会显示提升性能，使系统更适合进行软件基准测试并完全能运行 Debian Linux 等桌面操作系统。<br><img src="https://pic.downk.cc/item/5e7dd2be504f4bcb0469dbe8.png" alt="子板"></p><p>QEMU/VExpress A9是QEMU模拟器针对ARM VExpress-A9 FPGA开发板进行软件模拟的指令级虚拟机。QEMU/VExpress因为是软件仿真模式，可以配置成多种模式，例如单核Cortex-A9，多核Cortex-A9，以及多核Cortex-A15等。同时也能够模拟出VExpress FPGA开发板上大多数的外设。当前QEMU使用模拟的VExpress-A9是单核Cortex-A9。</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.kernel.org/doc/Documentation/devicetree/bindings/arm/vexpress.txt" target="_blank" rel="noopener">vexpress.txt</a></li><li><a href="https://github.com/aggresss/LKDemo" target="_blank" rel="noopener">虚拟机就是开发板</a></li><li><a href="https://developer.arm.com/docs/ddi0293/c" target="_blank" rel="noopener">PrimeCell Color LCD Controller (PL111) Technical Reference Manual</a></li><li><a href="http://www.myir-tech.com/download.asp?nid=49" target="_blank" rel="noopener">http://www.myir-tech.com/download.asp?nid=49</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 在家学习嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 在家学习嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在家学习嵌入式3--使用Buildroot构建编译系统</title>
      <link href="/14c7c84a/"/>
      <url>/14c7c84a/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新冠疫情期间在家里无事可做，奈何手上没有现成的开发板，又想调试学习linux内核，于是就有了这一系列的文章。本系列文章包含以下内容：</p><ul><li><a href="http://wowothink.com/90fb723e/">在家学习嵌入式1-搭建qemu环境</a></li><li><a href="http://wowothink.com/1b0d21a9/">在家学习嵌入式2-在qemu环境下使用uboot启动linux</a></li><li><a href="http://wowothink.com/14c7c84a">在家学习嵌入式3-使用Buildroot构建编译系统</a></li><li><a href="http://wowothink.com/e7173683">在家学习嵌入式4-Versatile Express开发板</a></li><li><a href="http://wowothink.com/f9af0016">在家学习嵌入式5-buildroot的使用</a></li></ul><hr><h2 id="编译系统"><a href="#编译系统" class="headerlink" title="编译系统"></a>编译系统</h2><p>在前面的文章中，我们分别下载编译uboot、下载编译kernel、下载busybox制作ramdisk、下载toolchain、制作SD卡等。这些步骤比较繁琐，有没有一种方法<strong>一键</strong>生成所需的镜像并且打包到一起呢？我们先看一下嵌入式系统编译的输入和输出，输入源码，输出二进制镜像。其中就需要<code>Embedded Linux build system</code>来整合这些步骤，<strong>一键</strong>就需要依赖这里的<strong>build system（编译系统）</strong>来实现。目前的编译系统有Yocto/OpenEmbedded, PTXdist, Buildroot, OpenWRT。回想一下，SOC厂商发布BSP的时候，不可能一个个给你发布uboot、kernel的，而是将整个编译系统发布出来，据我所知NXP/MTK是通过Yocto发布，Pana通过Buildroot发布。<br><img src="https://pic.downk.cc/item/5e7dc962504f4bcb04635e4b.png" alt="在家学习嵌入式-1"></p><p>本文将使用buildroot作为编译系统，将我们之前使用qemu搭建的虚拟开发环境统一起来，实现一键编译打包。在这之前，我们先介绍一下buildroot。<a id="more"></a></p><hr><h2 id="buildroot介绍"><a href="#buildroot介绍" class="headerlink" title="buildroot介绍"></a>buildroot介绍</h2><p>buildroot官方的介绍如下，翻译下来就是buildroot是一个简单以及自动化的工具，可以使用交叉编译为嵌入式系统构建一个完整的linux系统。为了实现这个功能，buildroot可以生成交叉工具链，rootfs，linux kernel镜像和bootloader。buildroot可以独立地用于这些选项的任何组合（例如，您可以使用现有的交叉编译工具链，并仅通过Buildroot来构建根文件系统）。</p><blockquote><p>Buildroot is a tool that simplifies and automates the process of building a complete Linux system for an embedded system, using cross-compilation. In order to achieve this, Buildroot is able to generate a cross-compilation toolchain, a root filesystem, a Linux kernel image and a bootloader for your target. Buildroot can be used for any combination of these options, independently (you can for example use an existing cross-compilation toolchain, and build only your root filesystem with Buildroot).</p></blockquote><p>以下内容将一步步介绍如何配置buildroot作为我们自己的qemu vexpress虚拟开发板的编译系统。</p><hr><h2 id="拷贝配置"><a href="#拷贝配置" class="headerlink" title="拷贝配置"></a>拷贝配置</h2><p>在<code>configs/qemu_arm_vexpress_defconfig</code>有关于qemu vexpress-a9的buildroot配置，我们以此为基础，将其拷贝为<code>configs/wowothink_qemu_arm_vexpress_defconfig</code>文件，然后根据这个文件进行buildroot的配置。在<code>make menuconfig</code>之前，我们先通过<code>make wowothink_qemu_arm_vexpress_defconfig</code>生成<code>.config</code>文件。</p><hr><h2 id="配置Target-options"><a href="#配置Target-options" class="headerlink" title="配置Target options"></a>配置Target options</h2><p>这部分内容为默认的，在我们使用<code>qemu_arm_vexpress_defconfig</code>的配置的时候就已经默认好了，所以无需配置。<br></p><figure class="highlight shell"><figcaption><span>Target options配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">     Target Architecture (ARM (little endian))  ---&gt;</span><br><span class="line">     Target Binary Format (ELF)  ---&gt;</span><br><span class="line">     Target Architecture Variant (cortex-A9)  ---&gt;</span><br><span class="line">[ ] Enable NEON SIMD extension support</span><br><span class="line">[ ] Enable VFP extension support</span><br><span class="line">     Target ABI (EABI)  ---&gt;</span><br><span class="line">     Floating point strategy (Soft float)  ---&gt;</span><br><span class="line">     ARM instruction set (ARM)  ---&gt;</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="配置Build-options"><a href="#配置Build-options" class="headerlink" title="配置Build options"></a>配置Build options</h2><p>这部分内容有一个需要配置的就是<code>Location to save buildroot config</code>选项，将其指定为我们<code>wowothink_qemu_arm_vexpress_defconfig</code>配置文件的路径即可。这样子我们每次执行<code>make savedefconfig</code>就会自动将其保存到该文件。<br></p><figure class="highlight shell"><figcaption><span>Build options配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    Commands  ---&gt;</span><br><span class="line">(/home/victor/work/buildroot/buildroot/configs/wowothink_qemu_arm_vexpress_defconfig) Location to save buildroot config</span><br><span class="line"><span class="meta">($</span><span class="bash">(TOPDIR)/dl) Download dir</span></span><br><span class="line"><span class="meta">($</span><span class="bash">(BASE_DIR)/host) Host dir</span></span><br><span class="line">    Mirrors and Download locations  ---&gt;</span><br><span class="line">(0) Number of jobs to run simultaneously (0 for auto)</span><br><span class="line">[ ] Enable compiler cache</span><br><span class="line">[ ] build packages with debugging symbols</span><br><span class="line">[*] strip target binaries</span><br><span class="line">()    executables that should not be stripped</span><br><span class="line">()    directories that should be skipped when stripping</span><br><span class="line">    gcc optimization level (optimize for size)  ---&gt;</span><br><span class="line">[ ] Enable google-breakpad support</span><br><span class="line">    libraries (shared only)  ---&gt;</span><br><span class="line"><span class="meta">($</span><span class="bash">(CONFIG_DIR)/local.mk) location of a package override file</span></span><br><span class="line">()  global patch directories</span><br><span class="line">    Advanced  ---&gt;</span><br><span class="line">    *** Security Hardening Options ***</span><br><span class="line">[ ] Build code with PIC/PIE</span><br><span class="line">    Stack Smashing Protection (None)  ---&gt;</span><br><span class="line">    RELRO Protection (None)  ---&gt;</span><br><span class="line">       Buffer-overflow Detection (FORTIFY_SOURCE) (None)  ---&gt;</span><br></pre></td></tr></table></figure><p></p><p>有个小的注意事项，在执行<code>make</code>的时候，buildroot有可能会从网络上下载包，有些会提示如下的错误：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误: 无法验证 releases.linaro.org 的由 “CN=Let&apos;s Encrypt Authority X3,O=Let&apos;s Encrypt,C=US” 颁发的证书:</span><br><span class="line">  颁发的证书还未生效。</span><br><span class="line">要以不安全的方式连接至 releases.linaro.org，使用“--no-check-certificate”。</span><br></pre></td></tr></table></figure><p></p><p>解决办法是在<code>wget</code>命令中加入<code>--no-check-certificate</code>的参数，在下面的选项中加入即可。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Build options  ---&gt;Commands  ---&gt;(wget --passive-ftp -nd -t 3 --no-check-certificate) Wget command</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="配置Toolchain"><a href="#配置Toolchain" class="headerlink" title="配置Toolchain"></a>配置Toolchain</h2><p>下面的toolchain是我最终的配置，我尝试使用<code>Buildroot toolchain</code>的配置，但是由于网络的原因总是下载断开。后面我使用系统自带的<code>arm-linux-gnueabi</code>，也就是之前安装的交叉工具链，但是在编译的时候会提示以下的错误：<br></p><figure class="highlight shell"><figcaption><span>系统自带的toolchain错误</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Distribution toolchains are unsuitable for use by Buildroot,</span><br><span class="line">as they were configured in a way that makes them non-relocatable,</span><br><span class="line">and contain a lot of pre-built libraries that would conflict with</span><br><span class="line">the ones Buildroot wants to build.</span><br></pre></td></tr></table></figure><p></p><p>最终，我不得不预先从<a href="https://releases.linaro.org/components/toolchain/binaries/" target="_blank" rel="noopener">https://releases.linaro.org/components/toolchain/binaries/</a> 下载5.4版本的交叉工具链，然后通过<code>Toolchain path</code>指定其路径。注意，在buildroot中，所有路径相关的，最后都不能带<code>/</code>，因为buildroot会自动将其加上。<br></p><figure class="highlight shell"><figcaption><span>Toolchain最终配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    Toolchain type (External toolchain)  ---&gt;</span><br><span class="line">    *** Toolchain External Options ***</span><br><span class="line">    Toolchain (Custom toolchain)  ---&gt;</span><br><span class="line">    Toolchain origin (Pre-installed toolchain)  ---&gt;</span><br><span class="line">(/home/victor/work/toolchain/gcc-linaro-5.4.1-2017.01-x86_64_arm-linux-gnueabi) Toolchain path</span><br><span class="line"><span class="meta">($</span><span class="bash">(ARCH)-linux-gnueabi) Toolchain prefix</span></span><br><span class="line">    External toolchain gcc version (5.x)  ---&gt;</span><br><span class="line">    External toolchain kernel headers series (4.0.x)  ---&gt;</span><br><span class="line">    External toolchain C library (glibc/eglibc)  ---&gt;</span><br><span class="line">[*] Toolchain has SSP support?</span><br><span class="line">[*] Toolchain has RPC support?</span><br><span class="line">[*] Toolchain has C++ support?</span><br><span class="line">[ ] Toolchain has D support?</span><br><span class="line">[ ] Toolchain has Fortran support?</span><br><span class="line">[ ] Toolchain has OpenMP support?</span><br><span class="line">[ ] Copy gdb server to the Target</span><br><span class="line">    *** Host GDB Options ***</span><br><span class="line">[ ] Build cross gdb for the host</span><br><span class="line">    *** Toolchain Generic Options ***</span><br><span class="line">[ ] Copy gconv libraries</span><br><span class="line">()  Extra toolchain libraries to be copied to target</span><br><span class="line">[*] Enable MMU support</span><br><span class="line">()  Target Optimizations</span><br><span class="line">()  Target linker options</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="配置System-configuration"><a href="#配置System-configuration" class="headerlink" title="配置System configuration"></a>配置System configuration</h2><p>这里主要配置为busybox为<code>Init system</code>，并设置运行一个<code>getty</code>，这样子系统启动后会有一个console，并且这个console是<code>/bin/sh</code>，用户名和登陆密码为<code>root</code>.<br></p><figure class="highlight shell"><figcaption><span>System configuration配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    Root FS skeleton (default target skeleton)  ---&gt;</span><br><span class="line">(wowothink) System hostname</span><br><span class="line">(Welcome to Buildroot) System banner</span><br><span class="line">    Passwords encoding (sha-256)  ---&gt;</span><br><span class="line">    Init system (BusyBox)  ---&gt;</span><br><span class="line">    /dev management (Dynamic using devtmpfs only)  ---&gt;</span><br><span class="line">(system/device_table.txt) Path to the permission tables</span><br><span class="line">[ ] support extended attributes in device tables</span><br><span class="line">[*] Use symlinks to /usr for /bin, /sbin and /lib</span><br><span class="line">[*] Enable root login with password</span><br><span class="line">(root) Root password</span><br><span class="line">    /bin/sh (busybox' default shell)  ---&gt;</span><br><span class="line">[*] Run a getty (login prompt) after boot  ---&gt;</span><br><span class="line">[ ] remount root filesystem read-write during boot</span><br><span class="line">()  Network interface to configure through DHCP</span><br><span class="line">(/bin:/sbin:/usr/bin:/usr/sbin) Set the system's default PATH</span><br><span class="line">[*] Purge unwanted locales</span><br><span class="line">(C en_US) Locales to keep</span><br><span class="line">()  Generate locale data</span><br><span class="line">[ ] Enable Native Language Support (NLS)</span><br><span class="line">[ ] Install timezone info</span><br><span class="line">()  Path to the users tables</span><br><span class="line">()  Root filesystem overlay directories</span><br><span class="line">()  Custom scripts to run before creating filesystem images</span><br><span class="line">()  Custom scripts to run inside the fakeroot environment</span><br><span class="line">()  Custom scripts to run after creating filesystem images</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="配置Kernel"><a href="#配置Kernel" class="headerlink" title="配置Kernel"></a>配置Kernel</h2><p>linux kernel配置其从gitee上下载，并且切换到<code>v4.4</code>的branch上面，使用的kernel的defconfig名字为<code>vexpress</code>(改名字无需加上<code>_defconfig</code>的后缀)，dtb名字为<code>vexpress-v2p-ca9</code>。这样子，在编译linux kernel的时候，buildroot就会自动去使用<code>vexpress _defconfig</code>的配置，并且会去编译生成<code>vexpress-v2p-ca9.dtb</code>。这样子最终在<code>out/images/</code>会生成一个<code>zImage</code>和<code>vexpress-v2p-ca9.dtb</code>的文件。注意事项：有时候国内的网络不稳定，kernel无法clone下来，经常断开。如果之前有下载过linux kernel，就可以将<code>URL of custom repository</code>配置为之前linux kernel的路径。</p><figure class="highlight shell"><figcaption><span>Kernel配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[*] Linux Kernel</span><br><span class="line">      Kernel version (Custom Git repository)  ---&gt;</span><br><span class="line">(https://mirrors.tuna.tsinghua.edu.cn/git/linux.git) URL of custom repository</span><br><span class="line">(v4.4) Custom repository version</span><br><span class="line">()    Custom kernel patches</span><br><span class="line">      Kernel configuration (Using an in-tree defconfig file)  ---&gt;</span><br><span class="line">(vexpress) Defconfig name</span><br><span class="line">()    Additional configuration fragment files</span><br><span class="line">()    Custom boot logo file path</span><br><span class="line">      Kernel binary format (zImage)  ---&gt;</span><br><span class="line">      Kernel compression format (gzip compression)  ---&gt;</span><br><span class="line">[*]   Build a Device Tree Blob (DTB)</span><br><span class="line">[ ]     DTB is built by kernel itself</span><br><span class="line">(vexpress-v2p-ca9) In-tree Device Tree Source file names</span><br><span class="line">()      Out-of-tree Device Tree Source file paths</span><br><span class="line">[ ]     Build Device Tree with overlay support</span><br><span class="line">[ ]   Install kernel image to /boot in target</span><br><span class="line">[ ]   Needs host OpenSSL</span><br><span class="line">[ ]   Needs host libelf</span><br><span class="line">      Linux Kernel Extensions  ---&gt;</span><br><span class="line">      Linux Kernel Tools  ---&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="配置Filesystem-images"><a href="#配置Filesystem-images" class="headerlink" title="配置Filesystem images"></a>配置Filesystem images</h2><p>这一步主要配置生成的rootfs是什么格式的，在前面，我们使用了<code>uramdisk.img</code>的<code>cpio</code>加上<code>gzip</code>并且带上<code>uboot</code>头的文件格式，那么这里就必须配置上<code>cpio/gzip/uboot image</code>的格式。这样子最终在<code>out/images/</code>会生成一个<code>rootfs.cpio.uboot</code>的文件。为了保证名称的一致性，需要将我们前面打入uboot中的patch里面的<code>ramdisk_name=uramdisk.img\0</code>修改为<code>ramdisk_name=rootfs.cpio.uboot\0</code></p><figure class="highlight shell"><figcaption><span>Filesystem images的配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[ ] axfs root filesystem                                            </span><br><span class="line">[ ] btrfs root filesystem</span><br><span class="line">[ ] cloop root filesystem for the target device</span><br><span class="line">[*] cpio the root filesystem (for use as an initial RAM filesystem)</span><br><span class="line">      Compression method (gzip)  ---&gt;</span><br><span class="line">[*]   Create U-Boot image of the root filesystem</span><br><span class="line">[ ] cramfs root filesystem</span><br><span class="line">[ ] ext2/3/4 root filesystem</span><br><span class="line">[ ] f2fs root filesystem</span><br><span class="line">[ ] initial RAM filesystem linked into linux kernel</span><br><span class="line">[ ] jffs2 root filesystem</span><br><span class="line">[ ] romfs root filesystem</span><br><span class="line">[ ] squashfs root filesystem</span><br><span class="line">[ ] tar the root filesystem</span><br><span class="line">[ ] ubi image containing an ubifs root filesystem</span><br><span class="line">[ ] ubifs root filesystem</span><br><span class="line">[ ] yaffs2 root filesystem</span><br></pre></td></tr></table></figure><hr><h2 id="配置Bootloaders"><a href="#配置Bootloaders" class="headerlink" title="配置Bootloaders"></a>配置Bootloaders</h2><p>这一步主要配置编译uboot，配置uboot源码从gitee上下载，使用<code>v2017.01</code>的分支，并且使用<code>vexpress_ca9x4</code>作为uboot的配置文件。<code>Custom U-Boot patches</code>这个路径是配置uboot的patch路径，如果没有patch打入到uboot中，可以不用配置。</p><figure class="highlight shell"><figcaption><span>Bootloaders配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[ ] afboot-stm32</span><br><span class="line">[ ] ARM Trusted Firmware (ATF)</span><br><span class="line">[ ] Barebox</span><br><span class="line">[ ] grub2</span><br><span class="line">[ ] mxs-bootlets</span><br><span class="line">[ ] optee_os</span><br><span class="line">[ ] s500-bootloader</span><br><span class="line">[*] U-Boot</span><br><span class="line">      Build system (Kconfig)  ---&gt;</span><br><span class="line">      U-Boot Version (Custom Git repository)  ---&gt;</span><br><span class="line">(https://gitee.com/wowothink/u-boot.git) URL of custom repository</span><br><span class="line">(v2017.01) Custom repository version</span><br><span class="line">(/home/victor/work/buildroot/buildroot/board/qemu/arm-versatile/patches/uboot) Custom U-Boot patches</span><br><span class="line">      U-Boot configuration (Using an in-tree board defconfig file)  ---&gt;</span><br><span class="line">(vexpress_ca9x4) Board defconfig</span><br><span class="line">()    Additional configuration fragment files</span><br><span class="line">[ ]   U-Boot needs dtc</span><br><span class="line">[ ]   U-Boot needs pylibfdt</span><br><span class="line">[ ]   U-Boot needs pyelftools</span><br><span class="line">[ ]   U-Boot needs OpenSSL</span><br><span class="line">[ ]   U-Boot needs lzop</span><br><span class="line">      U-Boot binary format  ---&gt;</span><br><span class="line">[ ]   produce a .ift signed image (OMAP)</span><br><span class="line">[ ]   Install U-Boot SPL binary image</span><br><span class="line">[ ]   Environment image  ----</span><br><span class="line">[ ]   Generate a U-Boot boot script</span><br><span class="line">()    Device Tree Source file paths</span><br><span class="line">()    Custom make options</span><br></pre></td></tr></table></figure><p>配置uboot的二进制文件为<code>u-boot.elf</code>，由于qemu使用的是elf文件格式的uboot，因此这里必须配置上。<br></p><figure class="highlight shell"><figcaption><span>U-Boot binary format</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[ ] u-boot.ais</span><br><span class="line">[*] u-boot.bin</span><br><span class="line">[ ] u-boot-dtb.bin</span><br><span class="line">[ ] u-boot-dtb.img</span><br><span class="line">[ ] u-boot-dtb.imx</span><br><span class="line">[ ] u-boot.img</span><br><span class="line">[ ] u-boot.itb</span><br><span class="line">[ ] u-boot.imx</span><br><span class="line">[ ] u-boot-nand.bin</span><br><span class="line">[ ] u-boot.kwb (Marvell)</span><br><span class="line">[*] u-boot.elf</span><br><span class="line">[ ] u-boot.sb (Freescale i.MX28)</span><br><span class="line">[ ] u-boot.sd (Freescale i.MX28)</span><br><span class="line">[ ] u-boot.nand (Freescale i.MX28)</span><br><span class="line">[ ] Custom (specify below)</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="配置自动生成sdcard-img"><a href="#配置自动生成sdcard-img" class="headerlink" title="配置自动生成sdcard.img"></a>配置自动生成sdcard.img</h2><p>在前面的文章中，我们制作了一个vfat格式的sdcard，将所需的<code>zImage</code>、<code>uramdisk.img</code>、<code>vexpress-v2p-ca9.dtb</code>拷贝到该sdcard中，然后再uboot启动的时候从sdcard将其load到DDR中并且启动linux。这个几步在buildroot中可以自动执行完成，需要在<code>System configuration</code>配置以下两个选项：<br></p><figure class="highlight shell"><figcaption><span>配置自动生成sdcard.img</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(support/scripts/genimage.sh) Custom scripts to run after creating filesystem images</span><br><span class="line">(-c board/qemu/arm-vexpress/arm-vexpress-genimage.cfg) Extra arguments passed to custom scripts</span><br></pre></td></tr></table></figure><p></p><p>前者表示创建文件系统后去执行<code>genimage.sh</code>脚本，后者表示该脚本使用的配置文件，配置文件的内容如下，表示创建一个<code>vfat</code>格式的<code>sdcard.img</code>，大小为512M，里面包含3个文件。<br></p><figure class="highlight shell"><figcaption><span>arm-vexpress-genimage.cfg</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Minimal SD card image <span class="keyword">for</span> the qemu arm vexpress board</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line">image sdcard.img &#123;</span><br><span class="line">    vfat &#123;</span><br><span class="line">        files = &#123;</span><br><span class="line">            "zImage",</span><br><span class="line">            "vexpress-v2p-ca9.dtb",</span><br><span class="line">            "rootfs.cpio.uboot"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    size = 512M</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="一键编译生成"><a href="#一键编译生成" class="headerlink" title="一键编译生成"></a>一键编译生成</h2><ul><li>首先从<a href="https://releases.linaro.org/components/toolchain/binaries/" target="_blank" rel="noopener">https://releases.linaro.org/components/toolchain/binaries/</a> 下载5.4版本的交叉工具链；</li><li>下载我配置好的buildroot源码：<code>git clone https://gitee.com/wowothink/buildroot.git</code>；</li><li><p>修改<code>configs/wowothink_qemu_arm_vexpress_defconfig</code>文件以下两个宏为自己本地的绝对路径，分别是toolchain的路径以及uboot patch的路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BR2_TOOLCHAIN_EXTERNAL_PATH=&quot;/home/victor/work/toolchain/gcc-linaro-5.4.1-2017.01-x86_64_arm-linux-gnueabi&quot;</span><br><span class="line">BR2_TARGET_UBOOT_PATCH=&quot;/home/victor/work/buildroot/buildroot/board/qemu/arm-vexpress/patches/uboot&quot;</span><br></pre></td></tr></table></figure></li><li><p>一键编译生成</p><figure class="highlight shell"><figcaption><span>一键编译生成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make wowothink_qemu_arm_vexpress_defconfig</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li></ul><p>最终在<code>output/images/</code>会生成如下文件，qemu就可以用<code>sdcard.img</code>和<code>u-boot</code>。<br></p><figure class="highlight shell"><figcaption><span>生成的镜像</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-linux:~/work/temp/buildroot$ ll output/images/</span><br><span class="line">总用量 21216</span><br><span class="line">drwxr-xr-x 2 victor victor      4096 3月  25 14:32 .</span><br><span class="line">drwxrwxr-x 6 victor victor      4096 3月  25 14:32 ..</span><br><span class="line">-rw-r--r-- 1 victor victor   5231616 3月  25 14:32 rootfs.cpio</span><br><span class="line">-rw-r--r-- 1 victor victor   2445179 3月  25 14:32 rootfs.cpio.gz</span><br><span class="line">-rw-r--r-- 1 victor victor   2445243 3月  25 14:32 rootfs.cpio.uboot</span><br><span class="line">-rw-r--r-- 1 victor victor 536870912 3月  25 14:32 sdcard.img</span><br><span class="line">-rwxr-xr-x 1 victor victor   1668600 3月  25 14:32 u-boot</span><br><span class="line">-rwxr-xr-x 1 victor victor    273016 3月  25 14:32 u-boot.bin</span><br><span class="line">-rw-r--r-- 1 victor victor     14360 3月  25 10:46 vexpress-v2p-ca9.dtb</span><br><span class="line">-rw-r--r-- 1 victor victor   3465600 3月  25 10:46 zImage</span><br></pre></td></tr></table></figure><p></p><ul><li>使用<code>qemu-system-arm</code>启动<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M vexpress-a9 -m 1024M -kernel /home/victor/work/temp/buildroot/output/images/u-boot -nographic -no-reboot -sd /home/victor/work/temp/buildroot/output/images/sdcard.img</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://buildroot.org/downloads/manual/manual.pdf" target="_blank" rel="noopener">The Buildroot user manual</a></li><li><a href="https://bootlin.com/doc/training/buildroot/buildroot-slides.pdf" target="_blank" rel="noopener">buildroot slides</a></li><li><a href="https://buildroot.org/docs.html" target="_blank" rel="noopener">buildroot doc</a></li><li><a href="https://hceng.cn/2019/09/05/Buildroot%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">https://hceng.cn/2019/09/05/Buildroot%E7%AC%94%E8%AE%B0/</a></li><li><a href="https://tutorial.linux.doc.embedfire.com/zh_CN/latest/building_image/using_buildroot.html" target="_blank" rel="noopener">https://tutorial.linux.doc.embedfire.com/zh_CN/latest/building_image/using_buildroot.html</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 在家学习嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 在家学习嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在家学习嵌入式2--在qemu环境下使用uboot启动linux</title>
      <link href="/1b0d21a9/"/>
      <url>/1b0d21a9/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新冠疫情期间在家里无事可做，奈何手上没有现成的开发板，又想调试学习linux内核，于是就有了这一系列的文章。本系列文章包含以下内容：</p><ul><li><a href="http://wowothink.com/90fb723e/">在家学习嵌入式1-搭建qemu环境</a></li><li><a href="http://wowothink.com/1b0d21a9/">在家学习嵌入式2-在qemu环境下使用uboot启动linux</a></li><li><a href="http://wowothink.com/14c7c84a">在家学习嵌入式3-使用Buildroot构建编译系统</a></li><li><a href="http://wowothink.com/e7173683">在家学习嵌入式4-Versatile Express开发板</a></li><li><a href="http://wowothink.com/f9af0016">在家学习嵌入式5-buildroot的使用</a></li></ul><hr><p>在前面的文章中，我们简单的编译一个kernel，然后使用<code>qemu-system-arm -kernel</code>指定启动一个特定的linux kernel，在虚拟开发板上可以这么做。但是在实际的开发板中，启动是一个很复杂的东西。在启动kernel之前，通常有个小的引导程序（本文使用u-boot），引导程序需要事先存储在某些存储介质上，比如SD、eMMC、Flash、USB。当启动的时候，会有RomCode去初始化某些关键外设并且拷贝引导程序到DDR上。现在某些SOC支持ATF和TEE的功能，启动会变得更加的复杂。<strong>本文不讨论启动流程，本文只介绍在qemu环境下使用uboot通过sd卡去启动linux</strong>。<a id="more"></a></p><hr><h2 id="下载编译启动uboot"><a href="#下载编译启动uboot" class="headerlink" title="下载编译启动uboot"></a>下载编译启动uboot</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/u-boot/u-boot.git -b v2017.01</span><br><span class="line">make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm vexpress_ca9x4_defconfig</span><br><span class="line">make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm -j8</span><br></pre></td></tr></table></figure><p>编译完毕之后，在当前目录下会生成<code>u-boot</code>文件，这个文件可以使用以下命令启动：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M vexpress-a9 -m 512M -kernel /home/victor/work/uboot/u-boot/u-boot -nographic -no-reboot</span><br></pre></td></tr></table></figure><p></p><p>启动后，可以看到u-boot已经正常运行，但是由于找不到kernel，所以无法启动kernel，因此停留在u-boot命令行模式下。后续我们将基于这个版本修改uboot从sd卡启动linux kernel。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-linux:~$ qemu-system-arm -M vexpress-a9 -m 512M -kernel ~/work/uboot/u-boot/u-boot -nographic -no-reboot</span><br><span class="line">pulseaudio: set_sink_input_volume() failed</span><br><span class="line">pulseaudio: Reason: Invalid argument</span><br><span class="line">pulseaudio: set_sink_input_mute() failed</span><br><span class="line">pulseaudio: Reason: Invalid argument</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">U-Boot 2017.01 (Feb 10 2020 - 11:46:10 +0800)</span><br><span class="line"></span><br><span class="line">DRAM:  512 MiB</span><br><span class="line">WARNING: Caches not enabled</span><br><span class="line">Flash: 128 MiB</span><br><span class="line">MMC:   MMC: 0</span><br><span class="line">*** Warning - bad CRC, using default environment</span><br><span class="line"></span><br><span class="line">In:    serial</span><br><span class="line">Out:   serial</span><br><span class="line">Err:   serial</span><br><span class="line">Net:   smc911x-0</span><br><span class="line">Hit any key to stop autoboot:  0</span><br><span class="line">MMC Device 1 not found</span><br><span class="line">no mmc device at slot 1</span><br><span class="line">Card did not respond to voltage select!</span><br><span class="line">smc911x: MAC 52:54:00:12:34:56</span><br><span class="line">smc911x: detected LAN9118 controller</span><br><span class="line">smc911x: phy initialized</span><br><span class="line">smc911x: MAC 52:54:00:12:34:56</span><br><span class="line">BOOTP broadcast 1</span><br><span class="line">DHCP client bound to address 10.0.2.15 (3 ms)</span><br><span class="line">*** Warning: no boot file name; using &apos;0A00020F.img&apos;</span><br><span class="line">Using smc911x-0 device</span><br><span class="line">TFTP from server 10.0.2.2; our IP address is 10.0.2.15</span><br><span class="line">Filename &apos;0A00020F.img&apos;.</span><br><span class="line">Load address: 0x80008000</span><br><span class="line">Loading: *</span><br><span class="line">TFTP error: &apos;Access violation&apos; (2)</span><br><span class="line">Not retrying...</span><br><span class="line">smc911x: MAC 52:54:00:12:34:56</span><br><span class="line">smc911x: MAC 52:54:00:12:34:56</span><br><span class="line">missing environment variable: pxeuuid</span><br><span class="line">missing environment variable: bootfile</span><br><span class="line">Retrieving file: pxelinux.cfg/01-52-54-00-12-34-56</span><br><span class="line">smc911x: MAC 52:54:00:12:34:56</span><br><span class="line">smc911x: detected LAN9118 controller</span><br><span class="line">smc911x: phy initialized</span><br><span class="line">smc911x: MAC 52:54:00:12:34:56</span><br><span class="line">Wrong Image Format for bootm command</span><br><span class="line">ERROR: can&apos;t get kernel image!</span><br><span class="line">=&gt;</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="制作sd卡"><a href="#制作sd卡" class="headerlink" title="制作sd卡"></a>制作sd卡</h2><p>从uboot启动的log来看，好像是通过TFTP去load kernel但是找不到，因此就停留在uboot命令行模式。qemu支持模拟sd卡，因此，我们可以制作一个sd卡，然后将kernel、rootfs、dtb文件放到sd卡，在uboot中将sd卡中的文件load到DDR，并从DDR去启动，以下命令可以用于制作vfat文件系统的sd卡，大小为512M。<br></p><figure class="highlight shell"><figcaption><span>制作sd卡</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/zero of=/home/victor/work/sd_card bs=1M count=512</span><br><span class="line">sudo fdisk /home/victor/work/sd_card</span><br></pre></td></tr></table></figure><p></p><p>为该sd卡创建分区，按<code>o</code>，<code>n</code>，<code>w</code>，创建完分区之后，然后使用<code>sudo mkfs.vfat sd_card</code>命令创建vfat文件系统。至此创建sd卡成功，查看该文件格式为：<br></p><figure class="highlight shell"><figcaption><span>sd_card格式</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-linux:~/work$ file sd_card</span><br><span class="line">sd_card: DOS/MBR boot sector, code offset 0x3c+2, OEM-ID "mkfs.fat", sectors/cluster 16, root entries 512, Media descriptor 0xf8, sectors/FAT 256, sectors/track 32, heads 64, sectors 1048576 (volumes &gt; 32 MB) , serial number 0xd9022643, unlabeled, FAT (16 bit)</span><br></pre></td></tr></table></figure><p></p><p>这部分的内容可以参考：<a href="http://wowothink.com/7a4f33a8/">ubuntu下格式化U盘</a></p><hr><h2 id="制作uramdisk-img"><a href="#制作uramdisk-img" class="headerlink" title="制作uramdisk.img"></a>制作uramdisk.img</h2><p>在之前的文章中，我们通过<code>busybox</code>制作了带ext4文件系统的<code>a9rootfs.ext4</code>文件，这个文件uboot是无法引导的，因此需要重新制作一个<code>gzip</code>和<code>cpio</code>压缩的<code>uramdisk.img</code>文件供uboot引导使用。<br>之前在制作<code>a9rootfs.ext4</code>的时候，我们创建过一个<code>rootfs/</code>目录用来存放根文件系统，现在可以使用这个系统制作<code>ramdisk.img</code>文件。<br></p><figure class="highlight shell"><figcaption><span>生成ramdisk.img</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/victor/work/linux/rootfs/</span><br><span class="line">find . |cpio -ov -H newc |gzip &gt; ../ramdisk.img</span><br></pre></td></tr></table></figure><p></p><p>但是这还不够，经过测试，如果使用<code>ramdisk.img</code>，那么使用<code>bootz</code>命令去启动的时候，会提示<code>Wrong Ramdisk Image Format</code>的错误，很明显是<code>ramdisk.img</code>格式不对。必须给<code>ramdisk.img</code>加上64字节的头部信息使之成为<code>uramdisk.img</code>文件，才能通过<code>bootz</code>命令去启动。这一步完成之后，我们可以得到<code>uramdisk.img</code>。</p><figure class="highlight shell"><figcaption><span>生成uramdisk.img命令</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-linux:~/work/linux$ mkimage -A arm -O linux -C none -T ramdisk -a 0x00000000 -e 0x00000000 -n "wowothink Root Filesystem" -d /home/victor/work/linux/ramdisk.img /home/victor/work/linux/uramdisk.img</span><br><span class="line">Image Name:   wowothink Root Filesystem</span><br><span class="line">Created:      Tue Feb 11 20:01:01 2020</span><br><span class="line">Image Type:   ARM Linux RAMDisk Image (uncompressed)</span><br><span class="line">Data Size:    5052411 Bytes = 4934.00 kB = 4.82 MB</span><br><span class="line">Load Address: 00000000</span><br><span class="line">Entry Point:  00000000</span><br></pre></td></tr></table></figure><p>关于这部分的内容可以参考：<a href="http://wowothink.com/37fc608c/">解压打包img文件</a></p><hr><h2 id="拷贝文件到sd卡"><a href="#拷贝文件到sd卡" class="headerlink" title="拷贝文件到sd卡"></a>拷贝文件到sd卡</h2><p>连同之前编译linux kernel得到的<code>zImage</code>和<code>vexpress-v2p-ca9.dtb</code>，我们有3个文件需要拷贝到sd卡里面。将linux kernel的镜像<code>zImage</code>，rootfs的镜像<code>uramdisk.img</code>，dtb <code>vexpress-v2p-ca9.dtb</code>拷贝到sd卡里面。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/victor/work/card/</span><br><span class="line">sudo mount -t vfat /home/victor/work/sd_card card/</span><br><span class="line">sudo cp -rf /home/victor/work/linux/linux/arch/arm/boot/zImage /home/victor/work/card/</span><br><span class="line">sudo cp -rf /home/victor/work/linux/linux/arch/arm/boot/dts/vexpress-v2p-ca9.dtb /home/victor/work/card/</span><br><span class="line">sudo cp -rf /home/victor/work/linux/uramdisk.img /home/victor/work/card/</span><br><span class="line">sudo umount card/</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="修改uboot从sd卡启动"><a href="#修改uboot从sd卡启动" class="headerlink" title="修改uboot从sd卡启动"></a>修改uboot从sd卡启动</h2><p>在uboot v2017.01的版本上打入以下patch，以下patch主要修改的内容为：</p><ul><li>设置启动delay为0s；</li><li>删除从TFTP启动的命令<code>distro_bootcmd</code>；</li><li>设置zImage、dtb、ramdisk的文件名字以及启动地址；</li><li><p>设置<code>bootargs</code>为<code>rdinit=/sbin/init console=${console}</code>，这里的<code>bootargs</code>就是传递给kernel的cmdline。注意：由于我们制作的<code>uramdisk.img</code>是根据busybox制作的，它的<code>init</code>程序默认在<code>sbin/</code>目录下，因此必须用<code>rdinit=</code>来指定，不能使用<code>init=</code>来指定。cmdline的<code>rdinit=</code>和<code>init=</code>的定义如下：</p><figure class="highlight c"><figcaption><span>The kernel's command-line parameters</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">init=   [KNL]</span><br><span class="line">        Format: &lt;full_path&gt;</span><br><span class="line">        Run specified binary instead of /sbin/init as init</span><br><span class="line">        process.</span><br><span class="line"></span><br><span class="line">rdinit= [KNL]</span><br><span class="line">        Format: &lt;full_path&gt;</span><br><span class="line">        Run specified binary instead of /init from the ramdisk,</span><br><span class="line">        used <span class="keyword">for</span> early userspace startup. See initrd.</span><br></pre></td></tr></table></figure></li><li><p>使用<code>fatload</code>命令将镜像文件从sd卡拷贝到DDR上指定地址；</p></li><li>使用<code>bootz</code>启动。</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/configs/vexpress_ca9x4_defconfig b/configs/vexpress_ca9x4_defconfig</span><br><span class="line">index d783e66..1205294 100644</span><br><span class="line"><span class="comment">--- a/configs/vexpress_ca9x4_defconfig</span></span><br><span class="line"><span class="comment">+++ b/configs/vexpress_ca9x4_defconfig</span></span><br><span class="line">@@ -18,3 +18,4 @@ CONFIG_CMD_MMC=y</span><br><span class="line"># CONFIG_CMD_NFS is not set</span><br><span class="line"># CONFIG_CMD_MISC is not set</span><br><span class="line">CONFIG_OF_LIBFDT=y</span><br><span class="line"><span class="addition">+CONFIG_BOOTDELAY=0</span></span><br><span class="line">diff --git a/include/configs/vexpress_common.h b/include/configs/vexpress_common.h</span><br><span class="line">index 0bc4ea5..2892dfb 100644</span><br><span class="line"><span class="comment">--- a/include/configs/vexpress_common.h</span></span><br><span class="line"><span class="comment">+++ b/include/configs/vexpress_common.h</span></span><br><span class="line"><span class="meta">@@ -186,8 +186,7 @@</span></span><br><span class="line">/* Basic environment settings */</span><br><span class="line">#define CONFIG_BOOTCOMMAND \</span><br><span class="line"><span class="deletion">-    "run distro_bootcmd; " \</span></span><br><span class="line"><span class="deletion">-    "run bootflash; "</span></span><br><span class="line"><span class="addition">+    "run bootsd; "</span></span><br><span class="line">#define BOOT_TARGET_DEVICES(func) \</span><br><span class="line">         func(MMC, mmc, 1) \</span><br><span class="line"><span class="meta">@@ -205,7 +204,16 @@</span></span><br><span class="line">        "maxramdisk=0x1800000\0" \</span><br><span class="line">        "pxefile_addr_r=0x88000000\0" \</span><br><span class="line">        "scriptaddr=0x88000000\0" \</span><br><span class="line"><span class="deletion">-        "kernel_addr_r=0x80008000\0"</span></span><br><span class="line"><span class="addition">+        "kernel_addr_r=0x80008000\0" \</span></span><br><span class="line"><span class="addition">+        "kernel_name=zImage\0" \</span></span><br><span class="line"><span class="addition">+        "ramdisk_name=uramdisk.img\0" \</span></span><br><span class="line"><span class="addition">+        "dtb_name=vexpress-v2p-ca9.dtb\0" \</span></span><br><span class="line"><span class="addition">+        "kernel_wowo_addr=0x60000000\0" \</span></span><br><span class="line"><span class="addition">+        "ramdisk_wowo_addr=0x70000000\0" \</span></span><br><span class="line"><span class="addition">+        "dtb_wowo_addr=0x61000000\0" \</span></span><br><span class="line"><span class="addition">+        "load_kernel=fatload mmc 0:0 $&#123;kernel_wowo_addr&#125; $&#123;kernel_name&#125;\0 " \</span></span><br><span class="line"><span class="addition">+        "load_ramdisk=fatload mmc 0:0 $&#123;ramdisk_wowo_addr&#125; $&#123;ramdisk_name&#125;\0 " \</span></span><br><span class="line"><span class="addition">+        "load_dtb=fatload mmc 0:0 $&#123;dtb_wowo_addr&#125; $&#123;dtb_name&#125;\0 "</span></span><br><span class="line">#elif defined(CONFIG_VEXPRESS_EXTENDED_MEMORY_MAP)</span><br><span class="line">#define CONFIG_PLATFORM_ENV_SETTINGS \</span><br><span class="line">        "loadaddr=0xa0008000\0" \</span><br><span class="line"><span class="meta">@@ -216,21 +224,36 @@</span></span><br><span class="line">        "pxefile_addr_r=0xa8000000\0" \</span><br><span class="line">        "scriptaddr=0xa8000000\0" \</span><br><span class="line">        "kernel_addr_r=0xa0008000\0"</span><br><span class="line"><span class="addition">+        "kernel_name=zImage\0" \</span></span><br><span class="line"><span class="addition">+        "ramdisk_name=uramdisk.img\0" \</span></span><br><span class="line"><span class="addition">+        "dtb_name=vexpress-v2p-ca9.dtb\0" \</span></span><br><span class="line"><span class="addition">+        "kernel_wowo_addr=0x60000000\0" \</span></span><br><span class="line"><span class="addition">+        "ramdisk_wowo_addr=0x70000000\0" \</span></span><br><span class="line"><span class="addition">+        "dtb_wowo_addr=0x61000000\0" \</span></span><br><span class="line"><span class="addition">+        "load_kernel=fatload mmc 0:0 $&#123;kernel_wowo_addr&#125; $&#123;kernel_name&#125;\0 " \</span></span><br><span class="line"><span class="addition">+        "load_ramdisk=fatload mmc 0:0 $&#123;ramdisk_wowo_addr&#125; $&#123;ramdisk_name&#125;\0 " \</span></span><br><span class="line"><span class="addition">+        "load_dtb=fatload mmc 0:0 $&#123;dtb_wowo_addr&#125; $&#123;dtb_name&#125;\0 "</span></span><br><span class="line">#endif</span><br><span class="line">#define CONFIG_EXTRA_ENV_SETTINGS \</span><br><span class="line">        CONFIG_PLATFORM_ENV_SETTINGS \</span><br><span class="line">                 BOOTENV \</span><br><span class="line">        "console=ttyAMA0,38400n8\0" \</span><br><span class="line">        "dram=1024M\0" \</span><br><span class="line"><span class="deletion">-        "root=/dev/sda1 rw\0" \</span></span><br><span class="line"><span class="addition">+        "root=/dev/mmcblk0 rw\0" \</span></span><br><span class="line">        "mtd=armflash:1M@0x800000(uboot),7M@0x1000000(kernel)," \</span><br><span class="line">            "24M@0x2000000(initrd)\0" \</span><br><span class="line">        "flashargs=setenv bootargs root=$&#123;root&#125; console=$&#123;console&#125; " \</span><br><span class="line">            "mem=$&#123;dram&#125; mtdparts=$&#123;mtd&#125; mmci.fmax=190000 " \</span><br><span class="line">            "devtmpfs.mount=0  vmalloc=256M\0" \</span><br><span class="line"><span class="addition">+        "sdargs=setenv bootargs rdinit=/sbin/init console=$&#123;console&#125;\0" \</span></span><br><span class="line">        "bootflash=run flashargs; " \</span><br><span class="line">            "cp $&#123;ramdisk_addr&#125; $&#123;ramdisk_addr_r&#125; $&#123;maxramdisk&#125;; " \</span><br><span class="line"><span class="deletion">-            "bootm $&#123;kernel_addr&#125; $&#123;ramdisk_addr_r&#125;\0"</span></span><br><span class="line"><span class="addition">+            "bootm $&#123;kernel_addr&#125; $&#123;ramdisk_addr_r&#125;\0" \</span></span><br><span class="line"><span class="addition">+        "bootsd=run sdargs; " \</span></span><br><span class="line"><span class="addition">+            "run load_kernel; " \</span></span><br><span class="line"><span class="addition">+            "run load_ramdisk; " \</span></span><br><span class="line"><span class="addition">+            "run load_dtb; " \</span></span><br><span class="line"><span class="addition">+            "bootz $&#123;kernel_wowo_addr&#125; $&#123;ramdisk_wowo_addr&#125; $&#123;dtb_wowo_addr&#125;\0"</span></span><br><span class="line">/* FLASH and environment organization */</span><br><span class="line">#define PHYS_FLASH_SIZE            0x04000000    /* 64MB */</span><br></pre></td></tr></table></figure><hr><h2 id="启动带sd卡的qemu"><a href="#启动带sd卡的qemu" class="headerlink" title="启动带sd卡的qemu"></a>启动带sd卡的qemu</h2><p>qemu命令加上<code>-sd</code>的参数后，让该开发板支持sd卡，并且我们之前在uboot中指定从sd卡拷贝镜像到DDR中，并且启动kernel，可以进入串口。至此，在qemu环境下使用uboot通过sd卡去启动linux已经完成，我们可以通过这个过程学习uboot引导启动linux kernel的相关流程。<br></p><figure class="highlight shell"><figcaption><span>qemu加上-sd参数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M vexpress-a9 -m 1024M -kernel /home/victor/work/uboot/u-boot/u-boot -nographic -no-reboot -sd /home/victor/work/sd_card</span><br><span class="line"></span><br><span class="line">或者使用以下命令启动带图形界面</span><br><span class="line">qemu-system-arm -M vexpress-a9 -m 1024M -kernel /home/victor/work/uboot/u-boot/u-boot -no-reboot -sd /home/victor/work/sd_card -serial stdio</span><br></pre></td></tr></table></figure><p></p><figure class="highlight shell"><figcaption><span>启动log</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-linux:~$ qemu-system-arm -M vexpress-a9 -m 1024M -kernel /home/victor/work/uboot/u-boot/u-boot -nographic -no-reboot -sd /home/victor/work/sd_card</span><br><span class="line">WARNING: Image format was not specified for '/home/victor/work/sd_card111' and probing guessed raw.</span><br><span class="line">         Automatically detecting the format is dangerous for raw images, write operations on block 0 will be restricted.</span><br><span class="line">         Specify the 'raw' format explicitly to remove the restrictions.</span><br><span class="line">pulseaudio: set_sink_input_volume() failed</span><br><span class="line">pulseaudio: Reason: Invalid argument</span><br><span class="line">pulseaudio: set_sink_input_mute() failed</span><br><span class="line">pulseaudio: Reason: Invalid argument</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">U-Boot 2017.01-00001-g1d9426d-dirty (Feb 13 2020 - 14:24:21 +0800)</span><br><span class="line"></span><br><span class="line">DRAM:  1 GiB</span><br><span class="line">WARNING: Caches not enabled</span><br><span class="line">Flash: 128 MiB</span><br><span class="line">MMC:   MMC: 0</span><br><span class="line">*** Warning - bad CRC, using default environment</span><br><span class="line"></span><br><span class="line">In:    serial</span><br><span class="line">Out:   serial</span><br><span class="line">Err:   serial</span><br><span class="line">Net:   smc911x-0</span><br><span class="line">Hit any key to stop autoboot:  0</span><br><span class="line">reading zImage</span><br><span class="line">3453144 bytes read in 585 ms (5.6 MiB/s)</span><br><span class="line">reading uramdisk.img</span><br><span class="line">5052472 bytes read in 957 ms (5 MiB/s)</span><br><span class="line">reading vexpress-v2p-ca9.dtb</span><br><span class="line">14360 bytes read in 17 ms (824.2 KiB/s)</span><br><span class="line">Kernel image @ 0x60000000 [ 0x000000 - 0x34b0d8 ]</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Loading init Ramdisk from Legacy Image at 70000000 ...</span></span></span><br><span class="line">   Image Name:   xxx Root Filesystem</span><br><span class="line">   Image Type:   ARM Linux RAMDisk Image (uncompressed)</span><br><span class="line">   Data Size:    5052408 Bytes = 4.8 MiB</span><br><span class="line">   Load Address: 00000000</span><br><span class="line">   Entry Point:  00000000</span><br><span class="line">   Verifying Checksum ... OK</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Flattened Device Tree blob at 61000000</span></span></span><br><span class="line">   Booting using the fdt blob at 0x61000000</span><br><span class="line">   Loading Ramdisk to 7fa09000, end 7feda7f8 ... OK</span><br><span class="line">   Loading Device Tree to 7fa02000, end 7fa08817 ... OK</span><br><span class="line"></span><br><span class="line">Starting kernel ...</span><br><span class="line"></span><br><span class="line">Booting Linux on physical CPU 0x0</span><br><span class="line">Initializing cgroup subsys cpuset</span><br><span class="line">Linux version 4.4.0+ (victor@victor-linux) (gcc version 5.4.0 20160609 (Ubuntu/Linaro 5.4.0-6ubuntu1~16.04.9) ) #8 SMP Thu Feb 13 11:08:51 CST 2020</span><br><span class="line">CPU: ARMv7 Processor [410fc090] revision 0 (ARMv7), cr=10c5387d</span><br><span class="line">CPU: PIPT / VIPT nonaliasing data cache, VIPT nonaliasing instruction cache</span><br><span class="line">Machine model: V2P-CA9</span><br><span class="line">Looking for initrd properties...</span><br><span class="line">initrd_start=0x7fa09000  initrd_end=0x7feda7f8</span><br><span class="line">Memory policy: Data cache writeback</span><br><span class="line">CPU: All CPU(s) started in SVC mode.</span><br><span class="line">PERCPU: Embedded 12 pages/cpu @bf7bb000 s18188 r8192 d22772 u49152</span><br><span class="line">Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 260096</span><br><span class="line">Kernel command line: rdinit=/sbin/init console=ttyAMA0,38400n8</span><br><span class="line">log_buf_len individual max cpu contribution: 4096 bytes</span><br><span class="line">log_buf_len total cpu_extra contributions: 12288 bytes</span><br><span class="line">log_buf_len min size: 16384 bytes</span><br><span class="line">log_buf_len: 32768 bytes</span><br><span class="line">early log buf free: 14816(90%)</span><br><span class="line">PID hash table entries: 4096 (order: 2, 16384 bytes)</span><br><span class="line">Dentry cache hash table entries: 131072 (order: 7, 524288 bytes)</span><br><span class="line">Inode-cache hash table entries: 65536 (order: 6, 262144 bytes)</span><br><span class="line">Memory: 1027484K/1048576K available (4848K kernel code, 155K rwdata, 1388K rodata, 280K init, 152K bss, 21092K reserved, 0K cma-reserved)</span><br><span class="line">Virtual kernel memory layout:</span><br><span class="line">    vector  : 0xffff0000 - 0xffff1000   (   4 kB)</span><br><span class="line">    fixmap  : 0xffc00000 - 0xfff00000   (3072 kB)</span><br><span class="line">    vmalloc : 0xc0800000 - 0xff800000   (1008 MB)</span><br><span class="line">    lowmem  : 0x80000000 - 0xc0000000   (1024 MB)</span><br><span class="line">    modules : 0x7f000000 - 0x80000000   (  16 MB)</span><br><span class="line">      .text : 0x80008000 - 0x8061f620   (6238 kB)</span><br><span class="line">      .init : 0x80620000 - 0x80666000   ( 280 kB)</span><br><span class="line">      .data : 0x80666000 - 0x8068cfa0   ( 156 kB)</span><br><span class="line">       .bss : 0x8068f000 - 0x806b53b8   ( 153 kB)</span><br><span class="line">SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=4, Nodes=1</span><br><span class="line">Hierarchical RCU implementation.</span><br><span class="line">    Build-time adjustment of leaf fanout to 32.</span><br><span class="line">    RCU restricting CPUs from NR_CPUS=8 to nr_cpu_ids=4.</span><br><span class="line">RCU: Adjusting geometry for rcu_fanout_leaf=32, nr_cpu_ids=4</span><br><span class="line">NR_IRQS:16 nr_irqs:16 16</span><br><span class="line">GIC CPU mask not found - kernel will fail to boot.</span><br><span class="line">GIC CPU mask not found - kernel will fail to boot.</span><br><span class="line">L2C: platform modifies aux control register: 0x02020000 -&gt; 0x02420000</span><br><span class="line">L2C: DT/platform modifies aux control register: 0x02020000 -&gt; 0x02420000</span><br><span class="line">L2C-310 enabling early BRESP for Cortex-A9</span><br><span class="line">L2C-310 full line of zeros enabled for Cortex-A9</span><br><span class="line">L2C-310 dynamic clock gating disabled, standby mode disabled</span><br><span class="line">L2C-310 cache controller enabled, 8 ways, 128 kB</span><br><span class="line">L2C-310: CACHE_ID 0x410000c8, AUX_CTRL 0x46420001</span><br><span class="line">smp_twd: clock not found -2</span><br><span class="line">sched_clock: 32 bits at 24MHz, resolution 41ns, wraps every 89478484971ns</span><br><span class="line">clocksource: arm,sp804: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 1911260446275 ns</span><br><span class="line">Console: colour dummy device 80x30</span><br><span class="line">Calibrating local timer... 96.66MHz.</span><br><span class="line">Calibrating delay loop... 778.24 BogoMIPS (lpj=3891200)</span><br><span class="line">pid_max: default: 32768 minimum: 301</span><br><span class="line">Mount-cache hash table entries: 2048 (order: 1, 8192 bytes)</span><br><span class="line">Mountpoint-cache hash table entries: 2048 (order: 1, 8192 bytes)</span><br><span class="line">CPU: Testing write buffer coherency: ok</span><br><span class="line">CPU0: thread -1, cpu 0, socket 0, mpidr 80000000</span><br><span class="line">Setting up static identity map for 0x60008280 - 0x600082d8</span><br><span class="line">Brought up 1 CPUs</span><br><span class="line">SMP: Total of 1 processors activated (778.24 BogoMIPS).</span><br><span class="line">CPU: All CPU(s) started in SVC mode.</span><br><span class="line">devtmpfs: initialized</span><br><span class="line">VFP support v0.3: implementor 41 architecture 3 part 30 variant 9 rev 0</span><br><span class="line">clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns</span><br><span class="line">NET: Registered protocol family 16</span><br><span class="line">DMA: preallocated 256 KiB pool for atomic coherent allocations</span><br><span class="line">cpuidle: using governor ladder</span><br><span class="line">cpuidle: using governor menu</span><br><span class="line">of_amba_device_create(): amba_device_add() failed (-19) for /memory-controller@100e0000</span><br><span class="line">of_amba_device_create(): amba_device_add() failed (-19) for /memory-controller@100e1000</span><br><span class="line">of_amba_device_create(): amba_device_add() failed (-19) for /watchdog@100e5000</span><br><span class="line">of_amba_device_create(): amba_device_add() failed (-19) for /smb/motherboard/iofpga@7,00000000/sysctl@01000</span><br><span class="line">of_amba_device_create(): amba_device_add() failed (-19) for /smb/motherboard/iofpga@7,00000000/wdt@0f000</span><br><span class="line">hw-breakpoint: debug architecture 0x4 unsupported.</span><br><span class="line">Serial: AMBA PL011 UART driver</span><br><span class="line">10009000.uart: ttyAMA0 at MMIO 0x10009000 (irq = 35, base_baud = 0) is a PL011 rev1</span><br><span class="line">console [ttyAMA0] enabled</span><br><span class="line">1000a000.uart: ttyAMA1 at MMIO 0x1000a000 (irq = 36, base_baud = 0) is a PL011 rev1</span><br><span class="line">1000b000.uart: ttyAMA2 at MMIO 0x1000b000 (irq = 37, base_baud = 0) is a PL011 rev1</span><br><span class="line">1000c000.uart: ttyAMA3 at MMIO 0x1000c000 (irq = 38, base_baud = 0) is a PL011 rev1</span><br><span class="line">SCSI subsystem initialized</span><br><span class="line">usbcore: registered new interface driver usbfs</span><br><span class="line">usbcore: registered new interface driver hub</span><br><span class="line">usbcore: registered new device driver usb</span><br><span class="line">Advanced Linux Sound Architecture Driver Initialized.</span><br><span class="line">clocksource: Switched to clocksource arm,sp804</span><br><span class="line">NET: Registered protocol family 2</span><br><span class="line">TCP established hash table entries: 8192 (order: 3, 32768 bytes)</span><br><span class="line">TCP bind hash table entries: 8192 (order: 4, 65536 bytes)</span><br><span class="line">TCP: Hash tables configured (established 8192 bind 8192)</span><br><span class="line">UDP hash table entries: 512 (order: 2, 16384 bytes)</span><br><span class="line">UDP-Lite hash table entries: 512 (order: 2, 16384 bytes)</span><br><span class="line">NET: Registered protocol family 1</span><br><span class="line">RPC: Registered named UNIX socket transport module.</span><br><span class="line">RPC: Registered udp transport module.</span><br><span class="line">RPC: Registered tcp transport module.</span><br><span class="line">RPC: Registered tcp NFSv4.1 backchannel transport module.</span><br><span class="line">[xxx]  populate_rootfs start 11111</span><br><span class="line">[xxx]  populate_rootfs start 2222</span><br><span class="line">[xxx]  initrd_start = 0x-1616867328</span><br><span class="line">Unpacking initramfs...</span><br><span class="line">Freeing initrd memory: 4936K (9fa09000 - 9fedb000)</span><br><span class="line">hw perfevents: enabled with armv7_cortex_a9 PMU driver, 1 counters available</span><br><span class="line">futex hash table entries: 1024 (order: 4, 65536 bytes)</span><br><span class="line">squashfs: version 4.0 (2009/01/31) Phillip Lougher</span><br><span class="line">jffs2: version 2.2. (NAND) © 2001-2006 Red Hat, Inc.</span><br><span class="line">9p: Installing v9fs 9p2000 file system support</span><br><span class="line">io scheduler noop registered (default)</span><br><span class="line">clcd-pl11x 10020000.clcd: PL111 rev2 at 0x10020000</span><br><span class="line">clcd-pl11x 10020000.clcd: /clcd@10020000 hardware, 1024x768@59 display</span><br><span class="line">Console: switching to colour frame buffer device 128x48</span><br><span class="line">clcd-pl11x 1001f000.clcd: PL111 rev2 at 0x1001f000</span><br><span class="line">clcd-pl11x 1001f000.clcd: /smb/motherboard/iofpga@7,00000000/clcd@1f000 hardware, 640x480@59 display</span><br><span class="line">40000000.flash: Found 2 x16 devices at 0x0 in 32-bit bank. Manufacturer ID 0x000000 Chip ID 0x000000</span><br><span class="line">Intel/Sharp Extended Query Table at 0x0031</span><br><span class="line">Using buffer write method</span><br><span class="line">40000000.flash: Found 2 x16 devices at 0x0 in 32-bit bank. Manufacturer ID 0x000000 Chip ID 0x000000</span><br><span class="line">Intel/Sharp Extended Query Table at 0x0031</span><br><span class="line">Using buffer write method</span><br><span class="line">Concatenating MTD devices:</span><br><span class="line">(0): "40000000.flash"</span><br><span class="line">(1): "40000000.flash"</span><br><span class="line">into device "40000000.flash"</span><br><span class="line">libphy: smsc911x-mdio: probed</span><br><span class="line">smsc911x 4e000000.ethernet eth0: attached PHY driver [Generic PHY] (mii_bus:phy_addr=4e000000.etherne:01, irq=-1)</span><br><span class="line">smsc911x 4e000000.ethernet eth0: MAC Address: 52:54:00:12:34:56</span><br><span class="line">isp1760 4f000000.usb: bus width: 32, oc: digital</span><br><span class="line">isp1760 4f000000.usb: NXP ISP1760 USB Host Controller</span><br><span class="line">isp1760 4f000000.usb: new USB bus registered, assigned bus number 1</span><br><span class="line">isp1760 4f000000.usb: Scratch test failed.</span><br><span class="line">isp1760 4f000000.usb: can't setup: -19</span><br><span class="line">isp1760 4f000000.usb: USB bus 1 deregistered</span><br><span class="line">usbcore: registered new interface driver usb-storage</span><br><span class="line">mousedev: PS/2 mouse device common for all mice</span><br><span class="line">rtc-pl031 10017000.rtc: rtc core: registered pl031 as rtc0</span><br><span class="line">mmci-pl18x 10005000.mmci: Got CD GPIO</span><br><span class="line">mmci-pl18x 10005000.mmci: Got WP GPIO</span><br><span class="line">mmci-pl18x 10005000.mmci: No vqmmc regulator found</span><br><span class="line">mmci-pl18x 10005000.mmci: mmc0: PL181 manf 41 rev0 at 0x10005000 irq 31,32 (pio)</span><br><span class="line">ledtrig-cpu: registered to indicate activity on CPUs</span><br><span class="line">usbcore: registered new interface driver usbhid</span><br><span class="line">usbhid: USB HID core driver</span><br><span class="line">input: AT Raw Set 2 keyboard as /devices/platform/smb/smb:motherboard/smb:motherboard:iofpga@7,00000000/10006000.kmi/serio0/input/input0</span><br><span class="line">mmc0: new SD card at address 4567</span><br><span class="line">mmcblk0: mmc0:4567 QEMU! 512 MiB</span><br><span class="line">mmcblk0:</span><br><span class="line">aaci-pl041 10004000.aaci: ARM AC'97 Interface PL041 rev0 at 0x10004000, irq 30</span><br><span class="line">aaci-pl041 10004000.aaci: FIFO 512 entries</span><br><span class="line">oprofile: using arm/armv7-ca9</span><br><span class="line">NET: Registered protocol family 17</span><br><span class="line">9pnet: Installing 9P2000 support</span><br><span class="line">Registering SWP/SWPB emulation handler</span><br><span class="line">rtc-pl031 10017000.rtc: setting system clock to 2020-02-13 06:25:06 UTC (1581575106)</span><br><span class="line">ALSA device list:</span><br><span class="line"><span class="meta">  #</span><span class="bash">0: ARM AC<span class="string">'97 Interface PL041 rev0 at 0x10004000, irq 30</span></span></span><br><span class="line">[xxx] ramdisk_exc_cmd = /sbin/init</span><br><span class="line">Freeing unused kernel memory: 280K (80620000 - 80666000)</span><br><span class="line">mount: mounting configfs on /config failed: No such device</span><br><span class="line"></span><br><span class="line">Please press Enter to activate this console. input: ImExPS/2 Generic Explorer Mouse as /devices/platform/smb/smb:motherboard/smb:motherboard:iofpga@7,00000000/10007000.kmi/serio1/input/input2</span><br><span class="line"></span><br><span class="line">/ #</span><br><span class="line">/ #</span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.kernel.org/doc/html/v4.14/admin-guide/kernel-parameters.html" target="_blank" rel="noopener">The kernel’s command-line parameters</a></li><li><a href="https://github.com/ARM-software/u-boot/blob/master/doc/README.qemu-arm" target="_blank" rel="noopener">README.qemu-arm</a></li><li><a href="https://www.cnblogs.com/pengdonglin137/p/5023704.html" target="_blank" rel="noopener">用Qemu模拟vexpress-a9实现用u-boot引导Linux内核</a></li><li><a href="https://balau82.wordpress.com/2010/04/12/booting-linux-with-u-boot-on-qemu-arm/" target="_blank" rel="noopener">Booting Linux with U-Boot on QEMU ARM</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 在家学习嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 在家学习嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在家学习嵌入式1--搭建qemu环境</title>
      <link href="/90fb723e/"/>
      <url>/90fb723e/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>新冠疫情期间在家里无事可做，奈何手上没有现成的开发板，又想调试学习linux内核，于是就有了这一系列的文章。本系列文章包含以下内容：</p><ul><li><a href="http://wowothink.com/90fb723e/">在家学习嵌入式1-搭建qemu环境</a></li><li><a href="http://wowothink.com/1b0d21a9/">在家学习嵌入式2-在qemu环境下使用uboot启动linux</a></li><li><a href="http://wowothink.com/14c7c84a">在家学习嵌入式3-使用Buildroot构建编译系统</a></li><li><a href="http://wowothink.com/e7173683">在家学习嵌入式4-Versatile Express开发板</a></li><li><a href="http://wowothink.com/f9af0016">在家学习嵌入式5-buildroot的使用</a></li></ul><p>注意：这只是一个入门的文章，介绍自己如何一步步搭建qemu环境以及启动虚拟开发板。如果想要用现成的环境，可以去查看吴章金大牛发起的<a href="http://tinylab.org/linux-lab-v0.3/" target="_blank" rel="noopener">Linux lab</a> 项目，那个项目做得非常的棒。</p><hr><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>作为嵌入式软件工程师，经常需要板子才能开发然后验证某些内容，这些东西在公司很容易实现。但是一回到家里，就没有这样的开发环境。因此，有没有这样一种仿真环境，支持某个<strong>虚拟的开发板</strong>，<strong>可以在上面跑uboot、linux kernel，从而进行uboot或kernel的调试而不必关心具体的外设器件。</strong><a id="more"></a></p><hr><h2 id="QEMU介绍"><a href="#QEMU介绍" class="headerlink" title="QEMU介绍"></a>QEMU介绍</h2><p><code>QEMU</code>是一个支持各种目标处理器（例如x86，ARM，MIPS等）的<code>模拟器</code>。当用作机器仿真器时，QEMU可以在另一台机器（例如x86 PC）上运行为一台机器（例如ARM板）制作的操作系统和程序。在本文中，将详细列举出如何一步步搭建<code>QEMU</code>+<code>ARM</code>的仿真环境，<strong>虚拟的开发板</strong>为<code>vexpress-a9</code>。</p><hr><h2 id="QEMU环境搭建"><a href="#QEMU环境搭建" class="headerlink" title="QEMU环境搭建"></a>QEMU环境搭建</h2><h3 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PC：Ubuntu 16.04</span><br><span class="line">QEMU：qemu-arm version 2.5.0 (Debian 1:2.5+dfsg-5ubuntu10.42), Copyright (c) 2003-2008 Fabrice Bellard</span><br><span class="line">Linux Kernel：5.3.0，使用这个版本的kernel，无法显示，换用4.4的kernel就可以显示，原因未知。</span><br><span class="line">Linux Kernel：4.4.0</span><br><span class="line">Target board：vexpress-a9          ARM Versatile Express for Cortex-A9</span><br><span class="line">Cross Compile：arm-linux-gnueabi-gcc (Ubuntu/Linaro 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609</span><br></pre></td></tr></table></figure><h3 id="安装QEMU"><a href="#安装QEMU" class="headerlink" title="安装QEMU"></a>安装QEMU</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu</span><br></pre></td></tr></table></figure><p>直接使用<code>apt-get install</code>命令下载，没有参照网上说的下载源码编译。</p><h3 id="下载linux-kernel并切换到v4-4版本"><a href="#下载linux-kernel并切换到v4-4版本" class="headerlink" title="下载linux kernel并切换到v4.4版本"></a>下载linux kernel并切换到v4.4版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://mirrors.tuna.tsinghua.edu.cn/git/linux.git</span><br><span class="line">git checkout v4.4-rc1</span><br></pre></td></tr></table></figure><h3 id="安装arm交叉工具链"><a href="#安装arm交叉工具链" class="headerlink" title="安装arm交叉工具链"></a>安装arm交叉工具链</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-arm-linux-gnueabi</span><br></pre></td></tr></table></figure><h3 id="编译linux-kernel"><a href="#编译linux-kernel" class="headerlink" title="编译linux kernel"></a>编译linux kernel</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm vexpress_defconfig</span><br><span class="line">make CROSS_COMPILE=arm-linux-gnueabi- ARCH=arm</span><br></pre></td></tr></table></figure><p>这里使用<code>vexpress_defconfig</code>的配置，也就是使用<code>vexpress-a9</code>的板子。据说<code>QEMU</code>对这个板子支持比较好，具体的没有深入的研究。</p><h3 id="根文件系统制作"><a href="#根文件系统制作" class="headerlink" title="根文件系统制作"></a>根文件系统制作</h3><ul><li>编译busybox<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://busybox.net/downloads/busybox-1.30.0.tar.bz2</span><br><span class="line">make defconfig</span><br><span class="line">make CROSS_COMPILE=arm-linux-gnueabi-</span><br><span class="line">make install CROSS_COMPILE=arm-linux-gnueabi-</span><br></pre></td></tr></table></figure></li></ul><p>编译生成的bin文件在<code>busybox-1.30.0/_install/</code>目录下。</p><ul><li><p>创建根目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p rootfs/&#123;dev,etc/init.d,lib&#125;</span><br></pre></td></tr></table></figure></li><li><p>拷贝bin文件到rootfs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -rf ./busybox-1.30.0/_install/* rootfs/</span><br></pre></td></tr></table></figure></li><li><p>拷贝库文件到<code>rootfs/lib/</code>目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -P /usr/arm-linux-gnueabi/lib/* rootfs/lib/</span><br></pre></td></tr></table></figure></li><li><p>创建<code>proc</code>和<code>sys</code>目录等目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir rootfs/proc</span><br><span class="line">mkdir rootfs/sys</span><br><span class="line">mkdir rootfs/config</span><br><span class="line">mkdir rootfs/debug</span><br></pre></td></tr></table></figure></li></ul><p>之所以要创建这两个目录，因为后面需要挂载<code>procfs</code>和<code>sysfs</code>两个文件系统。当然，这两个目录也可以在启动脚本中创建。</p><ul><li><p>修改为root</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R root:root rootfs/</span><br></pre></td></tr></table></figure></li><li><p>创建4个tty终端设备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mknod rootfs/dev/tty1 c 4 1</span><br><span class="line">sudo mknod rootfs/dev/tty2 c 4 2</span><br><span class="line">sudo mknod rootfs/dev/tty3 c 4 3</span><br><span class="line">sudo mknod rootfs/dev/tty4 c 4 4</span><br></pre></td></tr></table></figure></li><li><p>制作根文件系统镜像a9rootfs.ext4</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/zero of=a9rootfs.ext4 bs=1M count=32</span><br></pre></td></tr></table></figure></li><li><p>格式化成ext4文件系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 a9rootfs.ext4</span><br></pre></td></tr></table></figure></li><li><p>将rootfs文件拷贝到文件系统中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir tempfs</span><br><span class="line">sudo mount -t ext4 a9rootfs.ext4 tempfs/ -o loop</span><br><span class="line">sudo cp -rf rootfs/* tempfs/</span><br><span class="line">sudo umount tempfs/</span><br></pre></td></tr></table></figure></li><li><p>设置开机启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo vi rootfs/etc/init.d/rcS</span><br><span class="line"></span><br><span class="line">写入以下内容：</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">mount -t sysfs sysfs /sys</span><br><span class="line">mount -t proc procfs /proc</span><br><span class="line">mount -t debugfs debugfsfs /debug</span><br><span class="line">mount -t configfs configfs /config</span><br><span class="line"></span><br><span class="line">mount -o rw,remount /</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="启动QEMU"><a href="#启动QEMU" class="headerlink" title="启动QEMU"></a>启动QEMU</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M vexpress-a9 -m 512M -kernel /home/victor/work/linux/linux/arch/arm/boot/zImage -dtb /home/victor/work/linux/linux/arch/arm/boot/dts/vexpress-v2p-ca9.dtb -append "root=/dev/mmcblk0 console=ttyAMA0" -sd /home/victor/work/linux/a9rootfs.ext4 -serial stdio</span><br></pre></td></tr></table></figure><p>至此，就可以看到<code>vexpress-a9</code>板子启动的kernel log，并且出来一个串口，并且可以看到小企鹅的界面出现，后面我们就可以使用这块虚拟的开发板学习linux graphic相关的内容了。<br>关于<code>qemu-system-arm</code>命令各个参数详细解释如下：</p><ul><li><code>-M vexpress-a9</code>：表示使用<code>vexpress-a9</code>开发板的配置；</li><li><code>-m 512M</code>：表示这只内存为512M；</li><li><code>-kernel xxx/arch/arm/boot/zImage</code>：表示使用哪个内核镜像；</li><li><code>-dtb xxx/arch/arm/boot/dts/vexpress-v2p-ca9.dtb</code>：表示使用哪个dtb文件；</li><li><code>-nographic</code>：表示不启动图形化界面；</li><li><code>-append</code>：表示设置kernel的cmdline；</li><li><code>-sd xxx/a9rootfs.ext4</code>：表示使用sd卡上某个文件作为根文件系统；</li><li><code>qemu-system-arm -M help</code>：可以查看支持的板子情况。</li></ul><p>注意：在xshell远程ubuntu的使用使用<code>-serial stdio</code>的参数会提示如下错误，在ubuntu使用则不会，具体原因未知。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(qemu) qemu-system-arm: -serial stdio: cannot use stdio by multiple character devices</span><br><span class="line">qemu-system-arm: -serial stdio: could not connect serial device to character backend &apos;stdio&apos;</span><br></pre></td></tr></table></figure><p></p><p>在启动参数加入<code>console=tty0</code>的时候，log会从图形界面输出来。<br>启动的kernel log如下：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-linux:~$ qemu-system-arm -M vexpress-a9 -m 512M -kernel /home/victor/work/linux/linux/arch/arm/boot/zImage -dtb /home/victor/work/linux/linux/arch/arm/boot/dts/vexpress-v2p-ca9.dtb -append "root=/dev/mmcblk0 console=ttyAMA0" -sd /home/victor/work/linux/a9rootfs.ext4 -nographic</span><br><span class="line">WARNING: Image format was not specified for '/home/victor/work/linux/a9rootfs.ext4' and probing guessed raw.</span><br><span class="line">         Automatically detecting the format is dangerous for raw images, write operations on block 0 will be restricted.</span><br><span class="line">         Specify the 'raw' format explicitly to remove the restrictions.</span><br><span class="line">pulseaudio: set_sink_input_volume() failed</span><br><span class="line">pulseaudio: Reason: Invalid argument</span><br><span class="line">pulseaudio: set_sink_input_mute() failed</span><br><span class="line">pulseaudio: Reason: Invalid argument</span><br><span class="line">[    0.000000] Booting Linux on physical CPU 0x0</span><br><span class="line">[    0.000000] Initializing cgroup subsys cpuset</span><br><span class="line">[    0.000000] Linux version 4.4.0 (victor@victor-linux) (gcc version 5.4.0 20160609 (Ubuntu/Linaro 5.4.0-6ubuntu1~16.04.9) ) #4 SMP Mon Feb 3 23:30:32 CST 2020</span><br><span class="line">[    0.000000] CPU: ARMv7 Processor [410fc090] revision 0 (ARMv7), cr=10c5387d</span><br><span class="line">[    0.000000] CPU: PIPT / VIPT nonaliasing data cache, VIPT nonaliasing instruction cache</span><br><span class="line">[    0.000000] Machine model: V2P-CA9</span><br><span class="line">[    0.000000] Memory policy: Data cache writeback</span><br><span class="line">[    0.000000] CPU: All CPU(s) started in SVC mode.</span><br><span class="line">[    0.000000] PERCPU: Embedded 12 pages/cpu @9fbbc000 s18188 r8192 d22772 u49152</span><br><span class="line">[    0.000000] Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 130048</span><br><span class="line">[    0.000000] Kernel command line: root=/dev/mmcblk0 console=ttyAMA0</span><br><span class="line">[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes</span><br><span class="line">[    0.000000] log_buf_len total cpu_extra contributions: 12288 bytes</span><br><span class="line">[    0.000000] log_buf_len min size: 16384 bytes</span><br><span class="line">[    0.000000] log_buf_len: 32768 bytes</span><br><span class="line">[    0.000000] early log buf free: 14940(91%)</span><br><span class="line">[    0.000000] PID hash table entries: 2048 (order: 1, 8192 bytes)</span><br><span class="line">[    0.000000] Dentry cache hash table entries: 65536 (order: 6, 262144 bytes)</span><br><span class="line">[    0.000000] Inode-cache hash table entries: 32768 (order: 5, 131072 bytes)</span><br><span class="line">[    0.000000] Memory: 512540K/524288K available (4890K kernel code, 157K rwdata, 1400K rodata, 284K init, 152K bss, 11748K reserved, 0K cma-reserved)</span><br><span class="line">[    0.000000] Virtual kernel memory layout:</span><br><span class="line">[    0.000000]     vector  : 0xffff0000 - 0xffff1000   (   4 kB)</span><br><span class="line">[    0.000000]     fixmap  : 0xffc00000 - 0xfff00000   (3072 kB)</span><br><span class="line">[    0.000000]     vmalloc : 0xa0800000 - 0xff800000   (1520 MB)</span><br><span class="line">[    0.000000]     lowmem  : 0x80000000 - 0xa0000000   ( 512 MB)</span><br><span class="line">[    0.000000]     modules : 0x7f000000 - 0x80000000   (  16 MB)</span><br><span class="line">[    0.000000]       .text : 0x80008000 - 0x8062cb1c   (6291 kB)</span><br><span class="line">[    0.000000]       .init : 0x8062d000 - 0x80674000   ( 284 kB)</span><br><span class="line">[    0.000000]       .data : 0x80674000 - 0x8069b5e0   ( 158 kB)</span><br><span class="line">[    0.000000]        .bss : 0x8069e000 - 0x806c43b8   ( 153 kB)</span><br><span class="line">[    0.000000] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=4, Nodes=1</span><br><span class="line">[    0.000000] Hierarchical RCU implementation.</span><br><span class="line">[    0.000000]     Build-time adjustment of leaf fanout to 32.</span><br><span class="line">[    0.000000]     RCU restricting CPUs from NR_CPUS=8 to nr_cpu_ids=4.</span><br><span class="line">[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=32, nr_cpu_ids=4</span><br><span class="line">[    0.000000] NR_IRQS:16 nr_irqs:16 16</span><br><span class="line">[    0.000000] GIC CPU mask not found - kernel will fail to boot.</span><br><span class="line">[    0.000000] GIC CPU mask not found - kernel will fail to boot.</span><br><span class="line">[    0.000000] L2C: platform modifies aux control register: 0x02020000 -&gt; 0x02420000</span><br><span class="line">[    0.000000] L2C: DT/platform modifies aux control register: 0x02020000 -&gt; 0x02420000</span><br><span class="line">[    0.000000] L2C-310 enabling early BRESP for Cortex-A9</span><br><span class="line">[    0.000000] L2C-310 full line of zeros enabled for Cortex-A9</span><br><span class="line">[    0.000000] L2C-310 dynamic clock gating disabled, standby mode disabled</span><br><span class="line">[    0.000000] L2C-310 cache controller enabled, 8 ways, 128 kB</span><br><span class="line">[    0.000000] L2C-310: CACHE_ID 0x410000c8, AUX_CTRL 0x46420001</span><br><span class="line">[    0.000000] smp_twd: clock not found -2</span><br><span class="line">[    0.000190] sched_clock: 32 bits at 24MHz, resolution 41ns, wraps every 89478484971ns</span><br><span class="line">[    0.002513] clocksource: arm,sp804: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 1911260446275 ns</span><br><span class="line">[    0.005394] Console: colour dummy device 80x30</span><br><span class="line">[    0.005633] Calibrating local timer... 96.82MHz.</span><br><span class="line">[    0.064078] Calibrating delay loop... 729.49 BogoMIPS (lpj=3647488)</span><br><span class="line">[    0.162823] pid_max: default: 32768 minimum: 301</span><br><span class="line">[    0.163767] Mount-cache hash table entries: 1024 (order: 0, 4096 bytes)</span><br><span class="line">[    0.163802] Mountpoint-cache hash table entries: 1024 (order: 0, 4096 bytes)</span><br><span class="line">[    0.171517] CPU: Testing write buffer coherency: ok</span><br><span class="line">[    0.178226] CPU0: thread -1, cpu 0, socket 0, mpidr 80000000</span><br><span class="line">[    0.179127] Setting up static identity map for 0x60008280 - 0x600082d8</span><br><span class="line">[    0.188780] Brought up 1 CPUs</span><br><span class="line">[    0.188869] SMP: Total of 1 processors activated (729.49 BogoMIPS).</span><br><span class="line">[    0.188921] CPU: All CPU(s) started in SVC mode.</span><br><span class="line">[    0.220526] devtmpfs: initialized</span><br><span class="line">[    0.229612] VFP support v0.3: implementor 41 architecture 3 part 30 variant 9 rev 0</span><br><span class="line">[    0.238326] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns</span><br><span class="line">[    0.271747] NET: Registered protocol family 16</span><br><span class="line">[    0.274582] DMA: preallocated 256 KiB pool for atomic coherent allocations</span><br><span class="line">[    0.341602] cpuidle: using governor ladder</span><br><span class="line">[    0.341743] cpuidle: using governor menu</span><br><span class="line">[    0.348352] of_amba_device_create(): amba_device_add() failed (-19) for /memory-controller@100e0000</span><br><span class="line">[    0.348741] of_amba_device_create(): amba_device_add() failed (-19) for /memory-controller@100e1000</span><br><span class="line">[    0.349094] of_amba_device_create(): amba_device_add() failed (-19) for /watchdog@100e5000</span><br><span class="line">[    0.355177] of_amba_device_create(): amba_device_add() failed (-19) for /smb/motherboard/iofpga@7,00000000/sysctl@01000</span><br><span class="line">[    0.359367] of_amba_device_create(): amba_device_add() failed (-19) for /smb/motherboard/iofpga@7,00000000/wdt@0f000</span><br><span class="line">[    0.363936] hw-breakpoint: debug architecture 0x4 unsupported.</span><br><span class="line">[    0.364329] Serial: AMBA PL011 UART driver</span><br><span class="line">[    0.366100] 10009000.uart: ttyAMA0 at MMIO 0x10009000 (irq = 38, base_baud = 0) is a PL011 rev1</span><br><span class="line">[    0.399131] console [ttyAMA0] enabled</span><br><span class="line">[    0.410469] 1000a000.uart: ttyAMA1 at MMIO 0x1000a000 (irq = 39, base_baud = 0) is a PL011 rev1</span><br><span class="line">[    0.413902] 1000b000.uart: ttyAMA2 at MMIO 0x1000b000 (irq = 40, base_baud = 0) is a PL011 rev1</span><br><span class="line">[    0.415754] 1000c000.uart: ttyAMA3 at MMIO 0x1000c000 (irq = 41, base_baud = 0) is a PL011 rev1</span><br><span class="line">[    0.468356] SCSI subsystem initialized</span><br><span class="line">[    0.471182] usbcore: registered new interface driver usbfs</span><br><span class="line">[    0.472194] usbcore: registered new interface driver hub</span><br><span class="line">[    0.472940] usbcore: registered new device driver usb</span><br><span class="line">[    0.479099] Advanced Linux Sound Architecture Driver Initialized.</span><br><span class="line">[    0.495147] clocksource: Switched to clocksource arm,sp804</span><br><span class="line">[    0.543080] NET: Registered protocol family 2</span><br><span class="line">[    0.550144] TCP established hash table entries: 4096 (order: 2, 16384 bytes)</span><br><span class="line">[    0.551136] TCP bind hash table entries: 4096 (order: 3, 32768 bytes)</span><br><span class="line">[    0.552088] TCP: Hash tables configured (established 4096 bind 4096)</span><br><span class="line">[    0.553728] UDP hash table entries: 256 (order: 1, 8192 bytes)</span><br><span class="line">[    0.554304] UDP-Lite hash table entries: 256 (order: 1, 8192 bytes)</span><br><span class="line">[    0.556766] NET: Registered protocol family 1</span><br><span class="line">[    0.562762] RPC: Registered named UNIX socket transport module.</span><br><span class="line">[    0.564303] RPC: Registered udp transport module.</span><br><span class="line">[    0.564932] RPC: Registered tcp transport module.</span><br><span class="line">[    0.565518] RPC: Registered tcp NFSv4.1 backchannel transport module.</span><br><span class="line">[    0.575851] hw perfevents: enabled with armv7_cortex_a9 PMU driver, 1 counters available</span><br><span class="line">[    0.583459] futex hash table entries: 1024 (order: 4, 65536 bytes)</span><br><span class="line">[    0.625642] squashfs: version 4.0 (2009/01/31) Phillip Lougher</span><br><span class="line">[    0.631739] jffs2: version 2.2. (NAND) © 2001-2006 Red Hat, Inc.</span><br><span class="line">[    0.636289] 9p: Installing v9fs 9p2000 file system support</span><br><span class="line">[    0.643103] io scheduler noop registered (default)</span><br><span class="line">[    0.647942] clcd-pl11x 10020000.clcd: PL111 rev2 at 0x10020000</span><br><span class="line">[    0.656081] clcd-pl11x 10020000.clcd: /clcd@10020000 hardware, 1024x768@59 display</span><br><span class="line">[    0.739792] Console: switching to colour frame buffer device 128x48</span><br><span class="line">[    0.765090] clcd-pl11x 1001f000.clcd: PL111 rev2 at 0x1001f000</span><br><span class="line">[    0.766322] clcd-pl11x 1001f000.clcd: /smb/motherboard/iofpga@7,00000000/clcd@1f000 hardware, 640x480@59 display</span><br><span class="line">[    0.959531] 40000000.flash: Found 2 x16 devices at 0x0 in 32-bit bank. Manufacturer ID 0x000000 Chip ID 0x000000</span><br><span class="line">[    0.960863] Intel/Sharp Extended Query Table at 0x0031</span><br><span class="line">[    0.962127] Using buffer write method</span><br><span class="line">[    0.965497] 40000000.flash: Found 2 x16 devices at 0x0 in 32-bit bank. Manufacturer ID 0x000000 Chip ID 0x000000</span><br><span class="line">[    0.966484] Intel/Sharp Extended Query Table at 0x0031</span><br><span class="line">[    0.967741] Using buffer write method</span><br><span class="line">[    0.968342] Concatenating MTD devices:</span><br><span class="line">[    0.968765] (0): "40000000.flash"</span><br><span class="line">[    0.969100] (1): "40000000.flash"</span><br><span class="line">[    0.969360] into device "40000000.flash"</span><br><span class="line">[    1.060412] libphy: smsc911x-mdio: probed</span><br><span class="line">[    1.141943] smsc911x 4e000000.ethernet eth0: attached PHY driver [Generic PHY] (mii_bus:phy_addr=4e000000.etherne:01, irq=-1)</span><br><span class="line">[    1.152222] smsc911x 4e000000.ethernet eth0: MAC Address: 52:54:00:12:34:56</span><br><span class="line">[    1.265819] isp1760 4f000000.usb: bus width: 32, oc: digital</span><br><span class="line">[    1.269152] isp1760 4f000000.usb: NXP ISP1760 USB Host Controller</span><br><span class="line">[    1.271897] isp1760 4f000000.usb: new USB bus registered, assigned bus number 1</span><br><span class="line">[    1.279117] isp1760 4f000000.usb: Scratch test failed.</span><br><span class="line">[    1.281119] isp1760 4f000000.usb: can't setup: -19</span><br><span class="line">[    1.283532] isp1760 4f000000.usb: USB bus 1 deregistered</span><br><span class="line">[    1.299955] usbcore: registered new interface driver usb-storage</span><br><span class="line">[    1.310767] mousedev: PS/2 mouse device common for all mice</span><br><span class="line">[    1.323388] rtc-pl031 10017000.rtc: rtc core: registered pl031 as rtc0</span><br><span class="line">[    1.332061] mmci-pl18x 10005000.mmci: Got CD GPIO</span><br><span class="line">[    1.333047] mmci-pl18x 10005000.mmci: Got WP GPIO</span><br><span class="line">[    1.335764] mmci-pl18x 10005000.mmci: No vqmmc regulator found</span><br><span class="line">[    1.336790] mmci-pl18x 10005000.mmci: mmc0: PL181 manf 41 rev0 at 0x10005000 irq 34,35 (pio)</span><br><span class="line">[    1.388634] ledtrig-cpu: registered to indicate activity on CPUs</span><br><span class="line">[    1.406549] usbcore: registered new interface driver usbhid</span><br><span class="line">[    1.408744] usbhid: USB HID core driver</span><br><span class="line">[    1.425196] input: AT Raw Set 2 keyboard as /devices/platform/smb/smb:motherboard/smb:motherboard:iofpga@7,00000000/10006000.kmi/serio0/input/input0</span><br><span class="line">[    1.446792] mmc0: new SD card at address 4567</span><br><span class="line">[    1.455678] mmcblk0: mmc0:4567 QEMU! 32.0 MiB</span><br><span class="line">[    1.502967] aaci-pl041 10004000.aaci: ARM AC'97 Interface PL041 rev0 at 0x10004000, irq 33</span><br><span class="line">[    1.505573] aaci-pl041 10004000.aaci: FIFO 512 entries</span><br><span class="line">[    1.508563] oprofile: using arm/armv7-ca9</span><br><span class="line">[    1.511244] NET: Registered protocol family 17</span><br><span class="line">[    1.513656] 9pnet: Installing 9P2000 support</span><br><span class="line">[    1.515497] Registering SWP/SWPB emulation handler</span><br><span class="line">[    1.526156] rtc-pl031 10017000.rtc: setting system clock to 2020-02-03 17:13:06 UTC (1580749986)</span><br><span class="line">[    1.534574] ALSA device list:</span><br><span class="line">[    1.535249]   #0: ARM AC'97 Interface PL041 rev0 at 0x10004000, irq 33</span><br><span class="line">[    2.041615] input: ImExPS/2 Generic Explorer Mouse as /devices/platform/smb/smb:motherboard/smb:motherboard:iofpga@7,00000000/10007000.kmi/serio1/input/input2</span><br><span class="line">[    2.065749] EXT4-fs (mmcblk0): couldn't mount as ext3 due to feature incompatibilities</span><br><span class="line">[    2.104035] EXT4-fs (mmcblk0): mounted filesystem with ordered data mode. Opts: (null)</span><br><span class="line">[    2.107922] VFS: Mounted root (ext4 filesystem) readonly on device 179:0.</span><br><span class="line">[    2.119440] Freeing unused kernel memory: 284K (8062d000 - 80674000)</span><br><span class="line">[    2.375731] random: nonblocking pool is initialized</span><br><span class="line">[    3.460303] EXT4-fs (mmcblk0): Filesystem with huge files cannot be mounted RDWR without CONFIG_LBDAF</span><br><span class="line">[    3.495909] EXT4-fs (mmcblk0): re-mounted. Opts: data=ordered</span><br><span class="line"></span><br><span class="line">Please press Enter to activate this console.</span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/linyt/article/details/42504975" target="_blank" rel="noopener">从零使用qemu模拟器搭建arm运行环境</a></li><li><a href="https://blog.csdn.net/nxcxl88/article/details/53244754" target="_blank" rel="noopener">Ubuntu 16.04 利用qemu模拟ARM开发板</a></li><li><a href="https://blog.csdn.net/recclay/article/details/102319392" target="_blank" rel="noopener">嵌入式Linux之QEMU模拟器</a></li><li><a href="https://learningfromyoublog.wordpress.com/2016/04/05/131/" target="_blank" rel="noopener">ARM Versatile Express Emulation On Qemu From Scratch</a></li><li><a href="https://learningfromyoublog.wordpress.com/2016/11/27/u-boot-arm-versatile-express-emulation-on-qemu-with-nfs-as-rootfs/" target="_blank" rel="noopener">U-boot: ARM Versatile Express Emulation On Qemu With NFS as Rootfs</a></li><li><a href="https://crux-arm.nu/SupportedDevices/Vexpress" target="_blank" rel="noopener">Versatile express Introduction</a></li><li><a href="https://azeria-labs.com/emulate-raspberry-pi-with-qemu/" target="_blank" rel="noopener">RASPBERRY PI ON QEMU</a></li><li><a href="https://wiki.archlinux.org/index.php/QEMU" target="_blank" rel="noopener">QEMU wiki</a></li><li><a href="https://wiki.qemu.org/Documentation/Platforms/ARM" target="_blank" rel="noopener">QEMU wiki arm</a></li><li><a href="https://qemu.weilnetz.de/doc/qemu-doc.html#ARM-System-emulator" target="_blank" rel="noopener">QEMU version 4.1.0 User Documentation</a></li><li><a href="https://manpages.debian.org/jessie/qemu-system-arm/qemu-system-arm.1.en.html" target="_blank" rel="noopener">QEMU Emulator User Documentation</a></li><li><a href="https://bootlin.com/doc/legacy/elfs/embedded_lfs.pdf" target="_blank" rel="noopener">Embedded Linux From Scratch</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 在家学习嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 在家学习嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>usb gadget configfs 原理</title>
      <link href="/6a85234b/"/>
      <url>/6a85234b/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="为啥要介绍usb-gadget-configfs"><a href="#为啥要介绍usb-gadget-configfs" class="headerlink" title="为啥要介绍usb gadget configfs"></a>为啥要介绍usb gadget configfs</h2><p>在之前的2篇文章来介绍并验证usb gadget configfs，为啥呢？因为现在主流配置usb gadget都是采用configfs通过用户空间进行配置，而不是像之前使用hardcode方式专门有个内核模块来配置，来看一下Linux usb gadget的发展历程：</p><ul><li>David Brownell 在2003年之前引入gadget framework，只支持单一的gadget设备；</li><li>composite framework 在2008年的时候加入进来，用来支持多个function的gadget设备；</li><li>FunctionFS在2010年加入，允许用户空间创建function，并与内核寄存的function组成一个支持多个function的gadget设备；</li></ul><p>但是上述还存在一个问题，就是还在自定义的内核模块中，将各个功能各个用例绑定在一起不够便利。因此，在Linux 3.11版本引入usb gadget configfs，支持一系列API，用户层可以通过该API定义任意功能和配置，从用户空间定义特定于应用程序的usb复合设备。<br>在<a href="https://blog.csdn.net/encourage2011/article/details/75944295" target="_blank" rel="noopener">Androidadb驱动实现原理</a>这篇文章中，我们使用传统的hardcode方式来创建一个android adb的usb复合设备。在<a href="http://wowothink.com/a64c6a27/">usb gadget configfs 验证</a>文章中，我们使用usb gadget configfs方式创建一个mass storage的usb复合设备。无论是使用哪种方式，都是为了创建一个usb复合设备。本文将详细介绍通过usb gadget configfs创建usb复合设备的原理。<a id="more"></a></p><hr><h2 id="为啥是configfs"><a href="#为啥是configfs" class="headerlink" title="为啥是configfs"></a>为啥是configfs</h2><p><code>configfs</code>是基于内存的文件系统，它提供的功能与<code>sysfs</code>相反。<code>sysfs</code>是基于文件系统的kernel对象视图，<code>configfs</code>是基于文件系统的kernel对象管理器或<code>config_items</code>。</p><ul><li>在<code>sysfs</code>，对象是在kernel中创建的，并在<code>sysfs</code>中注册，对象的属性就在<code>sysfs</code>中出现，允许拥护空间读取。某些属性允许通过用户空间写。最重要的一点是，所有的对象都在kernel中创建或销毁，由kernel控制其生命周期；</li><li>在<code>configfs</code>，<code>config_group</code>是一组共享相同属性和操作的<code>config_items</code>的集合。<code>config_items</code>是在用户空间通过<code>mkdir</code>显式的创建，使用<code>rmdir</code>销毁，在<code>mkdir</code>之后会出现对应的属性，允许在用户空间进行读写。与<code>sysfs</code>不同的是，这些对象的生命周期完全由用户空间驱动，kernel驱动必须响应这些。</li></ul><p>在kernel内核中，<code>Documentation/filesystems/configfs/configfs.txt</code>详细的介绍了configfs原理，<code>samples/configfs/configfs_sample.c</code>介绍了如何使用configfs。</p><hr><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><ul><li>创建gadget，所支持的Functions, Configurations and Strings；</li><li>设置Strings，将Functions和Configurations链接起来；</li><li>使能gadget；</li></ul><table><thead><tr><th>Action</th><th>FileSystem Commands</th></tr></thead><tbody><tr><td>Create Gadget/Functions/Configurations..</td><td>Make Directory (mkdir)</td></tr><tr><td>Destroy Gadget/Functions/Configurations..</td><td>Remove Directory (rmdir)</td></tr><tr><td>Set Value of Attributes</td><td>Write (echo)</td></tr><tr><td>Get Value of Attributes</td><td>Read (cat)</td></tr><tr><td>Group Functions</td><td>Symlink (ln -s)</td></tr><tr><td>Ungroup Functions</td><td>Remove Symlink (rm)</td></tr></tbody></table><p>以下内容将详细介绍使用usb gadget configfs的步骤。</p><h3 id="使能相关的宏"><a href="#使能相关的宏" class="headerlink" title="使能相关的宏"></a>使能相关的宏</h3><p>想要使用usb gadget configfs，必须使能<code>CONFIG_FS</code>和<code>CONFIG_LIBCOMPOSITE</code>的宏，为啥呢？前者提供configfs的API，后者提供USB Composite Framework的功能，当然也包括创建usb gadget configfs的功能。<br></p><figure class="highlight c"><figcaption><span>drivers/usb/gadget/Makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj-$(CONFIG_USB_LIBCOMPOSITE)  += libcomposite.o</span><br><span class="line">libcomposite-y          := usbstring.o config.o epautoconf.o</span><br><span class="line">libcomposite-y          += composite.o functions.o configfs.o u_f.o</span><br></pre></td></tr></table></figure><p></p><p><code>drivers/usb/gadget/configfs.c</code>这个文件就是USB Composite Framework基于configfs提供的API，用于创建usb gadget configfs。</p><hr><h3 id="挂载configfs"><a href="#挂载configfs" class="headerlink" title="挂载configfs"></a>挂载configfs</h3><p>使用<code>mount -t configfs none /config/</code>命令进行挂载之后，在<code>config/</code>目录下就会自动生成一个<code>usb_gadget/</code>目录，站在configfs的角度，也就是创建一个名为<code>usb_gadget</code>的<code>config_items</code>的属性。这个是由于在<code>configfs.c</code>中调用了<code>configfs_register_subsystem()</code>函数注册了一个名为<code>usb_gadget</code>的configfs子系统。<br></p><figure class="highlight c"><figcaption><span>drivers/usb/gadget/configfs.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">configfs_group_operations</span> <span class="title">gadgets_ops</span> = &#123;</span></span><br><span class="line">    .make_group     = &amp;gadgets_make,</span><br><span class="line">    .drop_item      = &amp;gadgets_drop,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">config_item_type</span> <span class="title">gadgets_type</span> = &#123;</span></span><br><span class="line">    .ct_group_ops   = &amp;gadgets_ops,</span><br><span class="line">    .ct_owner       = THIS_MODULE,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">configfs_subsystem</span> <span class="title">gadget_subsys</span> = &#123;</span></span><br><span class="line">    .su_group = &#123;</span><br><span class="line">        .cg_item = &#123;</span><br><span class="line">            .ci_namebuf = <span class="string">"usb_gadget"</span>,</span><br><span class="line">            .ci_type = &amp;gadgets_type,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    .su_mutex = __MUTEX_INITIALIZER(gadget_subsys.su_mutex),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">gadget_cfs_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    config_group_init(&amp;gadget_subsys.su_group);</span><br><span class="line">        </span><br><span class="line">    ret = configfs_register_subsystem(&amp;gadget_subsys);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;   </span><br><span class="line">module_init(gadget_cfs_init);</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="创建名为g1的usb复合设备"><a href="#创建名为g1的usb复合设备" class="headerlink" title="创建名为g1的usb复合设备"></a>创建名为g1的usb复合设备</h3><p><code>mkdir usb_gadget/g1</code>创建名为<code>g1(gadget 1)</code>的usb复合设备，执行完毕之后，在<code>g1/</code>目录下会创建很多属性，这些属性在<code>configfs.c</code>文件中创建，执行了<code>gadgets_make()</code>函数，主要做了以下几件事：</p><ul><li><p>创建了包括<code>gadget_root_type</code>指定的属性，每个属性都定义了与之对应的<code>_show()</code>和<code>_store()</code>函数，这样在用户空间就可以对其进行对应的读写。</p><figure class="highlight c"><figcaption><span>drivers/usb/gadget/configfs.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">configfs_attribute</span> *<span class="title">gadget_root_attrs</span>[] = &#123;</span></span><br><span class="line">    &amp;gadget_dev_desc_attr_bDeviceClass,</span><br><span class="line">    &amp;gadget_dev_desc_attr_bDeviceSubClass,</span><br><span class="line">    &amp;gadget_dev_desc_attr_bDeviceProtocol,</span><br><span class="line">    &amp;gadget_dev_desc_attr_bMaxPacketSize0,</span><br><span class="line">    &amp;gadget_dev_desc_attr_idVendor,</span><br><span class="line">    &amp;gadget_dev_desc_attr_idProduct,</span><br><span class="line">    &amp;gadget_dev_desc_attr_bcdDevice,</span><br><span class="line">    &amp;gadget_dev_desc_attr_bcdUSB,</span><br><span class="line">    &amp;gadget_dev_desc_attr_UDC,</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>创建usb复合设备所需的<code>configuration</code>和<code>functions</code>的属性。</p></li><li><p>初始化<code>struct usb_composite_driver composite</code>的相关属性。</p><figure class="highlight c"><figcaption><span>drivers/usb/gadget/configfs.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gi-&gt;composite.bind = configfs_do_nothing;</span><br><span class="line">gi-&gt;composite.unbind = configfs_do_nothing;</span><br><span class="line">gi-&gt;composite.suspend = <span class="literal">NULL</span>;</span><br><span class="line">gi-&gt;composite.resume = <span class="literal">NULL</span>;</span><br><span class="line">gi-&gt;composite.max_speed = USB_SPEED_SUPER;</span><br><span class="line"></span><br><span class="line">mutex_init(&amp;gi-&gt;lock);</span><br><span class="line">INIT_LIST_HEAD(&amp;gi-&gt;string_list);</span><br><span class="line">INIT_LIST_HEAD(&amp;gi-&gt;available_func);</span><br><span class="line"></span><br><span class="line">composite_init_dev(&amp;gi-&gt;cdev);</span><br><span class="line">gi-&gt;cdev.desc.bLength = USB_DT_DEVICE_SIZE;</span><br><span class="line">gi-&gt;cdev.desc.bDescriptorType = USB_DT_DEVICE;</span><br><span class="line">gi-&gt;cdev.desc.bcdDevice = cpu_to_le16(get_default_bcdDevice());</span><br><span class="line"></span><br><span class="line">gi-&gt;composite.gadget_driver = configfs_driver_template;</span><br><span class="line"></span><br><span class="line">gi-&gt;composite.gadget_driver.function = kstrdup(name, GFP_KERNEL);</span><br><span class="line">gi-&gt;composite.name = gi-&gt;composite.gadget_driver.function;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="配置PID和VID"><a href="#配置PID和VID" class="headerlink" title="配置PID和VID"></a>配置PID和VID</h3><p>实际上会调用<code>idVendor</code>的<code>_store()</code>函数来往<code>struct usb_device_descriptor</code>中的<code>idVendor</code>和<code>idProduct</code>写入对应的值。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">static inline struct gadget_info *to_gadget_info(struct config_item *item)</span><br><span class="line">&#123;</span><br><span class="line">     return container_of(to_config_group(item), struct gadget_info, group);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define GI_DEVICE_DESC_SIMPLE_W_u16(_name)  \</span><br><span class="line">static ssize_t gadget_dev_desc_##_name##_store(struct config_item *item, \</span><br><span class="line">        const char *page, size_t len)       \</span><br><span class="line">&#123;                           \</span><br><span class="line">    u16 val;                    \</span><br><span class="line">    int ret;                    \</span><br><span class="line">    ret = kstrtou16(page, 0, &amp;val);         \</span><br><span class="line">    if (ret)                    \</span><br><span class="line">        return ret;             \</span><br><span class="line">    to_gadget_info(item)-&gt;cdev.desc._name = cpu_to_le16p(&amp;val); \</span><br><span class="line">    return len;                 \</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define GI_DEVICE_DESC_SIMPLE_RW(_name, _type)  \</span><br><span class="line">    GI_DEVICE_DESC_SIMPLE_R_##_type(_name)  \</span><br><span class="line">    GI_DEVICE_DESC_SIMPLE_W_##_type(_name)</span><br><span class="line"></span><br><span class="line">GI_DEVICE_DESC_SIMPLE_RW(idVendor, u16);</span><br><span class="line">GI_DEVICE_DESC_SIMPLE_RW(idProduct, u16);</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="创建并配置strings子目录"><a href="#创建并配置strings子目录" class="headerlink" title="创建并配置strings子目录"></a>创建并配置strings子目录</h3><p>配置strings首先必须设置<code>language</code>，这里设置为<code>0x0409</code>表示使用的是<code>en-us</code>语言。</p><hr><h3 id="创建configuration和字符串"><a href="#创建configuration和字符串" class="headerlink" title="创建configuration和字符串"></a>创建configuration和字符串</h3><p>会调用<code>config_desc_make()</code>来填充<code>struct usb_configuration</code>的字段，比如<code>mkdir usb_gadget/g1/configs/c.1</code>，那么会将<code>c</code>写入到<code>struct usb_configuration</code>的<code>label</code>字段，<code>1</code>写入到<code>bConfigurationValue</code>的字段表示有几个<code>configurations</code>。之后调用<code>usb_add_config_only()</code>将设置的<code>configurations</code>与特定的usb复合设备绑定起来。</p><hr><h3 id="创建functions"><a href="#创建functions" class="headerlink" title="创建functions"></a>创建functions</h3><p>一个USB复合设备会有多个功能，每个功能由function来表示，所谓的function就是USB设备支持的功能。当执行<code>mkdir functions/mass_storage.0</code>的时候，会调用<code>function_make()</code>函数，调用<code>usb_get_function_instance()</code>函数传入<code>mass_storage</code>字段，将会从现有的function list中找到与之匹配的function。现有的function list是由<code>drivers/usb/gadget/function/f_xxx.c</code>中进行添加的，这就将<code>f_xxx.c</code>联系起来了。</p><hr><h3 id="将functions和configuration关联起来"><a href="#将functions和configuration关联起来" class="headerlink" title="将functions和configuration关联起来"></a>将functions和configuration关联起来</h3><p>执行<code>ln -s usb_gadget/g1/functions/mass_storage.0 usb_gadget/g1/configs/c.1</code>命令将新添加的<code>mass_storage</code>的<code>functions</code>添加到<code>configuration</code>对应的function list中，表示当前usb复合设备中新增了一个function。这时候调用的是<code>config_usb_cfg_link()</code>函数。至此，<code>functions</code>和<code>configuration</code>关联起来了。接下来要将<code>configuration</code>与特定的UDC设备连接起来。</p><hr><h3 id="绑定到UDC，使能gadget"><a href="#绑定到UDC，使能gadget" class="headerlink" title="绑定到UDC，使能gadget"></a>绑定到UDC，使能gadget</h3><p>执行<code>echo xxx &gt; usb_gadget/g1/UDC</code>命令，就会调用<code>gadget_dev_desc_UDC_store()</code>函数，这里面调用<code>usb composite framework</code>中的<code>usb_gadget_probe_driver()</code>函数将gadget driver与USB Controller Driver绑定，这里的<code>Gadget Driver</code>就是与我们创建的usb复合设备对应的驱动，接下来就会走一系列的<code>bind</code>流程。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在上述的步骤中，我们通过usb gadget configfs做了以下几件事：</p><ul><li>创建了一个usb复合设备，以及创建该设备所需的<code>configuration</code>和<code>functions</code>，并将两者绑定起来；</li><li>创建与usb复合设备相对应的<code>gadget driver</code>；</li><li>将<code>gadget driver</code>与UDC绑定起来，使能usb设备。</li></ul><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://events.static.linuxfound.org/sites/events/files/slides/USB%20Gadget%20Configfs%20API_0.pdf" target="_blank" rel="noopener">Kernel USB Gadget Configfs Interface</a></li><li><a href="https://events.static.linuxfound.org/sites/events/files/slides/LinuxConNA-Make-your-own-USB-gadget-Andrzej.Pietrasiewicz.pdf" target="_blank" rel="noopener">Make your own USB gadget</a></li><li><a href="https://lwn.net/Articles/148973/" target="_blank" rel="noopener">Configfs - an introduction</a></li><li><a href="https://lwn.net/Articles/148987/" target="_blank" rel="noopener">Configfs - the API</a></li><li><a href="https://wiki.tizen.org/USB/Linux_USB_Layers/Configfs_Composite_Gadget/General_configuration" target="_blank" rel="noopener">USB Gadget Configfs General configuration</a></li><li><a href="https://elinux.org/images/6/66/Elc_2014_usb.pdf" target="_blank" rel="noopener">USB and the Real World</a></li><li><a href="https://www.kernel.org/doc/html/v4.13/driver-api/usb/gadget.html" target="_blank" rel="noopener">USB Gadget API for Linux</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux USB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux USB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eMMC Boot Partition Size</title>
      <link href="/7b44b327/"/>
      <url>/7b44b327/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="Boot-Partition"><a href="#Boot-Partition" class="headerlink" title="Boot Partition"></a>Boot Partition</h2><p>eMMC上有2个Boot Partition，最小为128BK，最大为128KB * <code>BOOT_SIZE_MULT</code>，<code>BOOT_SIZE_MULT</code>的值在ECSD寄存器第<code>226</code>个字节定义。Boot Partition和User Area是物理分开的。<br><img src="https://ae01.alicdn.com/kf/H9f62646d7fbd4df0b64e71dcdb73e6cav.png" alt="分区信息"><a id="more"></a></p><hr><h2 id="启动分区选择"><a href="#启动分区选择" class="headerlink" title="启动分区选择"></a>启动分区选择</h2><p>boot配置在EXT_CSD寄存器第<code>179</code>个字节定义，可以设置<code>BOOT_PARTITION_ENABLE</code>位的值来选择从Boot Partition或者User Area分区启动。关于第<code>179</code>字节的定义如下：<br><img src="https://ae01.alicdn.com/kf/Hceef4094370045f1b589655be404e8193.png" alt="179字节定义"></p><hr><h2 id="设置Boot-Partition大小"><a href="#设置Boot-Partition大小" class="headerlink" title="设置Boot Partition大小"></a>设置Boot Partition大小</h2><p>可知，Boot Partition大小范围为：128KB ~ 31.875MB<br><img src="https://ae01.alicdn.com/kf/H981378c3077a49ff8a03b54ccbe398c4B.png" alt="大小"></p><hr><h2 id="mmc工具的使用"><a href="#mmc工具的使用" class="headerlink" title="mmc工具的使用"></a>mmc工具的使用</h2><p><code>mmc-utils</code>工具是用于在linux下用户层访问mmc设备的工具。其详细用法如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">    mmc extcsd read &lt;device&gt;</span><br><span class="line">            Print extcsd data from &lt;device&gt;.</span><br><span class="line">    mmc writeprotect boot get &lt;device&gt;</span><br><span class="line">            Print the boot partitions write protect status for &lt;device&gt;.</span><br><span class="line">    mmc writeprotect boot set &lt;device&gt;</span><br><span class="line">            Set the boot partitions write protect status for &lt;device&gt;.</span><br><span class="line">            This sets the eMMC boot partitions to be write-protected until</span><br><span class="line">            the next boot.</span><br><span class="line">    mmc writeprotect user set &lt;type&gt;&lt;start block&gt;&lt;blocks&gt;&lt;device&gt;</span><br><span class="line">            Set the write protect configuration for the specified region</span><br><span class="line">            of the user area for &lt;device&gt;.</span><br><span class="line">            &lt;type&gt; must be &quot;none|temp|pwron&quot;.</span><br><span class="line">                &quot;none&quot;  - Clear temporary write protection.</span><br><span class="line">                &quot;temp&quot;  - Set temporary write protection.</span><br><span class="line">                &quot;pwron&quot; - Set write protection until the next poweron.</span><br><span class="line">            &lt;start block&gt; specifies the first block of the protected area.</span><br><span class="line">            &lt;blocks&gt; specifies the size of the protected area in blocks.</span><br><span class="line">            NOTE! The area must start and end on Write Protect Group</span><br><span class="line">            boundries, Use the &quot;writeprotect user get&quot; command to get the</span><br><span class="line">            Write Protect Group size.</span><br><span class="line">    mmc writeprotect user get &lt;device&gt;</span><br><span class="line">            Print the user areas write protect configuration for &lt;device&gt;.</span><br><span class="line">    mmc disable 512B emulation &lt;device&gt;</span><br><span class="line">            Set the eMMC data sector size to 4KB by disabling emulation on</span><br><span class="line">            &lt;device&gt;.</span><br><span class="line">    mmc gp create &lt;-y|-n|-c&gt; &lt;length KiB&gt; &lt;partition&gt; &lt;enh_attr&gt; &lt;ext_attr&gt; &lt;device&gt;</span><br><span class="line">            Create general purpose partition for the &lt;device&gt;.</span><br><span class="line">            Dry-run only unless -y or -c is passed.</span><br><span class="line">            Use -c if more partitioning settings are still to come.</span><br><span class="line">            NOTE!  This is a one-time programmable (unreversible) change.</span><br><span class="line">            To set enhanced attribute to general partition being created set</span><br><span class="line">             &lt;enh_attr&gt; to 1 else set it to 0.</span><br><span class="line">            To set extended attribute to general partition</span><br><span class="line">             set &lt;ext_attr&gt; to 1,2 else set it to 0</span><br><span class="line">    mmc enh_area set &lt;-y|-n|-c&gt; &lt;start KiB&gt; &lt;length KiB&gt; &lt;device&gt;</span><br><span class="line">            Enable the enhanced user area for the &lt;device&gt;.</span><br><span class="line">            Dry-run only unless -y or -c is passed.</span><br><span class="line">            Use -c if more partitioning settings are still to come.</span><br><span class="line">            NOTE!  This is a one-time programmable (unreversible) change.</span><br><span class="line">    mmc write_reliability set &lt;-y|-n|-c&gt; &lt;partition&gt; &lt;device&gt;</span><br><span class="line">            Enable write reliability per partition for the &lt;device&gt;.</span><br><span class="line">            Dry-run only unless -y or -c is passed.</span><br><span class="line">            Use -c if more partitioning settings are still to come.</span><br><span class="line">            NOTE!  This is a one-time programmable (unreversible) change.</span><br><span class="line">    mmc status get &lt;device&gt;</span><br><span class="line">            Print the response to STATUS_SEND (CMD13).</span><br><span class="line">    mmc bootpart enable &lt;boot_partition&gt; &lt;send_ack&gt; &lt;device&gt;</span><br><span class="line">            Enable the boot partition for the &lt;device&gt;.</span><br><span class="line">            Disable the boot partition for the &lt;device&gt; if &lt;boot_partition&gt; is set to 0.</span><br><span class="line">            To receive acknowledgment of boot from the card set &lt;send_ack&gt;</span><br><span class="line">            to 1, else set it to 0.</span><br><span class="line">    mmc bootbus set &lt;boot_mode&gt; &lt;reset_boot_bus_conditions&gt; &lt;boot_bus_width&gt; &lt;device&gt;</span><br><span class="line">            Set Boot Bus Conditions.</span><br><span class="line">            &lt;boot_mode&gt; must be &quot;single_backward|single_hs|dual&quot;</span><br><span class="line">            &lt;reset_boot_bus_conditions&gt; must be &quot;x1|retain&quot;</span><br><span class="line">            &lt;boot_bus_width&gt; must be &quot;x1|x4|x8&quot;</span><br><span class="line">    mmc bkops enable &lt;device&gt;</span><br><span class="line">            Enable the eMMC BKOPS feature on &lt;device&gt;.</span><br><span class="line">            NOTE!  This is a one-time programmable (unreversible) change.</span><br><span class="line">    mmc hwreset enable &lt;device&gt;</span><br><span class="line">            Permanently enable the eMMC H/W Reset feature on &lt;device&gt;.</span><br><span class="line">            NOTE!  This is a one-time programmable (unreversible) change.</span><br><span class="line">    mmc hwreset disable &lt;device&gt;</span><br><span class="line">            Permanently disable the eMMC H/W Reset feature on &lt;device&gt;.</span><br><span class="line">            NOTE!  This is a one-time programmable (unreversible) change.</span><br><span class="line">    mmc sanitize &lt;device&gt;</span><br><span class="line">            Send Sanitize command to the &lt;device&gt;.</span><br><span class="line">            This will delete the unmapped memory region of the device.</span><br><span class="line">    mmc rpmb write-key &lt;rpmb device&gt; &lt;key file&gt;</span><br><span class="line">            Program authentication key which is 32 bytes length and stored</span><br><span class="line">            in the specified file. Also you can specify &apos;-&apos; instead of</span><br><span class="line">            key file path to read the key from stdin.</span><br><span class="line">            NOTE!  This is a one-time programmable (unreversible) change.</span><br><span class="line">            Example:</span><br><span class="line">              $ echo -n AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHH | \</span><br><span class="line">                mmc rpmb write-key /dev/mmcblk0rpmb -</span><br><span class="line">    mmc rpmb read-counter &lt;rpmb device&gt;</span><br><span class="line">            Counter value for the &lt;rpmb device&gt; will be read to stdout.</span><br><span class="line">    mmc rpmb read-block &lt;rpmb device&gt; &lt;address&gt; &lt;blocks count&gt; &lt;output file&gt; [key file]</span><br><span class="line">            Blocks of 256 bytes will be read from &lt;rpmb device&gt; to output</span><br><span class="line">            file or stdout if &apos;-&apos; is specified. If key is specified - read</span><br><span class="line">            data will be verified. Instead of regular path you can specify</span><br><span class="line">            &apos;-&apos; to read key from stdin.</span><br><span class="line">            Example:</span><br><span class="line">              $ echo -n AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHH | \</span><br><span class="line">                mmc rpmb read-block /dev/mmcblk0rpmb 0x02 2 /tmp/block -</span><br><span class="line">            or read two blocks without verification</span><br><span class="line">              $ mmc rpmb read-block /dev/mmcblk0rpmb 0x02 2 /tmp/block</span><br><span class="line">    mmc rpmb write-block &lt;rpmb device&gt; &lt;address&gt; &lt;256 byte data file&gt; &lt;key file&gt;</span><br><span class="line">            Block of 256 bytes will be written from data file to</span><br><span class="line">            &lt;rpmb device&gt;. Also you can specify &apos;-&apos; instead of key</span><br><span class="line">            file path or data file to read the data from stdin.</span><br><span class="line">            Example:</span><br><span class="line">              $ (awk &apos;BEGIN &#123;while (c++&lt;256) printf &quot;a&quot;&#125;&apos; | \</span><br><span class="line">                echo -n AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHH) | \</span><br><span class="line">                mmc rpmb write-block /dev/mmcblk0rpmb 0x02 - -</span><br><span class="line">    mmc cache enable &lt;device&gt;</span><br><span class="line">            Enable the eMMC cache feature on &lt;device&gt;.</span><br><span class="line">            NOTE! The cache is an optional feature on devices &gt;= eMMC4.5.</span><br><span class="line">    mmc cache disable &lt;device&gt;</span><br><span class="line">            Disable the eMMC cache feature on &lt;device&gt;.</span><br><span class="line">            NOTE! The cache is an optional feature on devices &gt;= eMMC4.5.</span><br><span class="line">    mmc csd read &lt;device path&gt;</span><br><span class="line">            Print CSD data from &lt;device path&gt;.</span><br><span class="line">            The device path should specify the csd file directory.</span><br><span class="line">    mmc cid read &lt;device path&gt;</span><br><span class="line">            Print CID data from &lt;device path&gt;.</span><br><span class="line">            The device path should specify the cid file directory.</span><br><span class="line">    mmc scr read &lt;device path&gt;</span><br><span class="line">            Print SCR data from &lt;device path&gt;.</span><br><span class="line">            The device path should specify the scr file directory.</span><br><span class="line">    mmc ffu &lt;image name&gt; &lt;device&gt;</span><br><span class="line">            Run Field Firmware Update with &lt;image name&gt; on &lt;device&gt;.</span><br><span class="line"></span><br><span class="line">    mmc cmd42 &lt;password&gt; &lt;parameter&gt; &lt;device&gt;</span><br><span class="line">            Usage: mmc cmd42 &lt;password&gt; &lt;s|c|l|u|e&gt; &lt;device&gt;</span><br><span class="line">            s       set password</span><br><span class="line">            c       clear password</span><br><span class="line">            l       lock</span><br><span class="line">            sl      set password and lock</span><br><span class="line">            u       unlock</span><br><span class="line">            e       force erase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    mmc help|--help|-h</span><br><span class="line">            Show the help.</span><br><span class="line"></span><br><span class="line">    mmc &lt;cmd&gt; --help</span><br><span class="line">            Show detailed help for a command or subset of commands.</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="mmc读取ECSD寄存器的值"><a href="#mmc读取ECSD寄存器的值" class="headerlink" title="mmc读取ECSD寄存器的值"></a>mmc读取ECSD寄存器的值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line">=============================================</span><br><span class="line">  Extended CSD rev 1.8 (MMC 5.1)</span><br><span class="line">=============================================</span><br><span class="line"></span><br><span class="line">Card Supported Command sets [S_CMD_SET: 0x01]</span><br><span class="line">HPI Features [HPI_FEATURE: 0x01]: implementation based on CMD13</span><br><span class="line">Background operations support [BKOPS_SUPPORT: 0x01]</span><br><span class="line">Max Packet Read Cmd [MAX_PACKED_READS: 0x00]</span><br><span class="line">Max Packet Write Cmd [MAX_PACKED_WRITES: 0x00]</span><br><span class="line">Data TAG support [DATA_TAG_SUPPORT: 0x01]</span><br><span class="line">Data TAG Unit Size [TAG_UNIT_SIZE: 0x03]</span><br><span class="line">Tag Resources Size [TAG_RES_SIZE: 0x00]</span><br><span class="line">Context Management Capabilities [CONTEXT_CAPABILITIES: 0x05]</span><br><span class="line">Large Unit Size [LARGE_UNIT_SIZE_M1: 0x03]</span><br><span class="line">Extended partition attribute support [EXT_SUPPORT: 0x03]</span><br><span class="line">Generic CMD6 Timer [GENERIC_CMD6_TIME: 0x0a]</span><br><span class="line">Power off notification [POWER_OFF_LONG_TIME: 0x32]</span><br><span class="line">Cache Size [CACHE_SIZE] is 512 KiB</span><br><span class="line">Background operations status [BKOPS_STATUS: 0x00]</span><br><span class="line">1st Initialisation Time after programmed sector [INI_TIMEOUT_AP: 0x0a]</span><br><span class="line">Power class for 52MHz, DDR at 3.6V [PWR_CL_DDR_52_360: 0x00]</span><br><span class="line">Power class for 52MHz, DDR at 1.95V [PWR_CL_DDR_52_195: 0x00]</span><br><span class="line">Power class for 200MHz at 3.6V [PWR_CL_200_360: 0x00]</span><br><span class="line">Power class for 200MHz, at 1.95V [PWR_CL_200_195: 0x00]</span><br><span class="line">Minimum Performance for 8bit at 52MHz in DDR mode:</span><br><span class="line">[MIN_PERF_DDR_W_8_52: 0x00]</span><br><span class="line">[MIN_PERF_DDR_R_8_52: 0x00]</span><br><span class="line">TRIM Multiplier [TRIM_MULT: 0x01]</span><br><span class="line">Secure Feature support [SEC_FEATURE_SUPPORT: 0x51]</span><br><span class="line">Boot Information [BOOT_INFO: 0x07]</span><br><span class="line">Device supports alternative boot method</span><br><span class="line">Device supports dual data rate during boot</span><br><span class="line">Device supports high speed timing during boot</span><br><span class="line">Boot partition size [BOOT_SIZE_MULTI: 0xfc]</span><br><span class="line">Access size [ACC_SIZE: 0x00]</span><br><span class="line">High-capacity erase unit size [HC_ERASE_GRP_SIZE: 0x01]</span><br><span class="line">i.e. 512 KiB</span><br><span class="line">High-capacity erase timeout [ERASE_TIMEOUT_MULT: 0x01]</span><br><span class="line">Reliable write sector count [REL_WR_SEC_C: 0x01]</span><br><span class="line">High-capacity W protect group size [HC_WP_GRP_SIZE: 0x10]</span><br><span class="line">i.e. 8192 KiB</span><br><span class="line">Sleep current (VCC) [S_C_VCC: 0x00]</span><br><span class="line">Sleep current (VCCQ) [S_C_VCCQ: 0x00]</span><br><span class="line">Sleep/awake timeout [S_A_TIMEOUT: 0x14]</span><br><span class="line">Sector Count [SEC_COUNT: 0x00e90000]</span><br><span class="line">Device is block-addressed</span><br><span class="line">Minimum Write Performance for 8bit:</span><br><span class="line">[MIN_PERF_W_8_52: 0x00]</span><br><span class="line">[MIN_PERF_R_8_52: 0x00]</span><br><span class="line">[MIN_PERF_W_8_26_4_52: 0x00]</span><br><span class="line">[MIN_PERF_R_8_26_4_52: 0x00]</span><br><span class="line">Minimum Write Performance for 4bit:</span><br><span class="line">[MIN_PERF_W_4_26: 0x00]</span><br><span class="line">[MIN_PERF_R_4_26: 0x00]</span><br><span class="line">Power classes registers:</span><br><span class="line">[PWR_CL_26_360: 0x00]</span><br><span class="line">[PWR_CL_52_360: 0x00]</span><br><span class="line">[PWR_CL_26_195: 0x00]</span><br><span class="line">[PWR_CL_52_195: 0x00]</span><br><span class="line">Partition switching timing [PARTITION_SWITCH_TIME: 0x01]</span><br><span class="line">Out-of-interrupt busy timing [OUT_OF_INTERRUPT_TIME: 0x0f]</span><br><span class="line">I/O Driver Strength [DRIVER_STRENGTH: 0x1f]</span><br><span class="line">Card Type [CARD_TYPE: 0x57]</span><br><span class="line">HS200 Single Data Rate eMMC @200MHz 1.8VI/O</span><br><span class="line">HS Dual Data Rate eMMC @52MHz 1.8V or 3VI/O</span><br><span class="line">HS eMMC @52MHz - at rated device voltage(s)</span><br><span class="line">HS eMMC @26MHz - at rated device voltage(s)</span><br><span class="line">CSD structure version [CSD_STRUCTURE: 0x02]</span><br><span class="line">Command set [CMD_SET: 0x00]</span><br><span class="line">Command set revision [CMD_SET_REV: 0x00]</span><br><span class="line">Power class [POWER_CLASS: 0x00]</span><br><span class="line">High-speed interface timing [HS_TIMING: 0x02]</span><br><span class="line">Erased memory content [ERASED_MEM_CONT: 0x00]</span><br><span class="line">Boot configuration bytes [PARTITION_CONFIG: 0x78]</span><br><span class="line">User Area Enabled for boot</span><br><span class="line">No access to boot partition</span><br><span class="line">Boot config protection [BOOT_CONFIG_PROT: 0x00]</span><br><span class="line">Boot bus Conditions [BOOT_BUS_CONDITIONS: 0x00]</span><br><span class="line">High-density erase group definition [ERASE_GROUP_DEF: 0x01]</span><br><span class="line">Boot write protection status registers [BOOT_WP_STATUS]: 0x00</span><br><span class="line">Boot Area Write protection [BOOT_WP]: 0x00</span><br><span class="line">Power ro locking: possible</span><br><span class="line">Permanent ro locking: possible</span><br><span class="line">ro lock status: not locked</span><br><span class="line">User area write protection register [USER_WP]: 0x00</span><br><span class="line">FW configuration [FW_CONFIG]: 0x00</span><br><span class="line">RPMB Size [RPMB_SIZE_MULT]: 0x20</span><br><span class="line">Write reliability setting register [WR_REL_SET]: 0x1f</span><br><span class="line">user area: the device protects existing data if a power failure occurs during a write operation</span><br><span class="line">partition 1: the device protects existing data if a power failure occurs during a write operation</span><br><span class="line">partition 2: the device protects existing data if a power failure occurs during a write operation</span><br><span class="line">partition 3: the device protects existing data if a power failure occurs during a write operation</span><br><span class="line">partition 4: the device protects existing data if a power failure occurs during a write operation</span><br><span class="line">Write reliability parameter register [WR_REL_PARAM]: 0x15</span><br><span class="line">Device supports writing EXT_CSD_WR_REL_SET</span><br><span class="line">Device supports the enhanced def. of reliable write</span><br><span class="line">Enable background operations handshake [BKOPS_EN]: 0x00</span><br><span class="line">H/W reset function [RST_N_FUNCTION]: 0x00</span><br><span class="line">HPI management [HPI_MGMT]: 0x01</span><br><span class="line">Partitioning Support [PARTITIONING_SUPPORT]: 0x07</span><br><span class="line">Device support partitioning feature</span><br><span class="line">Device can have enhanced tech.</span><br><span class="line">Max Enhanced Area Size [MAX_ENH_SIZE_MULT]: 0x0001c9</span><br><span class="line">i.e. 3743744 KiB</span><br><span class="line">Partitions attribute [PARTITIONS_ATTRIBUTE]: 0x00</span><br><span class="line">Partitioning Setting [PARTITION_SETTING_COMPLETED]: 0x00</span><br><span class="line">Device partition setting NOT complete</span><br><span class="line">General Purpose Partition Size</span><br><span class="line">[GP_SIZE_MULT_4]: 0x000000</span><br><span class="line">[GP_SIZE_MULT_3]: 0x000000</span><br><span class="line">[GP_SIZE_MULT_2]: 0x000000</span><br><span class="line">[GP_SIZE_MULT_1]: 0x000000</span><br><span class="line">Enhanced User Data Area Size [ENH_SIZE_MULT]: 0x000000</span><br><span class="line">i.e. 0 KiB</span><br><span class="line">Enhanced User Data Start Address [ENH_START_ADDR]: 0x00000000</span><br><span class="line">i.e. 0 bytes offset</span><br><span class="line">Bad Block Management mode [SEC_BAD_BLK_MGMNT]: 0x00</span><br><span class="line">Periodic Wake-up [PERIODIC_WAKEUP]: 0x00</span><br><span class="line">Program CID/CSD in DDR mode support [PROGRAM_CID_CSD_DDR_SUPPORT]: 0x01</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[127]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[126]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[125]]: 0xfc</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[124]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[123]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[122]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[121]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[120]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[119]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[118]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[117]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[116]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[115]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[114]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[113]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[112]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[111]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[110]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[109]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[108]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[107]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[106]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[105]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[104]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[103]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[102]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[101]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[100]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[99]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[98]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[97]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[96]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[95]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[94]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[93]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[92]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[91]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[90]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[89]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[88]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[87]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[86]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[85]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[84]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[83]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[82]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[81]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[80]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[79]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[78]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[77]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[76]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[75]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[74]]: 0x01</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[73]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[72]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[71]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[70]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[69]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[68]]: 0x01</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[67]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[66]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[65]]: 0x00</span><br><span class="line">Vendor Specific Fields [VENDOR_SPECIFIC_FIELD[64]]: 0x00</span><br><span class="line">Native sector size [NATIVE_SECTOR_SIZE]: 0x00</span><br><span class="line">Sector size emulation [USE_NATIVE_SECTOR]: 0x00</span><br><span class="line">Sector size [DATA_SECTOR_SIZE]: 0x00</span><br><span class="line">1st initialization after disabling sector size emulation [INI_TIMEOUT_EMU]: 0x00</span><br><span class="line">Class 6 commands control [CLASS_6_CTRL]: 0x00</span><br><span class="line">Number of addressed group to be Released[DYNCAP_NEEDED]: 0x00</span><br><span class="line">Exception events control [EXCEPTION_EVENTS_CTRL]: 0x0000</span><br><span class="line">Exception events status[EXCEPTION_EVENTS_STATUS]: 0x0000</span><br><span class="line">Extended Partitions Attribute [EXT_PARTITIONS_ATTRIBUTE]: 0x0000</span><br><span class="line">Context configuration [CONTEXT_CONF[51]]: 0x00</span><br><span class="line">Context configuration [CONTEXT_CONF[50]]: 0x00</span><br><span class="line">Context configuration [CONTEXT_CONF[49]]: 0x00</span><br><span class="line">Context configuration [CONTEXT_CONF[48]]: 0x00</span><br><span class="line">Context configuration [CONTEXT_CONF[47]]: 0x00</span><br><span class="line">Context configuration [CONTEXT_CONF[46]]: 0x00</span><br><span class="line">Context configuration [CONTEXT_CONF[45]]: 0x00</span><br><span class="line">Context configuration [CONTEXT_CONF[44]]: 0x00</span><br><span class="line">Context configuration [CONTEXT_CONF[43]]: 0x00</span><br><span class="line">Context configuration [CONTEXT_CONF[42]]: 0x00</span><br><span class="line">Context configuration [CONTEXT_CONF[41]]: 0x00</span><br><span class="line">Context configuration [CONTEXT_CONF[40]]: 0x00</span><br><span class="line">Context configuration [CONTEXT_CONF[39]]: 0x00</span><br><span class="line">Context configuration [CONTEXT_CONF[38]]: 0x00</span><br><span class="line">Context configuration [CONTEXT_CONF[37]]: 0x00</span><br><span class="line">Packed command status [PACKED_COMMAND_STATUS]: 0x00</span><br><span class="line">Packed command failure index [PACKED_FAILURE_INDEX]: 0x00</span><br><span class="line">Power Off Notification [POWER_OFF_NOTIFICATION]: 0x01</span><br><span class="line">Control to turn the Cache ON/OFF [CACHE_CTRL]: 0x01</span><br><span class="line">eMMC Firmware Version: F9QN01K4</span><br><span class="line">eMMC Life Time Estimation A [EXT_CSD_DEVICE_LIFE_TIME_EST_TYP_A]: 0x01</span><br><span class="line">eMMC Life Time Estimation B [EXT_CSD_DEVICE_LIFE_TIME_EST_TYP_B]: 0x01</span><br><span class="line">eMMC Pre EOL information [EXT_CSD_PRE_EOL_INFO]: 0x01</span><br><span class="line">Command Queue Support [CMDQ_SUPPORT]: 0x01</span><br><span class="line">Command Queue Depth [CMDQ_DEPTH]: 32</span><br><span class="line">Command Enabled [CMDQ_MODE_EN]: 0x00</span><br></pre></td></tr></table></figure><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div class="note success"><p><a href="https://www.jedec.org/sites/default/files/docs/JESD84-B51.pdf" target="_blank" rel="noopener">JESD84-B51.pdf</a><br><a href="https://manpages.debian.org/unstable/mmc-utils/mmc.1.en.html" target="_blank" rel="noopener">man mmc</a><br><a href="https://git.kernel.org/pub/scm/linux/kernel/git/cjb/mmc-utils.git/" target="_blank" rel="noopener">mmc source</a></p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> eMMC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eMMC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>usb gadget configfs 验证</title>
      <link href="/a64c6a27/"/>
      <url>/a64c6a27/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>按照上一篇文章对<a href="http://wowothink.com/440dc3d9">gadget_configfs.txt</a>的翻译，以imx8qxp mek的板子做为验证，配置为mass storage进行验证。<a id="more"></a></p><hr><h2 id="内核打开对应的宏"><a href="#内核打开对应的宏" class="headerlink" title="内核打开对应的宏"></a>内核打开对应的宏</h2><p>1、必须打开<code>CONFIG_CONFIGFS_FS</code>和<code>CONFIG_USB_LIBCOMPOSITE</code>的宏，前者为用户空间提供访问配置内核驱动的configfs文件系统，后者提供usb gadget composite框架；<br>2、必须打开UDC(USB Device Controller)的配置，这个是配置硬件控制器。我这里使用<code>CONFIG_USB_CHIPIDEA</code>和<code>CONFIG_USB_CHIPIDEA_UDC</code>；<br>3、如果使用mass storage功能，需要打开<code>USB_CONFIGFS_MASS_STORAGE</code>和<code>USB_F_MASS_STORAGE</code>，对应于<code>usb_f_mass_storage.ko</code>驱动。</p><hr><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><ul><li>挂载configfs：<code>mount -t configfs none /config/</code>，在这之后，<code>/configfs/</code>目录下就会生成<code>usb_gadget/</code>目录；</li><li><p>创建gadget：<code>mkdir usb_gadget/g1</code>，创建<code>g1/</code>目录之后，该目录下会生成很多配置目录，这里的<code>g1</code>表示gadget 1，一个UDC对应一个gadget，如果你的SOC上有多个gadget，可以创建多个<code>gx</code>目录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># ll usb_gadget/g1/</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 UDC</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 bDeviceClass</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 bDeviceProtocol</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 bDeviceSubClass</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 bMaxPacketSize0</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 bcdDevice</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 bcdUSB</span><br><span class="line">drwxr-xr-x 2 root root    0 1999-11-30 00:02 configs</span><br><span class="line">drwxr-xr-x 2 root root    0 1999-11-30 00:02 functions</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 idProduct</span><br><span class="line">-rw-r--r-- 1 root root 4096 1999-11-30 00:02 idVendor</span><br><span class="line">drwxr-xr-x 2 root root    0 1999-11-30 00:02 os_desc</span><br><span class="line">drwxr-xr-x 2 root root    0 1999-11-30 00:02 strings</span><br></pre></td></tr></table></figure></li><li><p>配置PID和VID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># echo 0x18d1 &gt; usb_gadget/g1/idVendor</span><br><span class="line"># echo 0x4ee2 &gt; usb_gadget/g1/idProduct</span><br></pre></td></tr></table></figure></li><li><p>创建并配置string字目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># mkdir usb_gadget/g1/strings/0x409</span><br><span class="line"># echo &quot;123456789&quot; &gt; usb_gadget/g1/strings/0x409/serialnumber</span><br><span class="line"># echo &quot;xxx&quot; &gt; usb_gadget/g1/strings/0x409/manufacturer</span><br><span class="line"># echo &quot;xxx_product&quot; &gt; usb_gadget/g1/strings/0x409/product</span><br></pre></td></tr></table></figure></li><li><p>创建configuration和字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mkdir usb_gadget/g1/configs/c.1</span><br><span class="line"># mkdir usb_gadget/g1/configs/c.1/strings/0x409</span><br><span class="line"># echo &quot;mass_storage&quot; &gt; usb_gadget/g1/configs/c.1/strings/0x409/configuration</span><br></pre></td></tr></table></figure></li><li><p>创建functions</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mkdir usb_gadget/g1/functions/mass_storage.0</span><br><span class="line">[  108.582976]  [1:          mkdir: 1976] Mass Storage Function, version: 2009/09/11</span><br><span class="line">[  108.592679]  [1:          mkdir: 1976] LUN: removable file: (no medium)</span><br></pre></td></tr></table></figure></li></ul><p>这里的<code>mass_storage</code>的名字不能随便起，需要根据insmod的function驱动<code>usb_f_mass_storage.ko</code>来决定。否则会出现如下错误：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1|@android:/config # mkdir usb_gadget/g1/functions/msg.0</span><br><span class="line">mkdir: &apos;usb_gadget/g1/functions/msg.0&apos;: No such file or directory</span><br></pre></td></tr></table></figure><p></p><ul><li>将functions和configuration关联起来<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ln -s usb_gadget/g1/functions/mass_storage.0 usb_gadget/g1/configs/c.1</span><br></pre></td></tr></table></figure></li></ul><p>上述配置之后，得到的结果为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">127|@android:/config # find .</span><br><span class="line">.</span><br><span class="line">./usb_gadget</span><br><span class="line">./usb_gadget/g1</span><br><span class="line">./usb_gadget/g1/os_desc</span><br><span class="line">./usb_gadget/g1/os_desc/qw_sign</span><br><span class="line">./usb_gadget/g1/os_desc/b_vendor_code</span><br><span class="line">./usb_gadget/g1/os_desc/use</span><br><span class="line">./usb_gadget/g1/strings</span><br><span class="line">./usb_gadget/g1/strings/0x409</span><br><span class="line">./usb_gadget/g1/strings/0x409/serialnumber</span><br><span class="line">./usb_gadget/g1/strings/0x409/product</span><br><span class="line">./usb_gadget/g1/strings/0x409/manufacturer</span><br><span class="line">./usb_gadget/g1/configs</span><br><span class="line">./usb_gadget/g1/configs/c.1</span><br><span class="line">./usb_gadget/g1/configs/c.1/mass_storage.0</span><br><span class="line">./usb_gadget/g1/configs/c.1/strings</span><br><span class="line">./usb_gadget/g1/configs/c.1/strings/0x409</span><br><span class="line">./usb_gadget/g1/configs/c.1/strings/0x409/configuration</span><br><span class="line">./usb_gadget/g1/configs/c.1/bmAttributes</span><br><span class="line">./usb_gadget/g1/configs/c.1/MaxPower</span><br><span class="line">./usb_gadget/g1/functions</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/lun.0</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/lun.0/inquiry_string</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/lun.0/nofua</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/lun.0/cdrom</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/lun.0/removable</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/lun.0/ro</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/lun.0/file</span><br><span class="line">./usb_gadget/g1/functions/mass_storage.0/stall</span><br><span class="line">./usb_gadget/g1/UDC</span><br><span class="line">./usb_gadget/g1/bcdUSB</span><br><span class="line">./usb_gadget/g1/bcdDevice</span><br><span class="line">./usb_gadget/g1/idProduct</span><br><span class="line">./usb_gadget/g1/idVendor</span><br><span class="line">./usb_gadget/g1/bMaxPacketSize0</span><br><span class="line">./usb_gadget/g1/bDeviceProtocol</span><br><span class="line">./usb_gadget/g1/bDeviceSubClass</span><br><span class="line">./usb_gadget/g1/bDeviceClass</span><br></pre></td></tr></table></figure><p></p><ul><li><p>查看当前的UDC<br>可见当前的板子上有两个UDC，<code>ci_hdrc.0</code>和<code>gadget-cdns3</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">130|@android:/config # ll /sys/class/udc/</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 0 1999-11-30 00:09 ci_hdrc.0 -&gt; ../../devices/platform/5b0d0000.usb/ci_hdrc.0/udc/ci_hdrc.0</span><br><span class="line">lrwxrwxrwx 1 root root 0 1999-11-30 00:09 gadget-cdns3 -&gt; ../../devices/platform/5b110000.usb3/gadget-cdns3/udc/gadget-cdns3</span><br></pre></td></tr></table></figure></li><li><p>绑定到UDC，使能gadget<br>将UDC切换至device模式，这里使用OTG ID pin来实现切换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># echo ci_hdrc.0 &gt; usb_gadget/g1/UDC</span><br><span class="line"># echo 1 &gt; /sys/class/gpio/gpio358/value</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h2><p>将配置好的开发板与ubuntu连接，从ubuntu上的串口可以看到如下信息，表示已将开发板配置成一个mass storage的设备了。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[95705.390004] usb 1-11: USB disconnect, device number 28</span><br><span class="line">[95708.606717] usb 1-11: new high-speed USB device number 29 using xhci_hcd</span><br><span class="line">[95708.756934] usb 1-11: New USB device found, idVendor=18d1, idProduct=4ee2</span><br><span class="line">[95708.756941] usb 1-11: New USB device strings: Mfr=1, Product=2, SerialNumber=3</span><br><span class="line">[95708.756946] usb 1-11: Product: xxx_product</span><br><span class="line">[95708.756950] usb 1-11: Manufacturer: xxx</span><br><span class="line">[95708.756953] usb 1-11: SerialNumber: 123456789</span><br><span class="line">[95708.766595] usb-storage 1-11:1.0: USB Mass Storage device detected</span><br><span class="line">[95708.766798] scsi host6: usb-storage 1-11:1.0</span><br></pre></td></tr></table></figure><p></p><p>当然，上述的结果是ubuntu只识别到一个mass storage的设备，但是没有识别看分区表，所以没有看到相应的磁盘信息。想要看到磁盘信息，可以更进一步的设置mass_storage的<code>backen file</code>属性。</p><hr><h2 id="定制分区"><a href="#定制分区" class="headerlink" title="定制分区"></a>定制分区</h2><p>在上面<code>创建functions</code>步骤之后，执行以下的命令，为mass storage创建2个分区，分区的backing file是开发板上的<code>/dev/block/mmcblk0p1</code>和<code>/dev/block/mmcblk0p2</code>，也就是开发板上的system分区和data分区。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir usb_gadget/g1/functions/mass_storage.0/partition.2</span><br><span class="line">mkdir usb_gadget/g1/functions/mass_storage.0/lun.1</span><br><span class="line">echo /dev/block/mmcblk0p1 &gt; usb_gadget/g1/functions/mass_storage.0/lun.0/file</span><br><span class="line">echo /dev/block/mmcblk0p2 &gt; usb_gadget/g1/functions/mass_storage.0/lun.1/file</span><br></pre></td></tr></table></figure><p></p><p>所有配置完成之后，插入到ubuntu后，可以看到能识别去新的分区信息：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">130 victor@victor-HP:/mnt⟫ sudo dmesg -c</span><br><span class="line">[40873.009026] EXT4-fs (sdc): mounted filesystem with ordered data mode. Opts: (null)</span><br><span class="line">[41094.127318] usb 1-11: USB disconnect, device number 23</span><br><span class="line">[41094.128072] print_req_error: I/O error, dev sdc, sector 0</span><br><span class="line">[41094.131049] sd 6:0:0:0: [sdc] Synchronizing SCSI cache</span><br><span class="line">[41094.131118] sd 6:0:0:0: [sdc] Synchronize Cache(10) failed: Result: hostbyte=DID_NO_CONNECT driverbyte=DRIVER_OK</span><br><span class="line">[41466.480635] usb 1-11: new high-speed USB device number 24 using xhci_hcd</span><br><span class="line">[41466.630904] usb 1-11: New USB device found, idVendor=18d1, idProduct=4ee2</span><br><span class="line">[41466.630911] usb 1-11: New USB device strings: Mfr=1, Product=2, SerialNumber=3</span><br><span class="line">[41466.630915] usb 1-11: Product: xxx_product</span><br><span class="line">[41466.630919] usb 1-11: Manufacturer: xxx</span><br><span class="line">[41466.630923] usb 1-11: SerialNumber: 123456789</span><br><span class="line">[41466.640789] usb-storage 1-11:1.0: USB Mass Storage device detected</span><br><span class="line">[41466.641062] scsi host7: usb-storage 1-11:1.0</span><br><span class="line">[41467.645699] scsi 7:0:0:0: Direct-Access     Linux    File-Stor Gadget 0414 PQ: 0 ANSI: 2</span><br><span class="line">[41467.646291] scsi 7:0:0:1: Direct-Access     Linux    File-Stor Gadget 0414 PQ: 0 ANSI: 2</span><br><span class="line">[41467.646826] scsi 7:0:0:2: Direct-Access     Linux    File-Stor Gadget 0414 PQ: 0 ANSI: 2</span><br><span class="line">[41467.647387] sd 7:0:0:0: Attached scsi generic sg2 type 0</span><br><span class="line">[41467.647764] sd 7:0:0:1: Attached scsi generic sg3 type 0</span><br><span class="line">[41467.648144] sd 7:0:0:0: Power-on or device reset occurred</span><br><span class="line">[41467.648173] sd 7:0:0:2: Attached scsi generic sg4 type 0</span><br><span class="line">[41467.649026] sd 7:0:0:1: Power-on or device reset occurred</span><br><span class="line">[41467.649555] sd 7:0:0:2: Power-on or device reset occurred</span><br><span class="line">[41467.650006] sd 7:0:0:0: [sdd] 1048576 512-byte logical blocks: (537 MB/512 MiB)</span><br><span class="line">[41467.650766] sd 7:0:0:1: [sde] 524288 512-byte logical blocks: (268 MB/256 MiB)</span><br><span class="line">[41467.651726] sd 7:0:0:0: [sdd] Write Protect is off</span><br><span class="line">[41467.651731] sd 7:0:0:0: [sdd] Mode Sense: 0f 00 00 00</span><br><span class="line">[41467.651929] sd 7:0:0:1: [sde] Write Protect is off</span><br><span class="line">[41467.651933] sd 7:0:0:1: [sde] Mode Sense: 0f 00 00 00</span><br><span class="line">[41467.652327] sd 7:0:0:2: [sdf] Attached SCSI removable disk</span><br><span class="line">[41467.652581] sd 7:0:0:0: [sdd] Write cache: enabled, read cache: enabled, doesn&apos;t support DPO or FUA</span><br><span class="line">[41467.652837] sd 7:0:0:1: [sde] Write cache: enabled, read cache: enabled, doesn&apos;t support DPO or FUA</span><br><span class="line">[41467.673305] sd 7:0:0:1: [sde] Attached SCSI removable disk</span><br><span class="line">[41467.674915] sd 7:0:0:0: [sdd] Attached SCSI removable disk</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>上述的配置过程太繁琐了，在Android上，基于configfs有专门的<code>init.rc</code>在启动过程中去配置对应的<code>configuration</code>和<code>function</code>，比如说<code>init.usb.rc</code>，里面包含了一系列gadget的配置方法。在后面的文章中，将详细讲述每条命令背后的实现原理。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">on boot</span><br><span class="line">    write /config/usb_gadget/g1/strings/0x409/serialnumber $&#123;ro.serialno&#125;</span><br><span class="line">    write /config/usb_gadget/g1/strings/0x409/manufacturer $&#123;ro.product.manufacturer&#125;</span><br><span class="line">    write /config/usb_gadget/g1/strings/0x409/product $&#123;ro.product.model&#125;</span><br><span class="line"></span><br><span class="line">    setprop sys.usb.configfs 1</span><br><span class="line"></span><br><span class="line">    # OS DESCRIPTORS</span><br><span class="line">    #===============</span><br><span class="line">    # OS STRING</span><br><span class="line">    #----------</span><br><span class="line">    write /config/usb_gadget/g1/os_desc/b_vendor_code 1</span><br><span class="line">    write /config/usb_gadget/g1/os_desc/qw_sign &quot;MSFT100&quot;</span><br><span class="line">    # use os desc or not is up to each usb functions respectively</span><br><span class="line">    # write /config/usb_gadget/g1/os_desc/use 1</span><br><span class="line"></span><br><span class="line">    # MAKE b.1 THE ONE ASSOCIATED WITH OS DESCRIPTORS</span><br><span class="line">    #------------------------------------------------</span><br><span class="line">    symlink /config/usb_gadget/g1/configs/b.1 /config/usb_gadget/g1/os_desc/b1</span><br><span class="line"></span><br><span class="line">    # ci_hdrc.0 is the fixed UDC name</span><br><span class="line">    setprop sys.usb.controller ci_hdrc.0</span><br><span class="line"></span><br><span class="line">on fs</span><br><span class="line">    mkdir /dev/usb-ffs 0770 shell shell</span><br><span class="line">    mkdir /dev/usb-ffs/adb 0770 shell shell</span><br><span class="line">    # mount the configfs on /config</span><br><span class="line">    mount configfs none /config mode=0755</span><br><span class="line">    mkdir /config/usb_gadget/g1</span><br><span class="line">    mkdir /config/usb_gadget/g1/configs/b.1</span><br><span class="line">    # mkdir for functions needed</span><br><span class="line">    # this will call each gadget&apos;s alloc_inst()</span><br><span class="line">    mkdir /config/usb_gadget/g1/functions/ffs.adb</span><br><span class="line">    mkdir /config/usb_gadget/g1/functions/mtp.gs0</span><br><span class="line">    mkdir /config/usb_gadget/g1/functions/ptp.gs1</span><br><span class="line">    mkdir /config/usb_gadget/g1/functions/accessory.gs2</span><br><span class="line">    mkdir /config/usb_gadget/g1/functions/audio_source.gs3</span><br><span class="line">    mkdir /config/usb_gadget/g1/functions/rndis.gs4</span><br><span class="line">    mkdir /config/usb_gadget/g1/functions/midi.gs5</span><br><span class="line">    mkdir /config/usb_gadget/g1/strings/0x409</span><br><span class="line">    mkdir /config/usb_gadget/g1/configs/b.1/strings/0x409</span><br><span class="line">    # The mount of functionfs for adb must be put AFTER the mkdir for functions in configfs</span><br><span class="line"></span><br><span class="line">on property:sys.usb.config=none &amp;&amp; property:sys.usb.configfs=1</span><br><span class="line">    write /config/usb_gadget/g1/os_desc/use 0</span><br><span class="line"></span><br><span class="line">on property:sys.usb.ffs.ready=1 &amp;&amp; property:sys.usb.config=adb &amp;&amp; property:sys.usb.configfs=1</span><br><span class="line">    write /config/usb_gadget/g1/idProduct 0x4ee7</span><br><span class="line">    write /config/usb_gadget/g1/idVendor 0x18d1</span><br><span class="line"></span><br><span class="line">on property:sys.usb.config=mtp &amp;&amp; property:sys.usb.configfs=1</span><br><span class="line">    write /config/usb_gadget/g1/functions/mtp.gs0/os_desc/interface.MTP/compatible_id &quot;MTP&quot;</span><br><span class="line">    write /config/usb_gadget/g1/os_desc/use 1</span><br><span class="line">    write /config/usb_gadget/g1/idProduct 0x4ee1</span><br><span class="line">    write /config/usb_gadget/g1/idVendor 0x18d1</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div class="note success"><p>drivers/usb/gadget/function/f_mass_storage.c<br><a href="https://wiki.tizen.org/USB/Linux_USB_Layers/Configfs_Composite_Gadget" target="_blank" rel="noopener">https://wiki.tizen.org/USB/Linux_USB_Layers/Configfs_Composite_Gadget</a></p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux USB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux USB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>usb gadget configfs 翻译</title>
      <link href="/440dc3d9/"/>
      <url>/440dc3d9/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>本文翻译<a href="https://www.kernel.org/doc/Documentation/usb/gadget_configfs.txt" target="_blank" rel="noopener">Documentation/usb/gadget_configfs.txt</a>文档。主要是讲述如何通过<code>configfs</code>来<strong>配置</strong>USB Gadget的<code>functions</code>。<font color="red">注意：这里使用的是<strong>配置</strong>，也就是要求内核必须存在对应的<code>functions</code>。与<code>ffs</code>的差别是，<code>ffs</code>可以<strong>创建</strong>一个新的<code>functions</code>，内核并不要求事先存在。</font></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Linux USB Gadget是一个拥有UDC(USB Device Controller)的设备，该设备可以用于连接到USB Host用于扩展额外的功能，比如串口或者大容量存储（MTP）。Android就是一个支持MTP的USB Gadget。当Android手机插入到电脑中（USB Host），电脑可以识别出一个多媒体设备出来。</p><p>USB Host可以通过一些<code>configurations</code>来识别gadget，<code>configuration</code>包括多个<code>interfaces</code>（这里可以理解为USB描述符直接的层级关系）。从gadget的角度来看是<code>functions</code>，每个<code>fcunction</code>代表一种功能，比如串口或者SCSI磁盘。<br>Linux为gadget提供一系列的<code>functions</code>，在<code>drivers/usb/gadget/function/</code>目录中定义。</p><p>创建gadget意味着决定将使用哪些<code>configurations</code>，以及每种<code>configurations</code>将提供的<code>functions</code>，<strong>在这之前是以hardcode的方式在代码中设定的</strong>，比如<code>drivers/usb/gadget/legacy/</code>的gadget都是。</p><p><code>configfs</code>（请参阅<code>Documentation/filesystems/configfs/*</code>）非常适合告诉内核有关上述决定的内容。为啥是<code>configfs</code>呢？因为<code>configfs</code>支持从用户空间配置内核空间的驱动。反之，<code>sysfs</code>支持同内核空间export一些对象供用户空间查看。本文档是讲关于如何做到的，以及描述了如何设计将<code>configfs</code>与usb gadget集成在一起。<a id="more"></a></p><hr><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>必须在内核中使能<code>CONFIGFS_FS</code>，当然<code>USB_LIBCOMPOSITE</code>也必须使能。与之对应的代码在<code>fs/configfs</code>和<code>drivers/usb/gadget/</code>。</p><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>（可以在这里看到通过configfs提供第一个功能的原始帖子：<a href="http://www.spinics.net/lists/linux-usb/msg76388.html）" target="_blank" rel="noopener">http://www.spinics.net/lists/linux-usb/msg76388.html）</a></p><h3 id="inmod驱动"><a href="#inmod驱动" class="headerlink" title="inmod驱动"></a>inmod驱动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ insmod libcomposite.ko</span><br><span class="line">$ insmode configfs.ko</span><br><span class="line">$ mount none $CONFIGFS_HOME -t configfs</span><br></pre></td></tr></table></figure><p>这里的<code>CONFIGS_HOME</code>是<code>configfs</code>的挂载点，通常为<code>mount -t configfs none /config</code>。</p><h3 id="创建gadget"><a href="#创建gadget" class="headerlink" title="创建gadget"></a>创建<code>gadget</code></h3><p>1、对于要创建的每个gadget，必须创建其相应的目录：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir $CONFIGFS_HOME/usb_gadget/&lt;gadget name&gt;</span><br><span class="line">$ cd $CONFIGFS_HOME/usb_gadget/g1</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p></p><p>比如说：<code>mkdir $CONFIGFS_HOME/usb_gadget/g1</code>，你如果有多个gadget，就可以创建<code>g2</code>、<code>g3</code>等。<br>2、配置PID和VID<br>每个gadget都要指定PID和VID：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &lt;VID&gt; &gt; idVendor</span><br><span class="line">$ echo &lt;PID&gt; &gt; idProduct</span><br></pre></td></tr></table></figure><p></p><p>3、创建并配置string字目录<br>gadget还需要其<code>serial number</code>，<code>manufacturer</code>和<code>product</code>。 为了有一个存储它们的地方，必须为每种语言创建一个<code>strings</code>子目录，比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir strings/0x409</span><br><span class="line">$ echo &lt;serial number&gt; &gt; strings/0x409/serialnumber</span><br><span class="line">$ echo &lt;manufacturer&gt; &gt; strings/0x409/manufacturer</span><br><span class="line">$ echo &lt;product&gt; &gt; strings/0x409/product</span><br></pre></td></tr></table></figure><p></p><h3 id="创建configurations"><a href="#创建configurations" class="headerlink" title="创建configurations"></a>创建<code>configurations</code></h3><p>每个gadget都包含许多配置，必须创建相应的目录：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir configs/&lt;name&gt;.&lt;number&gt;</span><br></pre></td></tr></table></figure><p></p><p><code>&lt;name&gt;</code>必须是在文件系统中有效的字符串，<code>&lt;number&gt;</code>表示配置号，比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir configs/c.1</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p></p><p>每个配置也需要其字符串，因此必须为每种语言创建子目录，比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir configs/c.1/strings/0x409</span><br></pre></td></tr></table></figure><p></p><p>然后就可以指定配置字符串：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo &lt;configuration&gt; &gt; configs/c.1/strings/0x409/configuration</span><br></pre></td></tr></table></figure><p></p><h3 id="创建functions"><a href="#创建functions" class="headerlink" title="创建functions"></a>创建<code>functions</code></h3><p>gadget将提供一些functions，每个functions必须创建相应的目录，比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir functions/&lt;name&gt;.&lt;instance name&gt;</span><br></pre></td></tr></table></figure><p></p><p>其中<code>&lt;name&gt;</code>对应于一个允许的functions名称，而实例名称是文件系统中允许的任意字符串，例如（前提条件是必须加载<code>usb_f_ncm.ko</code>驱动）：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir functions/ncm.usb0</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p></p><p>每个functions都提供其特定的属性集，具有只读或读写访问权限。 在适用的情况下，需要酌情编写。有关更多信息，请参阅<a href="https://elixir.bootlin.com/linux/latest/source/Documentation/ABI/testing/configfs-usb-gadget" target="_blank" rel="noopener">Documentation/ABI/configfs-usb-gadget`</a></p><h3 id="将functions和configuration关联起来"><a href="#将functions和configuration关联起来" class="headerlink" title="将functions和configuration关联起来"></a>将<code>functions</code>和<code>configuration</code>关联起来</h3><p>此时会创建许多gadget，每个gadget都指定了许多配置，并提供了许多功能。 剩下的是指定哪种配置可用的功能（在多种配置中可以使用相同的功能）。这是通过创建符号链接来实现的。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s functions/&lt;name&gt;.&lt;instance name&gt; configs/&lt;name&gt;.&lt;number&gt;</span><br></pre></td></tr></table></figure><p></p><p>比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s functions/ncm.usb0 configs/c.1</span><br></pre></td></tr></table></figure><p></p><h3 id="使能gadget"><a href="#使能gadget" class="headerlink" title="使能gadget"></a>使能gadget</h3><p>所有上述步骤都用于组成<code>configuration</code>和<code>functions</code>的<code>gadget</code>，示例目录结构可能如下所示：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">./strings</span><br><span class="line">./strings/0x409</span><br><span class="line">./strings/0x409/serialnumber</span><br><span class="line">./strings/0x409/product</span><br><span class="line">./strings/0x409/manufacturer</span><br><span class="line">./configs</span><br><span class="line">./configs/c.1</span><br><span class="line">./configs/c.1/ncm.usb0 -&gt; ../../../../usb_gadget/g1/functions/ncm.usb0</span><br><span class="line">./configs/c.1/strings</span><br><span class="line">./configs/c.1/strings/0x409</span><br><span class="line">./configs/c.1/strings/0x409/configuration</span><br><span class="line">./configs/c.1/bmAttributes</span><br><span class="line">./configs/c.1/MaxPower</span><br><span class="line">./functions</span><br><span class="line">./functions/ncm.usb0</span><br><span class="line">./functions/ncm.usb0/ifname</span><br><span class="line">./functions/ncm.usb0/qmult</span><br><span class="line">./functions/ncm.usb0/host_addr</span><br><span class="line">./functions/ncm.usb0/dev_addr</span><br><span class="line">./UDC</span><br><span class="line">./bcdUSB</span><br><span class="line">./bcdDevice</span><br><span class="line">./idProduct</span><br><span class="line">./idVendor</span><br><span class="line">./bMaxPacketSize0</span><br><span class="line">./bDeviceProtocol</span><br><span class="line">./bDeviceSubClass</span><br><span class="line">./bDeviceClass</span><br></pre></td></tr></table></figure><p></p><p>必须最终启用这个gadget，以便USB主机可以枚举它，为了启用gadget，必须将其绑定到<code>UDC</code>（USB Device Controller）：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo &lt;udc name&gt; &gt; UDC</span><br></pre></td></tr></table></figure><p></p><p><code>&lt;udc name&gt;</code>可以从<code>/sys/class/udc/*</code>中找到。</p><h3 id="关闭gadget"><a href="#关闭gadget" class="headerlink" title="关闭gadget"></a>关闭gadget</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;&quot; &gt; UDC</span><br></pre></td></tr></table></figure><h3 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h3><ul><li><p>从<code>configurations</code>中将<code>functions</code>删掉，比如将<code>&lt;config name&gt;.&lt;number&gt;</code>的configure与<code>&lt;function&gt;</code>之间的软连接删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rm configs/&lt;config name&gt;.&lt;number&gt;/&lt;function&gt;</span><br><span class="line">$ rm configs/c.1/ncm.usb0</span><br></pre></td></tr></table></figure></li><li><p>删除<code>configurations</code>的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rmdir configs/&lt;config name&gt;.&lt;number&gt;/strings/&lt;lang&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除<code>configurations</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rmdir configs/&lt;config name&gt;.&lt;number&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除<code>functions</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rmdir functions/&lt;name&gt;.&lt;instance name&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除<code>gadget</code>的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rmdir strings/&lt;lang&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除<code>gadget</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ..</span><br><span class="line">$ rmdir &lt;gadget name&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>在configfs中有<code>item(项目)</code>和<code>group(组)</code>，都表示为目录。 项目和组之间的区别在于组可以包含其他组。 在下图中只显示了一个项目。 项目和组都可以具有属性，这些属性表示为文件。 用户可以创建和删除目录，但不能删除文件，这些文件可以是只读或读写，具体取决于它们所代表的内容。</p><p>configfs的文件系统部分在<code>config_items/groups</code>和<code>configfs_attributes</code>上操作，这些通用且所有已配置元素的类型相同。但是，它们嵌入在特定于使用的更大结构中。 在下面的图片中有一个<code>cs</code>包含一个<code>config_item</code>和一个包含<code>configfs_attribute</code>的<code>sa</code>。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./</span><br><span class="line">./cs (directory)</span><br><span class="line">|</span><br><span class="line">+--sa (file)</span><br><span class="line">|</span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p></p><p>每当用户读/写<code>sa</code>文件时，都会调用一个接受<code>struct config_item</code>和<code>struct configfs_attribute</code>的函数。在所述函数中，使用众所周知的<code>container_of</code>技术检索<code>cs</code>和<code>sa</code>，并调用适当的<code>sa函数（show或store）</code>并传递<code>cs</code>和字符缓冲区。<code>show函数</code>用于显示文件的内容（将数据从<code>cs</code>复制到缓冲区），而<code>store函数</code>用于修改文件的内容（将数据从缓冲区复制到<code>cs</code>），但这取决于实现者 这两个函数决定了他们实际做了什么。</p><p>文件名由配置项/组设计器决定，而一般目录可以随意命名。一个组可以自动创建许多默认子组。<br>请参阅：<a href="https://www.kernel.org/doc/Documentation/filesystems/configfs/configfs.txt" target="_blank" rel="noopener">Documentation/filesystems/configfs/*</a></p><p>上述概念转换为USB gadget，如下所示：</p><p>1、gadget有自己的配置组，它具有一些属性（idVendor，idProduct等）和默认子组（配置，函数，字符串）。 写入属性会导致信息存储在适当的位置。在配置，函数和字符串子组中，用户可以创建其子组以表示给定语言中的配置，函数和字符串组。<br>2、用户创建配置和功能，在配置中创建功能的符号链接。在写入gadget的UDC属性时使用此信息，这意味着将小工具绑定到UDC。 <code>drivers/usb/gadget/configfs.c</code>中的代码遍历所有配置，并在每个配置中迭代所有函数并绑定它们。这样整个gadget就绑定了。<br>3、<code>drivers/usb/gadget/configfs.c</code>包含的代码如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- gadget&apos;s config_group</span><br><span class="line">- gadget&apos;s default groups (configs, functions, strings)</span><br><span class="line">- associating functions with configurations (symlinks)</span><br></pre></td></tr></table></figure><p></p><p>4、每个USB功能自然都有自己想要配置的视图，因此特定功能的<code>config_groups</code>在功能实现文件<code>drivers/usb/gadget/f_*.c</code>中定义。<br>5、函数的代码是以它使用的方式编写的。</p><p><code>usb_get_function_instance()</code>，它又调用<code>request_module</code>。 因此，只要<code>insmod</code>工作，就会自动加载特定函数的模块。请注意，反之亦然，在禁用并拆除gadget后，模块仍会加载。</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div class="note success"><p><a href="https://events.static.linuxfound.org/sites/events/files/slides/USB%20Gadget%20Configfs%20API_0.pdf" target="_blank" rel="noopener">https://events.static.linuxfound.org/sites/events/files/slides/USB%20Gadget%20Configfs%20API_0.pdf</a><br><a href="https://www.kernel.org/doc/Documentation/usb/functionfs.txt" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/usb/functionfs.txt</a><br><a href="https://elinux.org/images/1/14/Opasiak--tame_the_usb_gadgets_talkative_beast.pdf" target="_blank" rel="noopener">https://elinux.org/images/1/14/Opasiak--tame_the_usb_gadgets_talkative_beast.pdf</a><br><a href="https://developer.toradex.com/knowledge-base/usb-device-mode-(linux)" target="_blank" rel="noopener">https://developer.toradex.com/knowledge-base/usb-device-mode-(linux)</a><br><a href="https://www.kernel.org/doc/Documentation/filesystems/configfs/configfs.txt" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/filesystems/configfs/configfs.txt</a><br><a href="https://lwn.net/Articles/382480/" target="_blank" rel="noopener">https://lwn.net/Articles/382480/</a></p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux USB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux USB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android usb gadget类型</title>
      <link href="/ffcaead/"/>
      <url>/ffcaead/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>以下列举了常见的几种Android USB Gadget类型：</p><h2 id="Android-USB-Gadget类型"><a href="#Android-USB-Gadget类型" class="headerlink" title="Android USB Gadget类型"></a>Android USB Gadget类型</h2><p>1、UMS：USB mass storage，USB大容量存储，也被称为UMS，USB MSC。在旧版Android手机上会将其暴露给计算机，有如下几种缺点：</p><ul><li>USB mass storage是flash driver，外部hd，SD卡和其他USB存储设备使用的标准协议。驱动器使其自身完全对计算机可见，就像它是内部驱动器一样；</li><li><strong>这种方式存在问题。无论什么设备访问存储，都需要对其进行独占访问。</strong>将存储连接到计算机时，它与设备上运行的Android操作系统断开连接。存储在SD卡或USB存储器上的任何文件或应用程序在连接到计算机时都将不可用，此时是计算机独占；</li><li>由于必须可以从Windows设备访问文件系统，因此必须使用FAT文件系统对其进行格式化。 微软不仅拥有对FAT施加的专利，而且FAT也是一个较旧的，较慢的文件系统，没有现代许可系统。<a id="more"></a></li></ul><p>2、MTP：Media Transfer Protocol，媒体传输协议，主要用于传输媒体文件，当Android使用该协议，将其连接到电脑上，会显示一个媒体设备。该协议与USB mass storage的工作方式非常不同。</p><ul><li>MTP不会将Android设备的原始文件系统暴露给Windows，而是在文件级别运行；</li><li>Android设备不会将其整个存储设备暴露给Windows。 相反，当将设备连接到计算机时，计算机将查询设备，并且设备会响应其提供的文件和目录列表。</li><li>Android可以选择它呈现出来的文件，并隐藏系统文件，以便其他人无法查看或修改它们。 如果尝试删除或编辑无法修改的文件，设备将拒绝该请求，将会看到错误消息。</li><li><strong>计算机不需要对存储设备进行独占访问，因此无需连接存储，断开连接或为不同类型的数据分别设置分区</strong>。Android也可以使用它想要的ext4或任何其他文件系统，但Windows不必了解该文件系统。</li><li>在实践中，MTP的功能很像USB mass storage。 例如，MTP设备显示在Windows资源管理器中，因此您可以浏览和传输文件。</li></ul><p>3、PTP：Picture Transfer Protocol，图像传输协议，当Android使用此协议时，它在计算机上显示为数码相机。MTP是基于PTP的，在此基础上进行扩展，PTP通常由数码相机使用；</p><p>4、CDC：Communication Device Class，通信设备类，被USB主机用于识别(确定)含有几种不同类型接口的通信设备。更多关于CDC的内容，请参考：<a href="http://wowothink.com/588ebc22">ACM-ECM-NCM-EEM-RNDIS-RmNet介绍</a></p><p>5、FFS：Function Filesystem，允许通过用户空间创建function，类似于GadgetFS(gadget configfs)通过用户空间创建USB Gadget。在之前的文章中<a href=""></a>，我们讲到通过gadget configfs创建一个<code>mass storage</code>的gadget，里面就用到<code>mass_storage</code>的function，这个function是在<code>drivers/usb/gadget/function/f_mass_storage.c</code>就已经预先定义好的了。<strong>这里的<code>FFS</code>允许通过用户空间创建function，就不用在内核中预先定义。</strong></p><p>6、MIDI：MIDI是一种技术标准，描述了通信协议，数字接口和电连接器，它们连接各种电子乐器，计算机和相关的音频设备，用于播放，编辑和录制音乐。通俗的理解就是audio设备。</p><p>7、HID：Human Interface Device，人机交互接口。</p><p>8、SERIAL：串口</p><p>9、ADB：Android Debug Bridge，Android调试桥，更具体的介绍详见<a href="https://blog.csdn.net/encourage2011/article/details/75807945" target="_blank" rel="noopener">Androidadb的编译配置及常见问题</a></p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div class="note success"><p><a href="https://www.howtogeek.com/192732/android-usb-connections-explained-mtp-ptp-and-usb-mass-storage/" target="_blank" rel="noopener">Android USB Connections Explained: MTP, PTP, and USB Mass Storage</a><br><a href="https://www.usb.org/sites/default/files/midi10.pdf" target="_blank" rel="noopener">USB MIDI</a></p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux USB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux USB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM&amp;ECM&amp;NCM&amp;EEM&amp;RNDIS&amp;RmNet介绍</title>
      <link href="/588ebc22/"/>
      <url>/588ebc22/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="USB-CDC"><a href="#USB-CDC" class="headerlink" title="USB CDC"></a>USB CDC</h2><p>通用串行总线(USB)通信设备(Communication devices)的定义由三个类组成：</p><ul><li>通信设备类(Communication Device Class, CDC)：设备级定义，被主机用于识别(确定)含有几种不同类型接口的通信设备；</li><li>通信接口类(Communication Interface Class)：定义了一种通用机制，该机制可被用来使能处于USB总线上的所有类型的通信服务，即USB通信设备的控制功能；</li><li>数据接口类(Data Interface Class)：定义了一种通用机制，当一种数据不符合任何类的要求时,该机制使这种数据传输能通过USB块传输或同步传输类型在USB总线上进行，即通过USB块传输或同步传输类型去实现任何类型的数据传输的机制。</li></ul><p>CDC协议定义了一种使得USB总线能够支持任何通信设备的框架，如支持电信设备、多媒体网络设备等。<br>CDC协议并非试图去重定义已经存在的那些通信设备连接和控制标准，而是去定义了一种确定设备与主机应该使用哪种现有协议的机制。CDC会尽可能的使用已存在的通信数据格式，而只是由USB通过恰当的描述符(descriptor)、接口(interface)和服务请求(request)定义去使这些数据格式能够在USB总线上传输。确切来说，CDC规范描述了一种包含USB接口、数据结构和服务请求的框架，在该框架下种类繁多的通信设备能够被定义和实现。</p><p>通常一个CDC类设备由两个子类接口组成：一个通信接口类接口（Communication Interface Class）和0个或多个数据接口类接口(Data Interface Class)。主机主要通过通信接口类对设备进行管理和控制，而通过数据接口类传送数据。对于前面所述的不同CDC类模型，其所对应的接口的端点需求也是不同的，两个接口子类占有不同数量和类型的端点（Endpoints）。</p><ul><li><p>通信接口类接口（Communication Interface ）<br>设备通过通信接口通过定义好的申请（request）和通知（notification）实施设备控制以及可能的呼叫控制。因此通信接口时通信设备必须配置的接口，通信接口类一般需要一个控制端点（Control Endpoint，EP0）和一个可选的中断（Interrupt）端点。为了达到设备控制的目的，通信设备类在配置描述符中必须通过联合功能描述符（Union Functional Descriptor）将通信接口和数据接口组织起来。</p></li><li><p>数据接口类接口(Data Interface Class)<br>当通信设备需要传输的数据的数据格式不符合任何类的要求时就需要用数据接口来实现。一个通信设备可以包含0个或多个数据接口，数据接口上的数据格式则是主机和设备通过通信接口协商决定。数据接口子类需要一个方向为输入（IN）的块传输或同步传输类型端点和一个方向为输出（OUT）的块传输或同步传输类型端点。USB CDC包含以下种类，关于每个子类的定义，都可以参考<code>Reference</code>中指定的文档。</p></li></ul><table><thead><tr><th style="text-align:center">Code</th><th style="text-align:center">Subclass</th><th style="text-align:center">Reference</th></tr></thead><tbody><tr><td style="text-align:center">00h</td><td style="text-align:center">RESERVED</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">01h</td><td style="text-align:center">Direct Line Control Model</td><td style="text-align:center">USBPSTN1.2</td></tr><tr><td style="text-align:center">02h</td><td style="text-align:center">Abstract Control Model</td><td style="text-align:center">USBPSTN1.2</td></tr><tr><td style="text-align:center">03h</td><td style="text-align:center">Telephone Control Model</td><td style="text-align:center">USBPSTN1.2</td></tr><tr><td style="text-align:center">04h</td><td style="text-align:center">Multi-Channel Control Model</td><td style="text-align:center">USBISDN1.2</td></tr><tr><td style="text-align:center">05h</td><td style="text-align:center">CAPI Control Model</td><td style="text-align:center">USBISDN1.2</td></tr><tr><td style="text-align:center">06h</td><td style="text-align:center">Ethernet Networking Control Model</td><td style="text-align:center">USBECM1.2</td></tr><tr><td style="text-align:center">07h</td><td style="text-align:center">ATM Networking Control Model</td><td style="text-align:center">USBATM1.2</td></tr><tr><td style="text-align:center">08h</td><td style="text-align:center">Wireless Handset Control Model</td><td style="text-align:center">USBWMC1.1</td></tr><tr><td style="text-align:center">09h</td><td style="text-align:center">Device Management</td><td style="text-align:center">USBWMC1.1</td></tr><tr><td style="text-align:center">0Ah</td><td style="text-align:center">Mobile Direct Line Model</td><td style="text-align:center">USBWMC1.1</td></tr><tr><td style="text-align:center">0Bh</td><td style="text-align:center">OBEX</td><td style="text-align:center">USBWMC1.1</td></tr><tr><td style="text-align:center">0Ch</td><td style="text-align:center">Ethernet Emulation Model</td><td style="text-align:center">USBEEM1.0</td></tr><tr><td style="text-align:center">0Dh</td><td style="text-align:center">Network Control Model</td><td style="text-align:center">USBNCM1.0</td></tr><tr><td style="text-align:center">0Dh~7Fh</td><td style="text-align:center">RESERVED(future use)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">80h~FEh</td><td style="text-align:center">RESERVED(vendor specific)</td></tr></tbody></table><p>每个子类的详细介绍如下：<a id="more"></a></p><h3 id="1、USB-CDC-ACM"><a href="#1、USB-CDC-ACM" class="headerlink" title="1、USB CDC ACM"></a>1、USB CDC ACM</h3><p><code>CDC-ACM</code> (Abstract Control Model 抽象控制模型）允许任何通信设备提供串行通信接口（例如发送和接收AT命令的调制解调器设备）。该设备类型是在<code>PSTN(Public Switched Telephone Network)</code>中定义的。<br><code>CDC-ACM</code>驱动程序将USB设备作为虚拟调制解调器或虚拟COM端口暴露给操作系统。驱动程序可以通过ACM（通过不同通道分离数据和AT命令）或通过串行仿真（按原样传递AT命令和作为数据流的一部分）发送数据和AT命令。</p><h3 id="2、USB-CDC-ECM"><a href="#2、USB-CDC-ECM" class="headerlink" title="2、USB CDC ECM"></a>2、USB CDC ECM</h3><p><code>CDC-ECM</code>（Ethernet Networking Control Model 以太网网络控制模型）用于在设备和主机之间交换以太网帧数据。<code>CDC-ECM</code>设备的一般用例是LAN/WLAN的点对点以太网适配器。</p><h3 id="3、USB-CDC-NCM"><a href="#3、USB-CDC-NCM" class="headerlink" title="3、USB CDC NCM"></a>3、USB CDC NCM</h3><p><code>CDC-NCM</code>（Network Control Model 网络控制模型）协议用于在设备和主机之间交换高速以太网帧数据。这些以太网帧可以传送通过通信网络传输的IPv4或IPv6数据报。<code>NCM</code>设备的一般用例是支持3.5G/4G网络的无线网络适配器，例如：HSPA +和LTE。<strong><code>NCM</code>是建立在<code>ECM</code>的基础上，进行改进以支持更高的数据速率，主要表现在</strong>：</p><ul><li>多个以太网帧可以聚合为单个USB传输；</li><li>为了最大限度地减少在USB设备中处理以太网帧时的开销，<code>CDC-NCM</code>可以按照最好的方式将以太网帧放到USB传输中。</li><li><code>CDC-ECM</code>专为USB full-speed设备而设计，尤其适用于支持DOCSIS 1.0电缆调制解调器。虽然<code>ECM</code>在功能上是完整的，但它在吞吐量或效率方面不能很好地扩展到更高的USB速度和更高的网络速度。<code>NCM</code>利用从<code>ECM</code>实施中获得的经验，并调整数据传输协议，使其更加高效。</li></ul><h3 id="4、USB-CDC-EEM"><a href="#4、USB-CDC-EEM" class="headerlink" title="4、USB CDC EEM"></a>4、USB CDC EEM</h3><p><code>CDC-EEM</code>（Ethernet Emulation Model 以太网仿真模型）是一种通过USB总线以低成本和高效率传输以太网帧的规范。<strong>与<code>CDC ECM</code>不同，<code>EEM</code>不会扩展USB总线上的接口，而是将USB总线视为移动以太网数据包的工具。<code>EEM</code>是较新的标准，比<code>ECM</code>稍微简单一些，可以获得更多的硬件支持。两者之间的差别是：</strong></p><ul><li><code>ECM</code>将网络接口扩展到目标（例如USB电缆调制解调器）；</li><li><code>EEM</code>用于移动设备通过USB使用以太网与主机通信。</li></ul><p>但是，对于Linux gadget，与主机的接口是相同的（usbX设备），因此差异很小。</p><h3 id="5、USB-CDC-OBEX"><a href="#5、USB-CDC-OBEX" class="headerlink" title="5、USB CDC OBEX"></a>5、USB CDC OBEX</h3><p><code>USB CDC-OBEX</code>（Object Exchange 对象交换）符合<code>WMC</code>（Wireless Mobile Communication 无线移动通信）<code>OBEX</code>功能模型，支持USB上的<code>OBEX</code>应用程序。</p><h3 id="6、USB-WMC"><a href="#6、USB-WMC" class="headerlink" title="6、USB WMC"></a>6、USB WMC</h3><p><code>USB WMC</code>（Wireless Mobile Communication 无线移动通信），我的理解是USB上网卡（连接移动通信网络），该模型包括以下内容：<img src="https://ae01.alicdn.com/kf/H8b839dd02dc844afac1642a3e902a34e6.png" alt="WMC框架"></p><hr><h2 id="RNDIS"><a href="#RNDIS" class="headerlink" title="RNDIS"></a>RNDIS</h2><ul><li><code>RNDIS</code>（Remote Network Driver Interface Specification 远程网络驱动接口协议）<strong>是Microsoft专有协议</strong>，主要用于USB之上，在支持Microsoft RNDIS协议的Windows PC上提供类似CDC的通信功能。它提供了大多数Windows，Linux和FreeBSD操作系统版本的虚拟以太网链接。</li><li><code>NDIS</code>和<code>RNDIS</code>区别：<code>NDIS</code>是一种规范，定义了网络驱动接口的api。<code>RNDIS</code>是一种技术，是将TCP/IP封装在USB报文里，实现网络通信。</li><li><code>RNDIS</code>的框架如下：<br><img src="https://ae01.alicdn.com/kf/H0b614b3d2a7d47dbbaa759032689ebafo.png" alt="RNDIS框架"></li></ul><hr><h2 id="RmNet"><a href="#RmNet" class="headerlink" title="RmNet"></a>RmNet</h2><p><code>RmNet</code>是高通公司为其手机平台开发的<em>专有USB虚拟以太网框架</em>。 RmNet通过薄层协议（TLP）提供更高的吞吐量，并允许服务质量流量控制。</p><ul><li><code>RmNet</code>和<code>CDC-ECM</code>区别：更像是两种拨号方式的区别，<code>RmNet</code>获取公网IP，<code>CCD-ECM</code>获取局域网IP。</li><li>在高通平台上，rmnet 也是属于<code>CDC-ECM</code>，他们具体的区别在于对于USB命令的封装以及使用的USB接口，端点定义方式不同。</li><li>如果是使用<code>RmNet</code>,那么发起data call是通过QMI工具发的QMI命令，QMI工具为QMICM，QMICM集成了QMI命令。</li><li>而通过标准的<code>CDC-ECM</code>发起data call，则是发送标准的<code>ECM</code>命令。如果是QMICM建立的data call，不走router的，所以它的IP地址获得的是公网IP。而通过标准的<code>CDC-ECM</code>建立的data call，是走router的，获得的IP地址是私有的IP如192.168开头</li></ul><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div class="note success"><p><a href="https://www.usb.org/document-library/class-definitions-communication-devices-12" target="_blank" rel="noopener">Class definitions for Communication Devices 1.2</a><br><a href="https://blog.csdn.net/Decisiveness/article/details/51672085" target="_blank" rel="noopener">USB CDC / USBnet (ECM, NCM, ACM)</a><br><a href="https://www.usb.org/sites/default/files/CDC_EEM10.pdf" target="_blank" rel="noopener">USB CDC EEM</a><br><a href="https://www.usb.org/document-library/network-control-model-devices-specification-v10-and-errata-and-adopters-agreement" target="_blank" rel="noopener">USB CDC NCM</a><br><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/network/overview-of-remote-ndis--rndis-" target="_blank" rel="noopener">Overview of Remote NDIS (RNDIS)</a><br><a href="https://projects.osmocom.org/projects/quectel-modems/wiki/Android_USB_Gadget" target="_blank" rel="noopener">Qualcomm Linux Modems by Quectel &amp; Co</a></p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux USB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux USB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu进入recovery mode</title>
      <link href="/f4def801/"/>
      <url>/f4def801/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>由于ubuntu中另外一块硬盘出现问题，想要进入ubuntu recovery mode进行修复。按照网上的做法，在我的电脑上都无法进入，最后都走正常启动。但是我使用同样的方法在另外一台机器上就可以进入。以下方法针对<strong>那种无法进入recovery mode，但是可以进入normal mode修改grub的情况。</strong><a id="more"></a></p><hr><h2 id="网上的方法"><a href="#网上的方法" class="headerlink" title="网上的方法"></a>网上的方法</h2><blockquote><ol><li>Switch on your computer；</li><li>Wait until the BIOS has finished loading, or has almost finished. (During this time you will probably see a logo of your computer manufacturer.)</li><li>Quickly press and hold the <code>Shift</code> key (or <code>Escape</code> key on some computers), which will bring up the GNU GRUB menu. (If you see the Ubuntu logo, you’ve missed the point where you can enter the GRUB menu.)</li><li>Select the line which starts with “Advanced options”.</li><li>Select the line ending with <code>(recovery mode)</code>, probably the second line, something like:Ubuntu GNU/Linux, with Linux 3.8.0-26-generic (recovery mode)</li><li>Press Return and your machine will begin the boot process.</li><li>After a few moments, your workstation should display a menu with a number of options. One of the options (you may need to scroll down to the bottom of the list) will be <code>Drop to root shell prompt</code>. Press Return with this option highlighted.</li><li>The root partition is mounted read-only. To mount it read/write, enter the command:<code>mount -o remount,rw /</code></li><li>If you have <code>/home</code>, <code>/boot</code>, <code>/tmp</code>, or any other mount point on a separate partition, you can mount them with the command:<code>mount --all</code></li></ol></blockquote><p>按照上述的步骤，无论我怎么按<code>left Shift</code>、<code>ESC</code>、<code>F10/F11/F12</code>都没有看到进入recovery mode的菜单选项。后面看到可以修改<code>grub</code>，我就想着去看看<code>grub</code>文件的内容看看有啥发现。</p><hr><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>进入normal mode下，查看到原始的<code>grub</code>文件内容为：<br></p><figure class="highlight c"><figcaption><span>/etc/default/grub</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># If you change this file, run 'update-grub' afterwards to update</span><br><span class="line"># /boot/grub/grub.cfg.    </span><br><span class="line"># For full documentation of the options in <span class="keyword">this</span> file, see:</span><br><span class="line">#   info -f grub -n 'Simple configuration'</span><br><span class="line"></span><br><span class="line">GRUB_DEFAULT=<span class="number">0</span></span><br><span class="line">GRUB_HIDDEN_TIMEOUT=<span class="number">0</span></span><br><span class="line">GRUB_HIDDEN_TIMEOUT_QUIET=<span class="literal">true</span></span><br><span class="line">GRUB_TIMEOUT=<span class="number">10</span></span><br><span class="line">GRUB_DISTRIBUTOR=`lsb_release -i -s <span class="number">2</span>&gt; /dev/null || echo Debian`</span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">"quiet splash"</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"># Uncomment to enable BadRAM filtering, modify to suit your needs</span><br><span class="line"># This works with Linux (no patch required) <span class="keyword">and</span> with any kernel that obtains</span><br><span class="line"># the memory <span class="built_in">map</span> information from GRUB (GNU Mach, kernel of FreeBSD ...)</span><br><span class="line">#GRUB_BADRAM=<span class="string">"0x01234567,0xfefefefe,0x89abcdef,0xefefefef"</span></span><br><span class="line"></span><br><span class="line"># Uncomment to disable graphical terminal (grub-pc only)</span><br><span class="line">#GRUB_TERMINAL=console</span><br><span class="line"></span><br><span class="line"># The resolution used on graphical terminal</span><br><span class="line"># note that you can use only modes which your graphic card supports via VBE</span><br><span class="line"># you can see them in real GRUB with the command `vbeinfo'</span><br><span class="line">#GRUB_GFXMODE=<span class="number">640</span>x480</span><br><span class="line"></span><br><span class="line"># Uncomment <span class="keyword">if</span> you don't want GRUB to pass <span class="string">"root=UUID=xxx"</span> parameter to Linux</span><br><span class="line">#GRUB_DISABLE_LINUX_UUID=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># Uncomment to disable generation of recovery mode menu entries</span><br><span class="line">#GRUB_DISABLE_RECOVERY=<span class="string">"true"</span></span><br><span class="line"></span><br><span class="line"># Uncomment to get a beep at grub start</span><br><span class="line">#GRUB_INIT_TUNE=<span class="string">"480 440 1"</span></span><br></pre></td></tr></table></figure><p></p><p>根据<a href="https://help.ubuntu.com/community/Grub2/Setup" target="_blank" rel="noopener">Grub2/Setup</a> 的文档说明，了解<code>XXX_TIMEOUT_XXX</code>参数的含义，因此做如下修改：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRUB_HIDDEN_TIMEOUT=<span class="number">5</span></span><br><span class="line">GRUB_HIDDEN_TIMEOUT_QUIET=<span class="literal">false</span></span><br><span class="line">GRUB_TIMEOUT=<span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p><code>GRUB_HIDDEN_TIMEOUT=5</code>等待5s然后进行启动，<code>GRUB_HIDDEN_TIMEOUT_QUIET=false</code>表示显示倒计时，<code>GRUB_TIMEOUT=0</code>设置为0，表示通过<code>GRUB_HIDDEN_TIMEOUT</code>来决定timeout。</p><p>通过上述的配置，在开机的时候可以看到一个倒计时，然后在这个阶段按<code>ESC</code>就可以进入recovery mode的菜单选项。</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div class="note success"><p><a href="https://help.ubuntu.com/community/Grub2/Setup" target="_blank" rel="noopener">Grub2/Setup</a><br><a href="https://wiki.ubuntu.com/RecoveryMode" target="_blank" rel="noopener">RecoveryMode</a></p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> ubuntu工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu下格式化U盘</title>
      <link href="/7a4f33a8/"/>
      <url>/7a4f33a8/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>某个U盘（4GB容量），在我制作一个U盘启动后，然后被我格式化掉了，出现了只有248MB的容量，在Windows下怎么格式化都还是248MB。于是想到在ubuntu下使用命令行将其格式化掉并重建分区表。<a id="more"></a></p><hr><h2 id="格式化步骤"><a href="#格式化步骤" class="headerlink" title="格式化步骤"></a>格式化步骤</h2><p>1、确认磁盘<br>U盘插入ubuntu机器，查看生成的block是哪一个，使用<code>lsblk</code>命令，我这边查看到的这里U盘是对应<code>/dev/sdc</code>。后续的操作一定要指定<code>/dev/sdc</code>，否则有可能破坏掉其他的磁盘。<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~$ lsblk</span><br><span class="line">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sdb      8:16   0 931.5G  0 disk</span><br><span class="line">└─sdb1   8:17   0 931.5G  0 part /home/victor/disk2</span><br><span class="line">sdc      8:32   1   3.8G  0 disk</span><br><span class="line">└─sdc1   8:33   1   3.8G  0 part /media/victor/3B93-C2C4</span><br><span class="line">sda      8:0    0 465.8G  0 disk</span><br><span class="line">├─sda2   8:2    0 464.3G  0 part /</span><br><span class="line">├─sda3   8:3    0   976M  0 part [SWAP]</span><br><span class="line">└─sda1   8:1    0   512M  0 part /boot/efi</span><br></pre></td></tr></table></figure><p></p><p>2、umount磁盘<br>正常u盘插上去会主动挂载上，执行<code>mount</code>命令看挂载到哪个目录下，然后将其<code>umount</code>掉。<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo umount /media/victor/3B93-C2C4</span><br></pre></td></tr></table></figure><p></p><p>3、将磁盘清空<br>使用<code>dd</code>命令，往磁盘中写入0，执行以下命令，其中写入的大小为<code>count</code> <em><code>bs</code> = 4096 </em>1024k = 4GB，这里需要根据自己的磁盘大小来决定。<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dd if=/dev/zero of=/dev/sdc bs=1024k count=4096 status=progress</span><br></pre></td></tr></table></figure><p></p><p>4、格式化分区<br>使用<code>fdisk</code>命令擦除和重新创建新的分区，依次执行<code>o</code>(创建新的分区表)，<code>n</code>(创建新的分区)，<code>w</code>(写入磁盘并退出)。<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~$ sudo fdisk /dev/sdc</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.27.1).</span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table.</span><br><span class="line">Created a new DOS disklabel with disk identifier 0xd8895380.</span><br><span class="line"></span><br><span class="line">Command (m for help): m</span><br><span class="line"></span><br><span class="line">Help:</span><br><span class="line"></span><br><span class="line">  DOS (MBR)</span><br><span class="line">   a   toggle a bootable flag</span><br><span class="line">   b   edit nested BSD disklabel</span><br><span class="line">   c   toggle the dos compatibility flag</span><br><span class="line"></span><br><span class="line">  Generic</span><br><span class="line">   d   delete a partition</span><br><span class="line">   F   list free unpartitioned space</span><br><span class="line">   l   list known partition types</span><br><span class="line">   n   add a new partition</span><br><span class="line">   p   print the partition table</span><br><span class="line">   t   change a partition type</span><br><span class="line">   v   verify the partition table</span><br><span class="line">   i   print information about a partition</span><br><span class="line"></span><br><span class="line">  Misc</span><br><span class="line">   m   print this menu</span><br><span class="line">   u   change display/entry units</span><br><span class="line">   x   extra functionality (experts only)</span><br><span class="line"></span><br><span class="line">  Script</span><br><span class="line">   I   load disk layout from sfdisk script file</span><br><span class="line">   O   dump disk layout to sfdisk script file</span><br><span class="line"></span><br><span class="line">  Save &amp; Exit</span><br><span class="line">   w   write table to disk and exit</span><br><span class="line">   q   quit without saving changes</span><br><span class="line"></span><br><span class="line">  Create a new label</span><br><span class="line">   g   create a new empty GPT partition table</span><br><span class="line">   G   create a new empty SGI (IRIX) partition table</span><br><span class="line">   o   create a new empty DOS partition table</span><br><span class="line">   s   create a new empty Sun partition table</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command (m for help): o</span><br><span class="line">Created a new DOS disklabel with disk identifier 0x6affbecc.</span><br><span class="line"></span><br><span class="line">Command (m for help): n</span><br><span class="line">Partition type</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended (container for logical partitions)</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (1-4, default 1): 1</span><br><span class="line">First sector (2048-7881823, default 2048):</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (2048-7881823, default 7881823):</span><br><span class="line"></span><br><span class="line">Created a new partition 1 of type 'Linux' and of size 3.8 GiB.</span><br><span class="line"></span><br><span class="line">Command (m for help):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command (m for help): w</span><br><span class="line"></span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure><p></p><p>5、查看新的分区表<br>使用<code>lsblk</code>可以查看U盘的最新分区表。</p><p>6、创建<code>vfat</code>文件系统<br>分区和分区表创建好之后，接下来使用<code>mkfs.vfat</code>创建<code>vfat</code>文件系统。<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkfs.vfat /dev/sdc1</span><br></pre></td></tr></table></figure><p></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div class="note success"><p><a href="https://www.wikihow.com/Format-a-USB-Flash-Drive-in-Ubuntu" target="_blank" rel="noopener">How to Format a USB Flash Drive in Ubuntu</a></p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> ubuntu工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iperf的使用</title>
      <link href="/5ed212d1/"/>
      <url>/5ed212d1/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><p><strong>1、背景</strong><br>开发板通过USB与PC相连，开发板会被枚举成USB网卡，通过网卡进行通信。通过USB连接后，开发板串口生成<code>usb0</code>网卡，内容如下：</p><figure class="highlight shell"><figcaption><span>开发板</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@android:/ # ifconfig -a</span><br><span class="line">usb0      Link encap:Ethernet  HWaddr 8a:18:0b:ee:24:78</span><br><span class="line">          inet addr:172.30.100.121  Bcast:172.30.255.255  Mask:255.255.0.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:16 errors:0 dropped:14 overruns:0 frame:0</span><br><span class="line">          TX packets:2 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:2461 TX bytes:144</span><br></pre></td></tr></table></figure><p>PC的ubuntu下识别到新的网卡<code>enp0s20f0u10</code>，内容如下：</p><figure class="highlight shell"><figcaption><span>ubuntu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enp0s20f0u10 Link encap:Ethernet  HWaddr de:3b:4e:04:3f:17  </span><br><span class="line">          inet6 addr: fe80::ecbb:42d7:4e7:a3c6/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:20 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:23 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:560 (560.0 B)  TX bytes:4396 (4.3 KB)</span><br></pre></td></tr></table></figure><p><code>iperf client</code>通常表示数据的发送者，所以这里PC的ubuntu做为client。<br><code>iperf server</code>表示数据的接收者，所以这里开发板做为server。<a id="more"></a></p><p><strong>2、测试TCP步骤</strong></p><ul><li><p>配置同一网段的ip：<br>在开发板串口配置<code>usb0</code>网卡的ip：<code>ifconfig usb0 192.168.4.1 netmask 255.255.255.0 up</code>；<br>在ubuntu配置<code>enp0s20f0u10</code>网卡的ip：<code>sudo ifconfig enp0s20f0u10 192.168.4.2 netmask 255.255.255.0 up</code>。</p></li><li><p>开发板配置server，端口号为80</p></li></ul><figure class="highlight shell"><figcaption><span>开发板</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@android:/ # ./var/iperf -s -p 80</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Server listening on TCP port 80</span><br><span class="line">TCP window size: 85.3 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br></pre></td></tr></table></figure><ul><li>ubuntu配置client</li></ul><figure class="highlight shell"><figcaption><span>ubuntu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~# iperf -c 192.168.4.1 -p 80</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Client connecting to 192.168.4.1, TCP port 80</span><br><span class="line">TCP window size: 85.0 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br></pre></td></tr></table></figure><ul><li>测试结果：</li></ul><p>当上面的步骤执行之后，可以看到测试的数据，server端log如下：<br></p><figure class="highlight shell"><figcaption><span>开发板</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@android:/ # ./var/iperf -s -p 80                                             </span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Server listening on TCP port 80</span><br><span class="line">TCP window size: 85.3 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  4] local 192.168.4.1 port 80 connected with 192.168.4.2 port 60906</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  4]  0.0-10.0 sec    186 MBytes    156 Mbits/sec</span><br></pre></td></tr></table></figure><p></p><p>client端log如下：</p><figure class="highlight shell"><figcaption><span>ubuntu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~# iperf -c 192.168.4.1 -p 80</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Client connecting to 192.168.4.1, TCP port 80</span><br><span class="line">TCP window size: 85.0 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  3] local 192.168.4.2 port 60906 connected with 192.168.4.1 port 80</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  3]  0.0-10.0 sec   186 MBytes   156 Mbits/sec</span><br></pre></td></tr></table></figure><p><strong>3、测试UDP步骤</strong><br>在上述命令的基础上加上<code>-u</code>的参数，指定UDP测试，UDP的测试结果为：</p><figure class="highlight shell"><figcaption><span>开发板</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@android:/ # ./var/iperf -s -p 80 -u</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Server listening on UDP port 80</span><br><span class="line">Receiving 1470 byte datagrams</span><br><span class="line">UDP buffer size:   224 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  3] local 192.168.4.1 port 80 connected with 192.168.4.2 port 59627</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth       Jitter   Lost/Total Datagrams</span><br><span class="line">[  3]  0.0-60.0 sec  7.50 MBytes  1.05 Mbits/sec  0.099 ms    0/ 5351 (0%)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>ubuntu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~# iperf -c 192.168.4.1 -p 80 -t 60 -u</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Client connecting to 192.168.4.1, UDP port 80</span><br><span class="line">Sending 1470 byte datagrams</span><br><span class="line">UDP buffer size:  208 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  3] local 192.168.4.2 port 59627 connected with 192.168.4.1 port 80</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  3]  0.0-60.0 sec  7.50 MBytes  1.05 Mbits/sec</span><br><span class="line">[  3] Sent 5351 datagrams</span><br><span class="line">[  3] Server Report:</span><br><span class="line">[  3]  0.0-60.0 sec  7.50 MBytes  1.05 Mbits/sec   0.098 ms    0/ 5351 (0%)</span><br></pre></td></tr></table></figure><p>上述得到UDP的带宽为 1.05Mb/s，明显少了很多， 这是因为默认情况下，iPerf将UDP客户端的带宽限制为每秒1 Mbit。可以通过以下命令测试UDP的带宽：</p><figure class="highlight shell"><figcaption><span>ubuntu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~# iperf -c 172.30.100.11 -p 80 -u -b 1000m</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Client connecting to 172.30.100.11, UDP port 80</span><br><span class="line">Sending 1470 byte datagrams</span><br><span class="line">UDP buffer size:  208 KByte (default)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  3] local 172.30.100.12 port 56174 connected with 172.30.100.11 port 80</span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  3]  0.0-10.0 sec   184 MBytes   155 Mbits/sec</span><br><span class="line">[  3] Sent 131516 datagrams</span><br><span class="line">[  3] Server Report:</span><br><span class="line">[  3]  0.0-10.0 sec   178 MBytes   149 Mbits/sec   0.198 ms 4429/131515 (3.4%)</span><br><span class="line">[  3]  0.0-10.0 sec  1 datagrams received out-of-order</span><br></pre></td></tr></table></figure><p><code>-b 1000m</code>告诉客户端我们希望尽可能达到每秒1000 Mbits的最大值。 <code>-b</code>标志仅在使用UDP连接时有效，因为iPerf未在TCP客户端上设置带宽限制。</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div class="note success"><p><a href="https://iperf.fr/" target="_blank" rel="noopener">官网</a><br><a href="https://iperf.fr/iperf-doc.php" target="_blank" rel="noopener">使用手册</a><br><a href="https://www.linode.com/docs/networking/diagnostics/install-iperf-to-diagnose-network-speed-in-linux/" target="_blank" rel="noopener">Network Throughput Testing with iPerf</a></p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>u-boot SPL启动流程</title>
      <link href="/1e031f74/"/>
      <url>/1e031f74/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="SPL简介"><a href="#SPL简介" class="headerlink" title="SPL简介"></a>SPL简介</h2><p>1、SPL是<code>Secondary Program Loader</code>，也就是第二阶段引导启动程序。<br>2、SPL是一套小的boot代码，主要负责初始化外部的DRAM和flash，然后引导启动u-boot。<br>3、SPL是在u-boot代码中，与u-boot共用一套代码，通过<code>CONFIG_SPL_XXX</code>来区分。</p><p>u-boot可以引导kernel，那么谁来引导u-boot呢？可以使用<code>Rom code(Boot rom)</code>引导u-boot，也可以使用<code>SPL</code>引导u-boot。两者之间有啥差别呢？<br>1、如果<code>Rom code</code>直接引导u-boot，那么<code>Rom code</code>必须能够初始化外部DRAM又或者内部的SRAM足够大能够启动u-boot；<br>2、如果做不到，那么只能通过SPL来过渡。<code>Rom code</code>从外设flash上固定的地址读取SPL到内部的SRAM上运行，SPL去初始化外部的DRAM，然后将u-boot从flash上拷贝到外部的DRAM并启动u-boot。下面讲讲u-boot SPL启动流程<a id="more"></a></p><hr><h2 id="启动流程介绍"><a href="#启动流程介绍" class="headerlink" title="启动流程介绍"></a>启动流程介绍</h2><p>1、嵌入式Linux的启动流程(带SPL)如下：<br>Rom code –&gt; SPL –&gt; u-boot –&gt; Linux kernel –&gt; file system –&gt; application<br><img src="https://ae01.alicdn.com/kf/HTB1XgDda7L0gK0jSZFA763A9pXae.png" alt="嵌入式Linux的启动流程(带SPL)"></p><p>2、PC的启动流程为：<br>BIOS -&gt; MBR -&gt; GRUB -&gt; kernel</p><hr><h2 id="u-boot-spl流程"><a href="#u-boot-spl流程" class="headerlink" title="u-boot-spl流程"></a>u-boot-spl流程</h2><p>基本环境如下：</p><ul><li>u-boot版本：2018.03</li><li>开发板：imx8qxp mek</li><li>u-boot配置：打开SPL</li><li>u-boot：表示不带SPL的u-boot</li><li>u-boot-spl：表示已配置上SPL的u-boot</li></ul><hr><h3 id="u-boot-spl入口"><a href="#u-boot-spl入口" class="headerlink" title="u-boot-spl入口"></a>u-boot-spl入口</h3><p>u-boot-spl的入口同u-boot一样，也都是始于<code>arch/arm/cpu/armv8/start.S</code>中的<code>_start</code> → <code>lowlevel_init</code> → <code>_main</code>的调用顺序。也就是说，这个过程，spl会去执行一遍，不带spl的u-boot也会去执行一遍。中间通过<code>CONFIG_SPL_XXX</code>的宏进行区分。</p><h4 id="main简要说明"><a href="#main简要说明" class="headerlink" title="_main简要说明"></a><code>_main</code>简要说明</h4><p>根据<code>_main</code>的简要说明，里面会根据SPL做差分，走不同的流程。<br>1、对于u-boot-spl：</p><ul><li><code>_main</code>中会设置堆栈地址<code>CONFIG_SPL_STACK</code>，根据memory map，该地址属于<code>OCRAM</code>。这里就可以证明SPL是运行在<code>OCRAM</code>中的。</li><li><code>_main</code>中调用<code>board/freescale/imx8qxp_mek/spl.c</code>的<code>board_init_f()</code>；<figure class="highlight c"><figcaption><span>board/freescale/imx8qxp_mek/spl.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">board_init_f</span><span class="params">(ulong dummy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* Clear global data */</span></span><br><span class="line">    <span class="built_in">memset</span>((<span class="keyword">void</span> *)gd, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">gd_t</span>));</span><br><span class="line"></span><br><span class="line">    arch_cpu_init();</span><br><span class="line"></span><br><span class="line">    board_early_init_f();</span><br><span class="line"></span><br><span class="line">    timer_init();</span><br><span class="line"></span><br><span class="line">    preloader_console_init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Clear the BSS. */</span></span><br><span class="line">    <span class="built_in">memset</span>(__bss_start, <span class="number">0</span>, __bss_end - __bss_start);</span><br><span class="line"></span><br><span class="line">    board_init_r(<span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>2、对于u-boot来说：</p><ul><li><code>_main</code>中会设置堆栈地址<code>CONFIG_SYS_INIT_SP_ADDR</code>，根据memory map，该地址属于外部DRAM地址。这里就可以证明u-boot是运行在外部DDR上；</li><li><code>_main</code>调用<code>common/board_f.c</code>的<code>board_init_f()</code>，这里面做了更多的事情，<figure class="highlight c"><figcaption><span>common/board_f.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">board_init_f</span><span class="params">(ulong boot_flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gd-&gt;flags = boot_flags;</span><br><span class="line">    gd-&gt;have_console = <span class="number">0</span>;</span><br><span class="line">                          </span><br><span class="line">    <span class="keyword">if</span> (initcall_run_list(init_sequence_f))</span><br><span class="line">        hang();</span><br><span class="line">   </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(CONFIG_ARM) &amp;&amp; !defined(CONFIG_SANDBOX) &amp;&amp; \</span></span><br><span class="line">        !defined(CONFIG_EFI_APP) &amp;&amp; !CONFIG_IS_ENABLED(X86_64)</span><br><span class="line">    <span class="comment">/* NOTREACHED - jump_to_copy() does not return */</span></span><br><span class="line">    hang();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="board-init-f-函数"><a href="#board-init-f-函数" class="headerlink" title="board_init_f()函数"></a><code>board_init_f()</code>函数</h4><p>1、对于u-boot-spl来说，在该函数中做了cpu、serial、timer、console的初始化，最终调用<code>common/spl/spl.c</code>中的<code>board_init_r()</code>函数。<br>2、对于u-boot来说，u-boot将需要在<code>board_init_f</code>中初始化的内容，抽象为一系列API，使用<code>init_sequence_f[]</code>数组定义。这些API由u-boot声明，由平台的开发者根据实际情况实现。在<code>_main</code>的最后，会调用<code>common/board_r.c</code>的<code>board_init_r()</code>函数。</p><hr><h4 id="board-init-r-函数"><a href="#board-init-r-函数" class="headerlink" title="board_init_r()函数"></a><code>board_init_r()</code>函数</h4><p>1、对于u-boot-spl来说，这个函数做了以下几件事：</p><ul><li>定义<code>spl_boot_list[]</code>，该数组存放从哪个boot device去启动，比如说SPI、nand、emmc等；</li><li>定义<code>struct spl_image_info spl_image</code>，用来标记uboot镜像存在哪个位置，启动地址是哪里，详见下面的定义；</li></ul><figure class="highlight c"><figcaption><span>include/spl.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spl_image_info</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">    u8 os;</span><br><span class="line">    <span class="keyword">uintptr_t</span> load_addr;</span><br><span class="line">    <span class="keyword">uintptr_t</span> entry_point;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> CONFIG_IS_ENABLED(LOAD_FIT)</span></span><br><span class="line">    <span class="keyword">void</span> *fdt_addr;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    u32 size;</span><br><span class="line">    u32 flags;</span><br><span class="line">    <span class="keyword">void</span> *arg;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DUAL_BOOTLOADER</span></span><br><span class="line">    <span class="keyword">uint64_t</span> rbindex;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>如果定义了<code>CONFIG_SPL_OS_BOOT</code>宏，那么就去调用<code>dram_init_banksize()</code>函数做DRAM的初始化。这个宏表示直接跳过u-boot去启动kernel；</li><li>调用<code>mem_malloc_init()</code>为malloc分配空间，从<code>CONFIG_SYS_SPL_MALLOC_START</code>开始，大小为<code>CONFIG_SYS_SPL_MALLOC_SIZE</code>；</li><li>调用<code>spl_init()</code>；</li><li>调用<code>spl_board_init()</code>，该函数在<code>board/freescale/imx8qxp_mek/spl.c</code>中定义，主要做了<code>spl_dram_init()</code>的DDR初始化；</li><li>调用<code>board_boot_order()</code>去获取启动设备；</li><li>调用<code>boot_from_devices()</code>根据得到启动设备，从对应的设备中加载镜像到DDR中，使用<code>spl_load_image()</code>进行load；</li></ul><p>在<code>common/spl/</code>目录下定义了好几个启动设备，包括<code>spl_fat.c</code>、<code>spl_mmc.c</code>、<code>spl_nand.c</code>等。在这些文件中都通过<code>SPL_LOAD_IMAGE_METHOD</code>来定义<code>struct spl_image_info</code>的详细内容，并且实现<code>load_image</code>的实体函数，来将镜像从特定的boot device load到DDR中。<br></p><figure class="highlight c"><figcaption><span>common/spl/spl_mmc.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SPL_LOAD_IMAGE_METHOD(<span class="string">"MMC1"</span>, <span class="number">0</span>, BOOT_DEVICE_MMC1, spl_mmc_load_image);</span><br></pre></td></tr></table></figure><p></p><figure class="highlight c"><figcaption><span>include/spl.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Holds information about a way of loading an SPL image</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* @name: User-friendly name for this method (e.g. "MMC")</span></span><br><span class="line"><span class="comment">* @boot_device: Boot device that this loader supports</span></span><br><span class="line"><span class="comment">* @load_image: Function to call to load image</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spl_image_info</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">    u8 os;</span><br><span class="line">    <span class="keyword">uintptr_t</span> load_addr;</span><br><span class="line">    <span class="keyword">uintptr_t</span> entry_point;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> CONFIG_IS_ENABLED(LOAD_FIT)</span></span><br><span class="line">    <span class="keyword">void</span> *fdt_addr;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    u32 size;</span><br><span class="line">    u32 flags;</span><br><span class="line">    <span class="keyword">void</span> *arg;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DUAL_BOOTLOADER</span></span><br><span class="line">    <span class="keyword">uint64_t</span> rbindex;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Holds information about a way of loading an SPL image</span></span><br><span class="line"><span class="comment">*               </span></span><br><span class="line"><span class="comment">* @name: User-friendly name for this method (e.g. "MMC")</span></span><br><span class="line"><span class="comment">* @boot_device: Boot device that this loader supports</span></span><br><span class="line"><span class="comment">* @load_image: Function to call to load image</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">spl_image_loader</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SPL_LIBCOMMON_SUPPORT</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">    uint boot_device;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * load_image() - Load an SPL image</span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * @spl_image: place to put image information</span></span><br><span class="line"><span class="comment">     * @bootdev: describes the boot device to load from</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> (*load_image)(struct spl_image_info *spl_image,</span><br><span class="line">              struct spl_boot_device *bootdev);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Declare an SPL image loader */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPL_LOAD_IMAGE(__name)                  \</span></span><br><span class="line">    ll_entry_declare(struct spl_image_loader, __name, spl_image_loader)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* _priority is the priority of this method, 0 meaning it will be the top</span></span><br><span class="line"><span class="comment">* choice for this device, 9 meaning it is the bottom choice.</span></span><br><span class="line"><span class="comment">* _boot_device is the BOOT_DEVICE_... value</span></span><br><span class="line"><span class="comment">* _method is the load_image function to call</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SPL_LOAD_IMAGE_METHOD(_name, _priority, _boot_device, _method) \</span></span><br><span class="line">    SPL_LOAD_IMAGE(_method ## _priority ## _boot_device) = &#123; \</span><br><span class="line">        .name = _name, \  </span><br><span class="line">        .boot_device = _boot_device, \</span><br><span class="line">        .load_image = _method, \</span><br><span class="line">    &#125;</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line">#define SPL_LOAD_IMAGE_METHOD(_name, _priority, _boot_device, _method) \</span><br><span class="line">    SPL_LOAD_IMAGE(_method ## _priority ## _boot_device) = &#123; \</span><br><span class="line">        .boot_device = _boot_device, \</span><br><span class="line">        .load_image = _method, \</span><br><span class="line">    &#125;                     </span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><ul><li>调用<code>spl_load_image()</code>函数从对应的boot device将镜像信息存放到<code>spl_image</code>中，</li></ul><figure class="highlight c"><figcaption><span>common/spl/spl.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">spl_load_image</span><span class="params">(struct spl_image_info *spl_image,</span></span></span><br><span class="line"><span class="function"><span class="params">              struct spl_image_loader *loader)</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">spl_boot_device</span> <span class="title">bootdev</span>;</span></span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    bootdev.boot_device = loader-&gt;boot_device;  </span><br><span class="line">    bootdev.boot_device_name = <span class="literal">NULL</span>;</span><br><span class="line">   </span><br><span class="line">    ret = loader-&gt;load_image(spl_image, &amp;bootdev);</span><br><span class="line">    <span class="keyword">return</span> ret;           </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>load完镜像后，默认会去调用<code>spl_board_prepare_for_boot()</code>和<code>jump_to_image_no_args()</code>去<code>jumping to U-Boot</code>。至此，u-boot-spl的流程就走完了，接下来就是走u-boot的流程。</li></ul><hr><h2 id="imx8x的做法"><a href="#imx8x的做法" class="headerlink" title="imx8x的做法"></a>imx8x的做法</h2><p>根据[i.MX_Linux_User’s_Guide.pdf]的说明，</p><blockquote><p>On i.MX 8M Quad and 8M Mini, the second program loader (SPL) is enabled in U-Boot. SPL is implemented as the firstlevel bootloader running on TCML (due to OCRAM size limitation). It is used to initialize DDR and load U-Boot, U-Boot DTB, Arm trusted firmware, and TEE OS (optional) from the boot device into the memory. After SPL completes loading the images, it jumps to the Arm trusted firmware BL31 directly. The BL31 starts the optional BL32 (TEE OS) and BL33 (u-boot) for continue booting kernel.</p></blockquote><p>在i.MX8MQ 和 i.MX8MM，在u-boot中是使能SPL。SPL跑在<code>TCML(Tightly-Coupled Memory)</code>内存上，SPL用于初始化DDR并从flash上加载u-boot、u-boot dtb、ATF、TEE到DDR上。SPL加载镜像完毕之后，直接跳转到ATF BL31阶段，BL31再去启动BL32(TEE)和BL33(u-boot)，u-boot再去启动kernel。</p><p><strong>注：</strong>在i.MX8QXP的CPU上，它的<code>Rom code</code>在上电的时候会根据boot mode从对应的flash上特定的位置读取到flash.bin，将打包到其中的<code>dcd cfg</code>的DDR配置读取出来然后初始化外部的DRAM。</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><div class="note success"><p><a href="https://stackoverflow.com/questions/31244862/what-is-the-use-of-spl-secondary-program-loader/31252989" target="_blank" rel="noopener">what is the use of SPL</a><br><a href="https://blog.csdn.net/ooonebook/article/details/52957395" target="_blank" rel="noopener">uboot流程——uboot-spl代码流程</a><br><a href="http://wowothink.com/146db8db/">u-boot启动流程</a></p></div><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> u-boot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>uboot fastboot原理</title>
      <link href="/5ade33b8/"/>
      <url>/5ade33b8/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>本文介绍了fastboot协议，在uboot中如何配置支持fastboot，uboot中fastboot的实现流程以及fastboot命令如何使用。</p><h2 id="fastboot简介"><a href="#fastboot简介" class="headerlink" title="fastboot简介"></a>fastboot简介</h2><p>1、fastboot协议是一种通过USB或以太网<strong>与引导加载程序通信的机制</strong>。 它的设计非常简单，可以在各种设备和运行Linux，macOS或Windows的主机上使用。主要是PC机通过fastboot协议与bootloader通信。<br>我们可以理解在uboot中运行fastboot的为客户端，在PC端（ubuntu）运行fastboot的为服务器端，两者之间的通信走fastboot协议。<br><img src="https://ae01.alicdn.com/kf/HTB1Nw5TdRaE3KVjSZLe760sSFXaZ.png" alt="fastboot协议"><a id="more"></a></p><p>2、fastboot协议最基本的要求：</p><ul><li>2个bulk端点(BULK IN/OUT)，可以通过USB枚举信息看到详细的信息：</li></ul><figure class="highlight shell"><figcaption><span>查看usb设备</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~ lsusb -d 0525:a4a5 -v</span><br><span class="line"></span><br><span class="line">Bus 001 Device 006: ID 0525:a4a5 Netchip Technology, Inc. Pocketbook Pro 903</span><br><span class="line">Device Descriptor:</span><br><span class="line">  bLength                18</span><br><span class="line">  bDescriptorType         1</span><br><span class="line">  bcdUSB               2.00</span><br><span class="line">  bDeviceClass            0 (Defined at Interface level)</span><br><span class="line">  bDeviceSubClass         0</span><br><span class="line">  bDeviceProtocol         0</span><br><span class="line">  bMaxPacketSize0        64</span><br><span class="line">  idVendor           0x0525 Netchip Technology, Inc.</span><br><span class="line">  idProduct          0xa4a5 Pocketbook Pro 903</span><br><span class="line">  bcdDevice            2.21</span><br><span class="line">  iManufacturer           1 FSL</span><br><span class="line">  iProduct                2 USB download gadget</span><br><span class="line">  iSerial                 3 0d123198538fcadc</span><br><span class="line">  bNumConfigurations      1</span><br><span class="line">  Configuration Descriptor:</span><br><span class="line">    bLength                 9</span><br><span class="line">    bDescriptorType         2</span><br><span class="line">    wTotalLength           32</span><br><span class="line">    bNumInterfaces          1</span><br><span class="line">    bConfigurationValue     1</span><br><span class="line">    iConfiguration          2 USB download gadget</span><br><span class="line">    bmAttributes         0xc0</span><br><span class="line">      Self Powered</span><br><span class="line">    MaxPower                2mA</span><br><span class="line">    Interface Descriptor:</span><br><span class="line">      bLength                 9</span><br><span class="line">      bDescriptorType         4</span><br><span class="line">      bInterfaceNumber        0</span><br><span class="line">      bAlternateSetting       0</span><br><span class="line">      bNumEndpoints           2</span><br><span class="line">      bInterfaceClass       255 Vendor Specific Class</span><br><span class="line">      bInterfaceSubClass     66</span><br><span class="line">      bInterfaceProtocol      3</span><br><span class="line">      iInterface              4 Android Fastboot</span><br><span class="line">      Endpoint Descriptor:</span><br><span class="line">        bLength                 7</span><br><span class="line">        bDescriptorType         5</span><br><span class="line">        bEndpointAddress     0x81  EP 1 IN</span><br><span class="line">        bmAttributes            2</span><br><span class="line">          Transfer Type            Bulk</span><br><span class="line">          Synch Type               None</span><br><span class="line">          Usage Type               Data</span><br><span class="line">        wMaxPacketSize     0x0200  1x 512 bytes</span><br><span class="line">        bInterval               0</span><br><span class="line">      Endpoint Descriptor:</span><br><span class="line">        bLength                 7</span><br><span class="line">        bDescriptorType         5</span><br><span class="line">        bEndpointAddress     0x02  EP 2 OUT</span><br><span class="line">        bmAttributes            2</span><br><span class="line">          Transfer Type            Bulk</span><br><span class="line">          Synch Type               None</span><br><span class="line">          Usage Type               Data</span><br><span class="line">        wMaxPacketSize     0x0200  1x 512 bytes</span><br><span class="line">        bInterval               0</span><br><span class="line">Device Qualifier (for other device speed):</span><br><span class="line">  bLength                10</span><br><span class="line">  bDescriptorType         6</span><br><span class="line">  bcdUSB               2.00</span><br><span class="line">  bDeviceClass            0 (Defined at Interface level)</span><br><span class="line">  bDeviceSubClass         0</span><br><span class="line">  bDeviceProtocol         0</span><br><span class="line">  bMaxPacketSize0        64</span><br><span class="line">  bNumConfigurations      1</span><br><span class="line">Device Status:     0x0001</span><br><span class="line">  Self Powered</span><br></pre></td></tr></table></figure><ul><li>USB full-speed最大包为64Bytes，high-speed最大包为512Bytes；</li><li>该协议完全由主机驱动和同步（与多通道，双向，异步ADB协议不同）。</li></ul><hr><h2 id="uboot配置fastboot协议"><a href="#uboot配置fastboot协议" class="headerlink" title="uboot配置fastboot协议"></a>uboot配置fastboot协议</h2><p>关于fastboot相关宏的解释，可以参考<code>cmd/fastboot/Kconfig</code>文件。下面说一下在uboot中配置支持fastboot。<br>1、uboot中已实现对fastboot协议的支持：</p><ul><li><code>drivers/usb/gadget/fastboot.c</code>：fastboot usb function源码；</li><li><code>doc/README.android-fastboot</code>：fastboot使能说明文档；</li><li><code>doc/README.android-fastboot-protocol</code>：fastboot协议说明文档；</li></ul><p>2、uboot中要使能fastboot，需要在板级配置打开以下的宏：<br></p><figure class="highlight makefile"><figcaption><span>使能fastboot</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_FASTBOOT</span><br><span class="line">CONFIG_USB_FUNCTION_FASTBOOT</span><br><span class="line">CONFIG_CMD_FASTBOOT</span><br><span class="line">CONFIG_ANDROID_BOOT_IMAGE</span><br></pre></td></tr></table></figure><p></p><p>uboot在命令行中可以通过fastboot命令进入fastboot模式。</p><p>3、使能fastboot usb gadget<br>因为fastboot协议是基于usb gadget，所以需要打开或配置以下几个宏：<br></p><figure class="highlight makefile"><figcaption><span>配置usb gadget</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_USB_GADGET_DOWNLOAD</span><br><span class="line">CONFIG_USB_GADGET_VENDOR_NUM</span><br><span class="line">CONFIG_USB_GADGET_PRODUCT_NUM</span><br><span class="line">CONFIG_USB_GADGET_MANUFACTURER</span><br></pre></td></tr></table></figure><p></p><p>这里面指定的<code>VID</code>和<code>PID</code>必须要在<code>fastboot client</code>中能找到，如果没有，也可以用ubuntu fastboot命令的以下选项指定设备。<br></p><figure class="highlight shell"><figcaption><span>fastboot命令指定特定的设备</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-s &lt;specific device&gt;                     specify device serial number</span><br><span class="line">                                           or path to device port</span><br><span class="line">-i &lt;vendor id&gt;                           specify a custom USB vendor id</span><br><span class="line">-p &lt;product&gt;                             specify product name</span><br></pre></td></tr></table></figure><p></p><p>4、配置缓冲区地址和大小<br>fastboot需要一块大的内存区域用来下载，需要配置<code>CONFIG_FASTBOOT_BUF_ADDR</code>缓冲区的起始地址以及<code>CONFIG_FASTBOOT_BUF_SIZE</code>大小，这两个值决定了你可以通过fastboot烧写多大的镜像。<br></p><figure class="highlight makefile"><figcaption><span>配置缓冲区地址和大小</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_FASTBOOT_BUF_ADDR=0x82800000</span><br><span class="line">CONFIG_FASTBOOT_BUF_SIZE=0x40000000</span><br></pre></td></tr></table></figure><p></p><p>5、配置<code>fastboot flash</code>命令的支持<br>如果想要通过<code>fastboot flash</code>命令烧写到flash上，必须打开<code>CONFIG_FASTBOOT_FLASH</code>相关的配置。比如我板子上使用的是eMMC，必须使能如下的宏：<br></p><figure class="highlight makefile"><figcaption><span>配置支持flash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_FASTBOOT_FLASH=y</span><br><span class="line">CONFIG_FASTBOOT_FLASH_MMC=y</span><br><span class="line">CONFIG_FASTBOOT_FLASH_MMC_DEV=0</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="uboot中fastboot的实现流程"><a href="#uboot中fastboot的实现流程" class="headerlink" title="uboot中fastboot的实现流程"></a>uboot中fastboot的实现流程</h2><p><a href="http://wowothink.com/2e4a33d4/">imx8 uuu</a>基于fastboot协议进行镜像的烧写，以下的分析基于NXP提供的4.14.98_ga版本。</p><h3 id="uboot中fastboot命令"><a href="#uboot中fastboot命令" class="headerlink" title="uboot中fastboot命令"></a>uboot中fastboot命令</h3><figure class="highlight c"><figcaption><span>cmd/fastboot.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_fastboot</span><span class="params">(<span class="keyword">cmd_tbl_t</span> *cmdtp, <span class="keyword">int</span> flag, <span class="keyword">int</span> argc, <span class="keyword">char</span> *<span class="keyword">const</span> argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> controller_index;</span><br><span class="line">    <span class="keyword">char</span> *usb_controller;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> CMD_RET_USAGE;</span><br><span class="line"></span><br><span class="line">    usb_controller = argv[<span class="number">1</span>];</span><br><span class="line">    controller_index = simple_strtoul(usb_controller, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_FASTBOOT_USB_DEV</span></span><br><span class="line">    controller_index = CONFIG_FASTBOOT_USB_DEV;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ret = board_usb_init(controller_index, USB_INIT_DEVICE);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        pr_err(<span class="string">"USB init failed: %d"</span>, ret);</span><br><span class="line">        <span class="keyword">return</span> CMD_RET_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g_dnl_clear_detach();</span><br><span class="line">    ret = g_dnl_register(<span class="string">"usb_dnl_fastboot"</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!g_dnl_board_usb_cable_connected()) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"\rUSB cable not detected.\n"</span> \</span><br><span class="line">             <span class="string">"Command exit.\n"</span>);</span><br><span class="line">        ret = CMD_RET_FAILURE;</span><br><span class="line">        <span class="keyword">goto</span> <span class="built_in">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (g_dnl_detach())</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (ctrlc())</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        usb_gadget_handle_interrupts(controller_index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = CMD_RET_SUCCESS;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>:</span><br><span class="line">    g_dnl_unregister();</span><br><span class="line">    g_dnl_clear_detach();</span><br><span class="line">    board_usb_cleanup(controller_index, USB_INIT_DEVICE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、首先在uboot命令行执行<code>fastboot x</code>，指定第<code>x</code>个usb controller，使用这个controller进行通信，如果没有，默认使用<code>CONFIG_FASTBOOT_USB_DEV</code>指定的usb controller；<br>2、然后调用<code>board_usb_init()</code>函数做usb <strong>device</strong> controller的初始化，这个函数在<code>board/freescale/imx8qxp_mek.c</code>中定义。在NXP的BSP中，这个函数如果没有打开<code>CONFIG_USB_CDNS3_GADGET</code>的话就是个空函数。<br>为什么呢？我的理解是NXP使用imx uuu是使用usb0(chipidea)做为下载口，当将板子设置为SDP模式，rom code就会去初始化usb0 controller，并且配置为hid设备。因此，如果在SDP模式下，usb0 controller就无需初始化了。<br>3、调用<code>g_dnl_register()</code>函数注册一个名为<code>usb_dnl_fastboot</code>的<strong>usb复合设备</strong>。<br></p><figure class="highlight c"><figcaption><span>drivers/usb/gadget/g_dnl.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*      </span></span><br><span class="line"><span class="comment">* NOTICE:  </span></span><br><span class="line"><span class="comment">* Registering via USB function name won't be necessary after rewriting</span></span><br><span class="line"><span class="comment">* g_dnl to support multiple USB functions.</span></span><br><span class="line"><span class="comment">*/</span>     </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g_dnl_register</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    </span><br><span class="line">    debug(<span class="string">"%s: g_dnl_driver.name = %s\n"</span>, __func__, name);</span><br><span class="line">    g_dnl_driver.name = name;</span><br><span class="line">    </span><br><span class="line">    ret = usb_composite_register(&amp;g_dnl_driver);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s: failed!, error: %d\n"</span>, __func__, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><ul><li>在这个文件中配置了设备描述符等信息以及绑定function。</li><li>uboot中的这一套usb composite framework与kernel的一样，后续将会出一个关于这个框架的文章。可以看看我之前的文章<a href="https://blog.csdn.net/encourage2011/article/details/75944295" target="_blank" rel="noopener">Androidadb驱动实现原理</a> 关于usb复合设备的注册是大同小异的。</li><li>在这个复合设备中，会依次查找绑定的usb function。在<code>drivers/usb/gadget/f_fastboot.c</code>中调用了<code>DECLARE_GADGET_BIND_CALLBACK(usb_dnl_fastboot, fastboot_add);</code>，<strong>这就将fastboot的usb function与g_dnl的usb composite device绑定起来了。</strong></li></ul><figure class="highlight c"><figcaption><span>drivers/usb/gadget/g_dnl.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">g_dnl_do_config</span><span class="params">(struct usb_configuration *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *s = c-&gt;cdev-&gt;driver-&gt;name;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">g_dnl_bind_callback</span> *<span class="title">callback</span> = <span class="title">g_dnl_bind_callback_first</span>();</span></span><br><span class="line"></span><br><span class="line">    debug(<span class="string">"%s: configuration: 0x%p composite dev: 0x%p\n"</span>,</span><br><span class="line">          __func__, c, c-&gt;cdev);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; callback != g_dnl_bind_callback_end(); callback++)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s, callback-&gt;usb_function_name))</span><br><span class="line">            <span class="keyword">return</span> callback-&gt;fptr(c);</span><br><span class="line">    <span class="keyword">return</span> -ENODEV;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>include/g_dnl.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">* @usb_fname: unescaped USB function name</span></span><br><span class="line"><span class="comment">* @callback_ptr: bind callback, one per function name</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DECLARE_GADGET_BIND_CALLBACK(usb_fname, callback_ptr) \</span></span><br><span class="line">    ll_entry_declare(struct g_dnl_bind_callback, \</span><br><span class="line">            __usb_function_name_##usb_fname, \</span><br><span class="line">            g_dnl_bind_callbacks) = &#123; \</span><br><span class="line">                .usb_function_name = #usb_fname, \</span><br><span class="line">                .fptr = callback_ptr \</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>4、在这之后就进入<code>while(1)</code>的循环，如果碰到<code>g_dnl</code>驱动卸载掉或者<code>ctrl + c</code>就跳出，否则调用<code>usb_gadget_handle_interrupts()</code>处理usb中断(我这里使用到的是chipidea udc)。<strong>至此，当你在uboot命令行执行<code>fastboot 1</code>后，接下来全部都是在处理usb ep的中断，也就是处理PC端发送过来的指令。</strong><br></p><figure class="highlight c"><figcaption><span>drivers/usb/gadget/ci_udc.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">usb_gadget_handle_interrupts</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u32 value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ci_udc</span> *<span class="title">udc</span> = (<span class="title">struct</span> <span class="title">ci_udc</span> *)<span class="title">controller</span>.<span class="title">ctrl</span>-&gt;<span class="title">hcor</span>;</span></span><br><span class="line">    value = readl(&amp;udc-&gt;usbsts);</span><br><span class="line">    <span class="keyword">if</span> (value)</span><br><span class="line">        udc_irq();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>更一般的，这里指就是usb endpoint的中断。具体的，就是处理fastbootusb function中指定的usb endpoint的中断。其中<code>rx_handler_command()</code>函数用来处理PC端发送过来的数据，<code>fastboot_complete()</code>用来处理板子发送给PC端的数据。<br></p><figure class="highlight c"><figcaption><span>drivers/usb/gadget/f_fastboot.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fastboot_set_alt</span><span class="params">(struct usb_function *f,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">unsigned</span> interface, <span class="keyword">unsigned</span> alt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    f_fb-&gt;out_req = fastboot_start_ep(f_fb-&gt;out_ep);</span><br><span class="line">    <span class="keyword">if</span> (!f_fb-&gt;out_req) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"failed to alloc out req\n"</span>);</span><br><span class="line">        ret = -EINVAL;   </span><br><span class="line">        <span class="keyword">goto</span> err;        </span><br><span class="line">    &#125;</span><br><span class="line">    f_fb-&gt;out_req-&gt;complete = rx_handler_command;</span><br><span class="line">  </span><br><span class="line">    d = fb_ep_desc(gadget, &amp;fs_ep_in, &amp;hs_ep_in, &amp;ss_ep_in);</span><br><span class="line">    ret = usb_ep_enable(f_fb-&gt;in_ep, d);</span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"failed to enable in ep\n"</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;        </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    f_fb-&gt;in_req = fastboot_start_ep(f_fb-&gt;in_ep);</span><br><span class="line">    <span class="keyword">if</span> (!f_fb-&gt;in_req) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"failed alloc req in\n"</span>);</span><br><span class="line">        ret = -EINVAL;</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f_fb-&gt;in_req-&gt;complete = fastboot_complete;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="fastboot支持的参数"><a href="#fastboot支持的参数" class="headerlink" title="fastboot支持的参数"></a>fastboot支持的参数</h3><p>在前面，我们说到<code>rx_handler_command()</code>函数用来处理PC端发送过来的数据，其中<code>cmd_dispatch_info[]</code>数组定义了一系列fastboot所支持的参数列表以及对应的处理函数。<br></p><figure class="highlight c"><figcaption><span>drivers/usb/gadget/f_fastboot.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cmd_dispatch_info</span> <span class="title">cmd_dispatch_info</span>[] = &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_FSL_FASTBOOT</span></span><br><span class="line">    &#123;</span><br><span class="line">        .cmd = <span class="string">"reboot-bootloader"</span>,</span><br><span class="line">        .cb = cb_reboot_bootloader,    </span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .cmd = <span class="string">"upload"</span>,</span><br><span class="line">        .cb = cb_upload,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .cmd = <span class="string">"get_staged"</span>,</span><br><span class="line">        .cb = cb_upload,</span><br><span class="line">    &#125;,</span><br><span class="line">#ifdef CONFIG_FASTBOOT_LOCK</span><br><span class="line">    &#123;</span><br><span class="line">        .cmd = <span class="string">"flashing"</span>,</span><br><span class="line">        .cb = cb_flashing,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .cmd = <span class="string">"oem"</span>,</span><br><span class="line">        .cb = cb_flashing,</span><br><span class="line">    &#125;,</span><br><span class="line">#endif</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="fastboot环境变量配置"><a href="#fastboot环境变量配置" class="headerlink" title="fastboot环境变量配置"></a>fastboot环境变量配置</h3><p>前面我们说过，需要配置<code>CONFIG_FASTBOOT_BUF_ADDR</code>缓冲区的起始地址以及<code>CONFIG_FASTBOOT_BUF_SIZE</code>大小，这个其实是为了配置一个名为<code>fastboot_buffer</code>的环境变量。<br></p><figure class="highlight c"><figcaption><span>drivers/usb/gadget/f_fastboot.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parameters_setup</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    interface.nand_block_size = <span class="number">0</span>;</span><br><span class="line">    interface.transfer_buffer =</span><br><span class="line">                (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)env_get_ulong(<span class="string">"fastboot_buffer"</span>, <span class="number">16</span>, CONFIG_FASTBOOT_BUF_ADDR);</span><br><span class="line">    interface.transfer_buffer_size =</span><br><span class="line">                CONFIG_FASTBOOT_BUF_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="uuu进入fastboot模式"><a href="#uuu进入fastboot模式" class="headerlink" title="uuu进入fastboot模式"></a>uuu进入fastboot模式</h3><p><code>CONFIG_MFG_ENV_SETTINGS_DEFAULT</code>中会执行<code>fastboot 0</code>进入fastboot下载模式，等待与PC之间的通信。<br></p><figure class="highlight c"><figcaption><span>include/configs/imx_env.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONFIG_MFG_ENV_SETTINGS_DEFAULT \</span></span><br><span class="line">    <span class="string">"mfgtool_args=setenv bootargs console=$&#123;console&#125;,$&#123;baudrate&#125; "</span> \</span><br><span class="line">        <span class="string">"rdinit=/linuxrc "</span> \</span><br><span class="line">        <span class="string">"clk_ignore_unused "</span>\</span><br><span class="line">        <span class="string">"\0"</span> \</span><br><span class="line">    <span class="string">"kboot="</span>MFG_BOOT_CMD<span class="string">"\0"</span>\</span><br><span class="line">    <span class="string">"bootcmd_mfg=run mfgtool_args;"</span> \</span><br><span class="line">        <span class="string">"if iminfo $&#123;initrd_addr&#125;; then "</span> \</span><br><span class="line">            <span class="string">"if test $&#123;tee&#125; = yes; then "</span> \</span><br><span class="line">                <span class="string">"bootm $&#123;tee_addr&#125; $&#123;initrd_addr&#125; $&#123;fdt_addr&#125;; "</span> \</span><br><span class="line">            <span class="string">"else "</span> \</span><br><span class="line">                MFG_BOOT_CMD <span class="string">"$&#123;loadaddr&#125; $&#123;initrd_addr&#125; $&#123;fdt_addr&#125;; "</span> \</span><br><span class="line">            <span class="string">"fi; "</span> \</span><br><span class="line">        <span class="string">"else "</span> \</span><br><span class="line">            <span class="string">"echo \"Run fastboot ...\"; fastboot 0; "</span>  \</span><br><span class="line">        <span class="string">"fi;\0"</span> \</span><br><span class="line">   </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p></p><p>各个宏之间的关系如下：<br></p><figure class="highlight c"><figcaption><span>宏之间的关系</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">include/env_default.h</span><br><span class="line">CONFIG_EXTRA_ENV_SETTINGS</span><br><span class="line"></span><br><span class="line">include/configs/imx8qxp_mek.h</span><br><span class="line">CONFIG_MFG_ENV_SETTINGS</span><br><span class="line"></span><br><span class="line">include/configs/imx_env.h</span><br><span class="line">CONFIG_MFG_ENV_SETTINGS_DEFAULT</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="ubuntu下载fastboot工具"><a href="#ubuntu下载fastboot工具" class="headerlink" title="ubuntu下载fastboot工具"></a>ubuntu下载fastboot工具</h2><p>前面在uboot中配置支持fastboot，接下来要在PC端下载fastboot工具，ubuntu使用如下命令下载。这之后就可以在PC端使用fastboot命令与uboot通信并且执行相关的操作了。<br></p><figure class="highlight bash"><figcaption><span>ubuntu下载fastboot</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install android-tools-fastboot</span><br></pre></td></tr></table></figure><p></p><p>查看fastboot命令的使用：<br></p><figure class="highlight bash"><figcaption><span>fastboot help</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">usage: fastboot [ &lt;option&gt; ] &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line">commands:</span><br><span class="line">  update &lt;filename&gt;                        reflash device from update.zip</span><br><span class="line">  flashall                                 flash boot, system, vendor and <span class="keyword">if</span> found,</span><br><span class="line">                                           recovery</span><br><span class="line">  flash &lt;partition&gt; [ &lt;filename&gt; ]         write a file to a flash partition</span><br><span class="line">  erase &lt;partition&gt;                        erase a flash partition</span><br><span class="line">  format[:[&lt;fs <span class="built_in">type</span>&gt;][:[&lt;size&gt;]] &lt;partition&gt; format a flash partition.</span><br><span class="line">                                           Can override the fs <span class="built_in">type</span> and/or</span><br><span class="line">                                           size the bootloader reports.</span><br><span class="line">  getvar &lt;variable&gt;                        display a bootloader variable</span><br><span class="line">  boot &lt;kernel&gt; [ &lt;ramdisk&gt; [ &lt;second&gt; ] ] download and boot kernel</span><br><span class="line">  flash:raw boot &lt;kernel&gt; [ &lt;ramdisk&gt; [ &lt;second&gt; ] ] create bootimage and</span><br><span class="line">                                           flash it</span><br><span class="line">  devices                                  list all connected devices</span><br><span class="line">  <span class="built_in">continue</span>                                 <span class="built_in">continue</span> with autoboot</span><br><span class="line">  reboot                                   reboot device normally</span><br><span class="line">  reboot-bootloader                        reboot device into bootloader</span><br><span class="line">  <span class="built_in">help</span>                                     show this <span class="built_in">help</span> message</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">  -w                                       erase userdata and cache (and format</span><br><span class="line">                                           <span class="keyword">if</span> supported by partition <span class="built_in">type</span>)</span><br><span class="line">  -u                                       <span class="keyword">do</span> not first erase partition before</span><br><span class="line">                                           formatting</span><br><span class="line">  -s &lt;specific device&gt;                     specify device serial number</span><br><span class="line">                                           or path to device port</span><br><span class="line">  -l                                       with <span class="string">"devices"</span>, lists device paths</span><br><span class="line">  -p &lt;product&gt;                             specify product name</span><br><span class="line">  -c &lt;cmdline&gt;                             override kernel commandline</span><br><span class="line">  -i &lt;vendor id&gt;                           specify a custom USB vendor id</span><br><span class="line">  -b &lt;base_addr&gt;                           specify a custom kernel base address.</span><br><span class="line">                                           default: 0x10000000</span><br><span class="line">  -n &lt;page size&gt;                           specify the nand page size.</span><br><span class="line">                                           default: 2048</span><br><span class="line">  -S &lt;size&gt;[K|M|G]                         automatically sparse files greater</span><br><span class="line">                                           than size.  0 to <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><p></p><hr><h2 id="adb与fastboot的区别"><a href="#adb与fastboot的区别" class="headerlink" title="adb与fastboot的区别"></a>adb与fastboot的区别</h2><p>Android设备和PC之间的协议通信，除了<code>fastboot</code>协议还有使用<code>adb</code>协议。</p><ul><li><code>adb</code>用于Android设备系统起来后的调试，允许访问Android系统。</li><li><code>fastboot</code>用于Android设备开发过程中刷写镜像使用以及Android设备起不来进入fastboot模式救砖使用，对于线刷来说(Android设备与PC机通过USB线连接)。</li><li>两个协议都是将Android设备配置为USB Gadget，PC做为USB Host，通过USB进行通信，只是一个走的是<code>adb</code>协议，一个走的是<code>fastboot</code>协议，两者之间的角色定位不同。</li></ul><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.<a href="https://android.googlesource.com/platform/system/core/+/master/fastboot/" target="_blank" rel="noopener">fastboot官方文档</a><br>2.<a href="https://github.com/u-boot/u-boot/blob/master/doc/README.android-fastboot" target="_blank" rel="noopener">u-boot/doc/README.android-fastboot</a><br>3.<a href="http://kernel.meizu.com/samsun-uboot-fastboot-command.html" target="_blank" rel="noopener">samsung uboot fastboot command</a><br>4.<a href="https://blog.csdn.net/oqqHuTu12345678/article/details/72236431" target="_blank" rel="noopener">与fastboot相关的知识</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> u-boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> u-boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPMB介绍与使用</title>
      <link href="/8ca78fd8/"/>
      <url>/8ca78fd8/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="信息安全"><a href="#信息安全" class="headerlink" title="信息安全"></a>信息安全</h2><p>信息安全的三个基本目标是<code>机密性</code>，<code>完整性</code>和<code>可用性</code>。</p><ul><li><code>机密性</code>意味着只有授权实体才能阅读和理解保密的信息。没有访问权限的其他人无法阅读或理解机密信息；</li><li><code>完整性</code>意味着能够确保信息受到保护，以防止未经授权的更改，修改或删除。信息的完整性包括使用识别和认证等方法的起源，完整性和正确性；</li><li><code>可用性</code>意味着信息始终可供授权用户使用。</li></ul><p>比如说，eMMC的<code>Write protect(写保护)</code>是为了保证数据的可用性。<code>RPMB</code>是为了保证数据的<code>机密性</code>和<code>完整性</code>。eMMC关于安全特性的保护经历了：<code>Password Lock</code> -&gt; <code>Write Protect</code> -&gt; <code>RPMB</code>。<a id="more"></a><br>1、<code>Password Lock</code></p><blockquote><p>Password lock was the first security feature integrated into the eMMC spec; previously it had been implemented in legacy SD cards. The password lock feature is designed to protect the contents of the user area from any type of access (read, write, or erase).</p></blockquote><p><code>password lock&amp;unlock</code>机制使用<code>CMD42</code>命令来实现，如果设备lock住后，host只能做复位、初始化、选择和查询状态的动作，<strong>不能访问用户空间的任何数据。</strong>但是host可以访问boot分区、RPMB分区、GPA分区的信息。这个机制能保护数据不被破坏和访问，但是连同数据的所有者也不能访问。</p><p>2、<code>Write Protect</code></p><blockquote><p>Write protect was designed to protect against data corruption or erasure (whether malicious or unintentional). Once write protect is set, a host can’t erase or write to the specified protected area. However, unlike password lock, data can still be read from this area.</p></blockquote><p>这个机制用来进行<code>写保护</code>。</p><hr><h2 id="RPMB简介"><a href="#RPMB简介" class="headerlink" title="RPMB简介"></a>RPMB简介</h2><p><code>RPMB</code>是<code>Replay Protected Memory Block(重放保护内存块)</code>的简称，是eMMC中的一个具有安全特性的分区。此功能使设备能够将数据存储在经过身份验证并防止重放攻击的小型特定区域(通常是4M Bytes)中。这里涉及一个概念<code>Replay Attack</code>和<code>Replay Protected</code>。<br>1、<code>Replay Attack(重放攻击)</code><br>A向B请求服务(比如说登录某个网站)，A将密码hash化传给B。但是在这中间，E抓取到该hash值。此后，E冒充A向B发送同样的hash值来获取服务。<br><img src="https://ae01.alicdn.com/kf/HTB13bxccoCF3KVjSZJn762nHFXaI.png" alt="图1"></p><p>2、<code>Replay Protected(重放保护)</code></p><ul><li><strong>加随机数</strong>。该方法优点是认证双方不需要时间同步，双方记住使用过的随机数，如发现报文中有以前使用过的随机数，就认为是重放攻击。缺点是需要额外保存使用过的随机数，若记录的时间段较长，则保存和查询的开销较大。</li><li><strong>加时间戳</strong>。该方法优点是不用额外保存其他信息。缺点是认证双方需要准确的时间同步，同步越好，受攻击的可能性就越小。但当系统很庞大，跨越的区域较广时，要做到精确的时间同步并不是很容易。</li><li><strong>加流水号</strong>。就是双方在报文中添加一个逐步递增的整数，只要接收到一个不连续的流水号报文(太大或太小)，就认定有重放威胁。该方法优点是不需要时间同步，保存的信息量比随机数方式小。缺点是一旦攻击者对报文解密成功，就可以获得流水号，从而每次将流水号递增欺骗认证端。</li><li><strong>一次性口令</strong>。</li></ul><hr><h2 id="RPMB认证"><a href="#RPMB认证" class="headerlink" title="RPMB认证"></a>RPMB认证</h2><p>RPMB使用对称秘钥身份认证，也就是host和device使用相同的身份验证秘钥，此秘钥称之为<code>认证秘钥(AuthKey)</code>也可称为<code>RPMB Key</code>，工作方式如下：</p><ul><li>AuthKey通过host写入到eMMC中(在安全的环境中写入)的OTP区域中；</li><li>host和device在读写RPMB区域的时候需要签名和验证；</li><li>对消息进行签名涉及消息身份验证代码<code>(Message Authentication Code)MAC</code>，MAC是hash值，MAC是由通过AuthKey对<code>Message + Write Counter</code>使用HMAC SHA-256算法签名后得到。</li><li>发送的消息为<code>MAC + Message + Write Counter</code>。</li></ul><p><code>HMAC</code>是密钥相关的哈希运算消息认证码，HMAC运算利用哈希算法，以一个密钥和一个消息为输入，生成一个消息摘要作为输出。<br>保护RPMB数据的关键就是保护AuthKey，因此在读写RPMB的时候，需要在TEE的环境中，因为在访问RPMB，需要显式的使用AuthKey（如果不在TEE环境中，可以对AuthKey进行加密，然后使用解密模块去操作）。<br>另外，AuthKey最好也是独一无二的，也就是与Soc UID相关的，形成自己独一无二的Key。</p><hr><h2 id="RPMB是怎么实现重放保护"><a href="#RPMB是怎么实现重放保护" class="headerlink" title="RPMB是怎么实现重放保护"></a>RPMB是怎么实现重放保护</h2><p>重放保护最基本的就是要保证每个消息是独一无二的，RPMB分别加入2个因子进去：</p><ul><li>在写操作的时候，使用<code>Write Counter(32Bytes)</code>来实现重放保护。Write Counter是由Device管理的，该计数器在每次<strong>有效的验证写入</strong>消息后递增，其新值将包含在要发送的下一个身份验证代码<code>MAC</code>的计算中；</li><li>在读操作的时候，使用随机数<code>Nonce(16Bytes)</code>来实现重放保护。Nonce是由Host产生。<br><img src="https://ae01.alicdn.com/kf/HTB1rmxccliE3KVjSZFM762QhVXat.png" alt="图2"><br>一个访问RPMB命令通过HMAC SHA-256计算进行验证，以下几项做为该计算的输入：</li><li>身份验证的秘钥<code>AuthKey</code>；</li><li><code>消息</code>，包括命令或返回的值；</li><li><code>写计数器</code>，也就是总的写RPMB的次数，存放计数器的值为32bit，当写入次数达到0xFFFFFFFF的时候，RPMB就变为只读；</li><li><code>一个随机数</code>，它是为每个read命令随机生成的数字(Read的时候才用到)。<br>具体的RPMB命令格式如下：<br><img src="https://ae01.alicdn.com/kf/HTB1xZ4bcf1H3KVjSZFH762KppXa7.png" alt="图3"></li></ul><hr><h2 id="从RPMB读数据"><a href="#从RPMB读数据" class="headerlink" title="从RPMB读数据"></a>从RPMB读数据</h2><p><img src="https://ae01.alicdn.com/kf/HTB16tdccoCF3KVjSZJn762nHFXaJ.png" alt="图4"></p><p>1、在Host端，发送读请求以及一个16Bytes随机数Nonce给Device端；<br>2、在Device端(eMMC)，将请求的数据从RPMB取出来，通过AuthKey对<code>Data + 随机数</code>使用HMAC SHA-256算法签名后得到MAC，与<code>Data + 随机数</code>一起发送给Host端；<br>3、在Host端收到Devcie发送过来的数据， 首先比较随机数是否与自己一致，如果一致，在Host端使用自己的AuthKey对接收到的Data + 随机数使用HMAC SHA-256算法签名后得到MAC1，比较自己生成的MAC1与接收到的MAC是否一致。<br>如果一致，Host端就可以确定该Data是从RPMB读取到的，没有被修改过，而不是攻击者伪造的数据。</p><hr><h2 id="写数据到RPMB"><a href="#写数据到RPMB" class="headerlink" title="写数据到RPMB"></a>写数据到RPMB</h2><p><img src="https://ae01.alicdn.com/kf/HTB11zBdck5E3KVjSZFC762uzXXaO.png" alt="图5"></p><p>在 Host Soc端：<br>1、Host端使用AuthKey对<code>Message(Data + Metadata) + Write Counter</code> 使用HMAC SHA-256算法签名后得到MAC；<br>2、Host端将MAC + Message + Write Counter传给Device。<br>这里有个疑问，既然Write Counter是由Device管理的，那么Host怎么拿到这个值呢？</p><p><img src="https://ae01.alicdn.com/kf/HTB1s5FeclGE3KVjSZFh763kaFXaU.png" alt="图6"></p><p>从上图可以明显的看出，Host端发送<code>读Write Counter</code>和<code>随机数</code>给device端获取<code>Write Counter</code>，使用上面的读数据流程。</p><p>在Devices端(eMMC/UFS)：<br>1、Device接受到Host传送过来的MAC + Message + Write Counter；<br>2、Device端比较接收到的Write Counter是否与自己的一致；<br>2、Devices将接受到的Message + Write Counter + devcies端的AuthKey 经过SHA-256生成MAC1；<br>3、将Devices端生成的MAC1与接收到的MAC进行比较，如果两者一致，就将Data写入到RPMB中；</p><p>在这个过程中，如果想要破解，Host端需要知道AuthKey和Write Counter。当然，Write Counter可以读取出来，所以最最重要的就是保护AuthKey。</p><hr><h2 id="使用mmc命令访问RPMB"><a href="#使用mmc命令访问RPMB" class="headerlink" title="使用mmc命令访问RPMB"></a>使用<code>mmc</code>命令访问RPMB</h2><p>使用<code>mmc</code>命令可以访问RPMB，查看访问RPMB相关的用法如下：<br></p><figure class="highlight bash"><figcaption><span>mmc的使用方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mmc rpmb write-key &lt;rpmb device&gt; &lt;key file&gt;</span><br><span class="line">        Program authentication key <span class="built_in">which</span> is 32 bytes length and stored</span><br><span class="line">        <span class="keyword">in</span> the specified file. Also you can specify <span class="string">'-'</span> instead of</span><br><span class="line">        key file path to <span class="built_in">read</span> the key from stdin.</span><br><span class="line">        NOTE!  This is a one-time programmable (unreversible) change.</span><br><span class="line">        Example:</span><br><span class="line">          $ <span class="built_in">echo</span> -n AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHH | \</span><br><span class="line">            mmc rpmb write-key /dev/mmcblk0rpmb -</span><br><span class="line">mmc rpmb <span class="built_in">read</span>-counter &lt;rpmb device&gt;</span><br><span class="line">        Counter value <span class="keyword">for</span> the &lt;rpmb device&gt; will be <span class="built_in">read</span> to stdout.</span><br><span class="line">mmc rpmb <span class="built_in">read</span>-block &lt;rpmb device&gt; &lt;address&gt; &lt;blocks count&gt; &lt;output file&gt; [key file]</span><br><span class="line">        Blocks of 256 bytes will be <span class="built_in">read</span> from &lt;rpmb device&gt; to output</span><br><span class="line">        file or stdout <span class="keyword">if</span> <span class="string">'-'</span> is specified. If key is specified - <span class="built_in">read</span></span><br><span class="line">        data will be verified. Instead of regular path you can specify</span><br><span class="line">        <span class="string">'-'</span> to <span class="built_in">read</span> key from stdin.</span><br><span class="line">        Example:</span><br><span class="line">          $ <span class="built_in">echo</span> -n AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHH | \</span><br><span class="line">            mmc rpmb <span class="built_in">read</span>-block /dev/mmcblk0rpmb 0x02 2 /tmp/block -</span><br><span class="line">        or <span class="built_in">read</span> two blocks without verification</span><br><span class="line">          $ mmc rpmb <span class="built_in">read</span>-block /dev/mmcblk0rpmb 0x02 2 /tmp/block</span><br><span class="line">mmc rpmb write-block &lt;rpmb device&gt; &lt;address&gt; &lt;256 byte data file&gt; &lt;key file&gt;</span><br><span class="line">        Block of 256 bytes will be written from data file to</span><br><span class="line">        &lt;rpmb device&gt;. Also you can specify <span class="string">'-'</span> instead of key</span><br><span class="line">        file path or data file to <span class="built_in">read</span> the data from stdin.</span><br><span class="line">        Example:</span><br><span class="line">          $ (awk <span class="string">'BEGIN &#123;while (c++&lt;256) printf "a"&#125;'</span> | \</span><br><span class="line">            <span class="built_in">echo</span> -n AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHH) | \</span><br><span class="line">            mmc rpmb write-block /dev/mmcblk0rpmb 0x02 - -</span><br></pre></td></tr></table></figure><p></p><p>接下来我们要做如下几件事：<br>1、创建AuthKey和WrongAuthKey：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHH&quot; &gt; AuthKey</span><br><span class="line">echo &quot;11112222333344445555666677778888&quot; &gt; WrongAuthKey</span><br></pre></td></tr></table></figure><p></p><p>2、将AuthKey写入到eMMC的OTP中：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mmc rpmb write-key /dev/block/mmcblk0rpmb AuthKey</span><br></pre></td></tr></table></figure><p></p><p>3、创建一个256Bytes的数据：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;123456789abcdef.123456789abcdef.123456789abcdef.123456789abcdef.123456789abcdef.123456789abcdef.123456789abcdef.123456789abcdef.123456789abcdef.123456789abcdef.123456789abcdef.123456789abcdef.123456789abcdef.123456789abcdef.123456789abcdef.123456789abcdef.&quot; &gt; Data</span><br></pre></td></tr></table></figure><p></p><p>之所以要创建256Bytes的数据，是因为<code>mmc</code>规定要写256Bytes：<code>mmc rpmb write-block &lt;rpmb device&gt; &lt;address&gt; &lt;256 byte data file&gt; &lt;key file&gt;</code><br>4、用正确的AuthKey往RPMB写入数据：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mmc rpmb write-block /dev/block/mmcblk0rpmb 0 Data AuthKey</span><br></pre></td></tr></table></figure><p></p><p>在这个步骤中，没有看到有读取<code>Write Counter</code>的动作，这是因为<code>mmc</code>命令已经在<code>write-block</code>中首先实现了读取<code>Write Counter</code>，详见mmc源码<code>do_rpmb_write_block()</code>函数，该函数会调用<code>rpmb_read_counter()</code>获取<code>Write Counter</code>。<br>5、用错误的AuthKey往RPMB写入数据：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mmc rpmb write-block /dev/block/mmcblk0rpmb 0 Data WrongAuthKey</span><br></pre></td></tr></table></figure><p></p><p>这时候会提示<code>RPMB operation failed, retcode 0x0002</code>的错误，表示验证失败。<br>6、不用AuthKey读取RPMB数据：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mmc rpmb read-block /dev/block/mmcblk0rpmb 0 1 out.txt</span><br></pre></td></tr></table></figure><p></p><p><font color="red">这个结果能读取到数据，但是并不能保证这个数据没有被修改过。</font><br>7、用正确的AuthKey读取RPMB数据：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mmc rpmb read-block /dev/block/mmcblk0rpmb 0 1 out1.txt AuthKey</span><br></pre></td></tr></table></figure><p></p><p>这个结果能读取到数据，并且能保证这个数据没有被修改过，而不是攻击者伪造的数据。<br>8、用错误的AuthKey读取RPMB数据：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mmc rpmb read-block /dev/block/mmcblk0rpmb 0 1 out2.txt WrongAuthKey</span><br></pre></td></tr></table></figure><p></p><p>提示<code>RPMB MAC missmatch</code>的错误，无法读取到数据。</p><p>上面所做的所有操作，必须在可信任的环境下执行，也就是<code>TEE</code>环境，保护AuthKey不被泄露。</p><hr><h2 id="RPMB的使用用例"><a href="#RPMB的使用用例" class="headerlink" title="RPMB的使用用例"></a>RPMB的使用用例</h2><p>1、软件版本认证，防止回滚攻击<br>比如说厂商发布更新软件版本的顺序为 Ver001 -&gt; Ver002 -&gt; Ver003 -&gt; Ver004 -&gt; Ver005 -&gt; Ver006 -&gt; ……<br>有一天厂商发现Ver006有个重大的漏洞，因此他们发布和升级了Ver007版本。<br>如果不做版本认证，黑客就有可能在Ver007的版本基础上<code>回滚</code>到Ver006，并使用Ver006的漏洞进行攻击。<br>那么如果将每次升级的软件版本号写入到RPMB中，只能往更高的版本升级。因为RPMB写操作需要key，所以黑客不容易修改RPMB中的版本号来实现回滚。</p><p>2、手机开锁认证<br>通常，PIN码、图像、指纹可以给设备解锁，Android称之为<code>GateKeeper</code>，它够安全地限制对用户凭据进行暴力破解的尝试次数。其实现失败计数器，然后再验证用户密码。如果密码验证成功，则应清除失败计数器。<br>失败计数器写入到RPMB中，可以防止黑客无限制次数的攻击。</p><hr><h2 id="RPMB总结"><a href="#RPMB总结" class="headerlink" title="RPMB总结"></a>RPMB总结</h2><p>1、由于RPMB的读操作没有AuthKey也能返回的，因此，存入RPMB的数据最好是经过加密的；<br>2、RPMB的操作最好在TEE环境下，这样可以保证AuthKey不被泄露；</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://documents.westerndigital.com/content/dam/doc-library/en_us/assets/public/western-digital/collateral/white-paper/white-paper-emmc-security.pdf" target="_blank" rel="noopener">white-paper-emmc-security</a><br><a href="https://en.wikipedia.org/wiki/Replay_attack" target="_blank" rel="noopener">Replay_attack</a><br><a href="https://linux.codingbelief.com/zh/storage/flash_memory/emmc/emmc_bus_protocol.html" target="_blank" rel="noopener">eMMC总线协议</a><br><a href="https://man.cx/mmc(1" target="_blank" rel="noopener">mmc用法</a><br><a href="https://security.stackexchange.com/questions/166182/how-to-access-replay-protected-memory-block-rpmb-in-emmc/178340" target="_blank" rel="noopener">How to access Replay Protected Memory Block (RPMB) in eMMC?</a><br><a href="https://www.jedec.org/sites/default/files/docs/JESD84-B50.pdf" target="_blank" rel="noopener">JESD84-B50.1</a><br><a href="https://git.kernel.org/pub/scm/linux/kernel/git/cjb/mmc-utils.git/" target="_blank" rel="noopener">mmc-util</a><br><a href="https://source.android.com/security/authentication/gatekeeper" target="_blank" rel="noopener">GateKeeper</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> eMMC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eMMC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>i.MX8 uuu</title>
      <link href="/2e4a33d4/"/>
      <url>/2e4a33d4/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p><code>uuu</code>是<code>i.MX 8 Universal Update Utility</code>的简称，这个是<code>mfgtools</code>的后续方案，俗称MFGtools v3。<br>wiki: <a href="https://github.com/NXPmicro/mfgtools/wiki" target="_blank" rel="noopener">https://github.com/NXPmicro/mfgtools/wiki</a><br>pdf: <a href="https://github.com/NXPmicro/mfgtools/releases" target="_blank" rel="noopener">https://github.com/NXPmicro/mfgtools/releases</a></p><p>原先的MFGtools中，在下载模式下，PC使用<code>USB HID</code>与开发板进行通信，将<code>firmware uboot/kernel/dtb/ramdisk</code>load到DDR上，然后去启动<code>小系统(小kernel)</code>，之后PC识别开发板为<code>USB Mass Storage</code>设备，可以通过PC将命令（使用<code>uuc</code>实现）发送给<code>小系统(小kernel)</code>，从而实现烧写功能。<br>而目前的<code>uuu</code>，新增使用fastboot协议，就是在<code>小u-boot</code>中配置支持fastboot。在下载模式下，PC还是使用<code>USB HID</code>与开发板进行通信，将支持fastboot的<code>小u-boot</code>放到开发板上运行，之后PC与开发板使用fastboot协议与<code>小u-boot</code>进行通信，包括load kernel等操作，启动<code>小系统</code>，从而实现烧写功能。<a id="more"></a></p><hr><h2 id="编译-下载："><a href="#编译-下载：" class="headerlink" title="编译/下载："></a>编译/下载：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/NXPmicro/mfgtools</span><br><span class="line">cmake .</span><br><span class="line">make</span><br></pre></td></tr></table></figure><hr><h2 id="定制和load小u-boot"><a href="#定制和load小u-boot" class="headerlink" title="定制和load小u-boot"></a>定制和load小u-boot</h2><p>1、按照<code>UUU.pdf</code>中<code>Uboot config requirement</code>章节的说明，需要配置<code>小u-boot</code>支持以下几种功能，编译生成<code>flash.bin</code>：</p><ul><li>USB Gadget；</li><li>USB UDC(USB Device Controller)</li><li>fastboot命令</li></ul><p>最终<code>小u-boot</code>关于<code>uuu</code>的配置如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_CMD_FASTBOOT=y</span><br><span class="line">CONFIG_USB_FUNCTION_FASTBOOT=y</span><br><span class="line">CONFIG_USB_GADGET=y</span><br><span class="line">CONFIG_USB_GADGET_DOWNLOAD=y</span><br><span class="line">CONFIG_USB_GADGET_MANUFACTURER=&quot;FSL&quot;</span><br><span class="line">CONFIG_USB_GADGET_VENDOR_NUM=0x0525</span><br><span class="line">CONFIG_USB_GADGET_PRODUCT_NUM=0xa4a5</span><br><span class="line">CONFIG_CI_UDC=y # UDC need change according system, -some system use CONFIG_USB_DWC3, some use CONFIG_USB_CDNS3</span><br><span class="line">CONFIG_FSL_FASTBOOT=y</span><br><span class="line">CONFIG_FASTBOOT=y</span><br><span class="line">CONFIG_FASTBOOT_BUF_ADDR=0x80280000 </span><br><span class="line"># Address need change according -system, generally it can be the same as $&#123;LOADADDR&#125;</span><br><span class="line">CONFIG_FASTBOOT_BUF_SIZE=0x40000000</span><br><span class="line">CONFIG_FASTBOOT_FLASH=y</span><br><span class="line">CONFIG_FASTBOOT_FLASH_MMC_DEV=1</span><br><span class="line">CONFIG_EFI_PARTITION=y</span><br><span class="line">CONFIG_ANDROID_BOOT_IMAGE=y</span><br></pre></td></tr></table></figure><p></p><p>2、将开发板设置为<code>Serial Download</code>模式，与PC机连接；<br>3、查看USB连接情况(不是必须)；<br>在ubuntu下执行<code>lsusb</code>可以看到连接上了一个<code>Bus 001 Device 048: ID 1fc9:012f NXP Semiconductors</code>设备，可以进一步查看<code>lsusb -v -d 1fc9:012f</code>这个设备是一个<code>Human Interface Device</code>设备。<br>4、load <code>小u-boot</code><br>执行如下的uuu命令，load <code>小u-boot</code>到开发板上的DDR并跑起来(目前i.MX8在u-boot运行之前会先跑<code>scfw</code>,已将DDR初始化完毕)：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ./uuu SDPS: boot -f flash.bin</span><br><span class="line">uuu (Universal Update Utility) for nxp imx chips -- libuuu_1.2.91-3-g41a3d59</span><br><span class="line"></span><br><span class="line">Success 0    Failure 0</span><br><span class="line"></span><br><span class="line">       1/ 0   [                            ]</span><br><span class="line">1:11   1/ 0   [============100%============]</span><br><span class="line"></span><br><span class="line">Okay</span><br></pre></td></tr></table></figure><p></p><p>可以通过串口查看u-boot有如下串口输出表示进入<code>fastboot</code>模式：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[  217.774] Detect USB boot. Will enter fastboot mode!</span><br><span class="line">[  217.779] Fastboot: Normal</span><br><span class="line">[  217.781] Boot from USB for mfgtools</span><br><span class="line">[  217.785] Use default environment for                                  mfgtools</span><br><span class="line">[  217.791] Run bootcmd_mfg: run mfgtool_args;if iminfo $&#123;initrd_addr&#125;; </span><br><span class="line">            then if test $&#123;tee&#125; = yes; then bootm $&#123;tee_addr&#125; $&#123;initrd_addr&#125; $&#123;fdt_addr&#125;; </span><br><span class="line">else booti $&#123;loadaddr&#125; $&#123;initrd_addr&#125; $&#123;fdt_addr&#125;; fi; els;</span><br><span class="line">[  217.821]</span><br><span class="line">[  217.823] ## Checking Image at 83100000 ...</span><br><span class="line">[  217.827] Unknown image format!</span><br><span class="line">[  217.830] Run fastboot ...</span><br></pre></td></tr></table></figure><p></p><p>5、查看USB连接情况(不是必须)；<br>在ubuntu下执行<code>lsusb</code>可以看到连接上了一个<code>Bus 001 Device 049: ID 0525:a4a5 Netchip Technology, Inc. Pocketbook Pro 903</code>设备，可以进一步查看<code>lsusb -v -d 0525:a4a5</code>这个设备是一个<code>Android Fastboot</code>设备。</p><hr><h2 id="使用FB命令："><a href="#使用FB命令：" class="headerlink" title="使用FB命令："></a>使用FB命令：</h2><p><code>FB</code>是<code>Android fastboot protocol</code>，支持如下命令：<br><img src="https://ae01.alicdn.com/kf/HTB1_GRaclaE3KVjSZLe760sSFXav.png" alt="图1"></p><p>比如说<code>./uuu FB: ucmd &lt;any uboot cmd&gt;</code>中就可以通过<code>uuu</code>执行uboot命令，比如执行uboot <code>help</code>或者<code>printenv</code>命令：<br><code>./uuu FB: ucmd help</code> 和 <code>./uuu FB: ucmd printenv</code></p><p>比如说<code>./uuu FB: download -f &lt;filename&gt;</code> 可以下载kernel、rootfs、dtb到DRM中，当然，load到DDR的那个地方，需要使用<code>fastboot_buffer</code>环境变量进行指定。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./uuu FB: ucmd setenv fastboot_buffer $&#123;loadaddr&#125;</span><br><span class="line">./uuu FB: download -f Image</span><br><span class="line">./uuu FB: ucmd setenv fastboot_buffer $&#123;fdt_addr&#125;</span><br><span class="line">./uuu FB: download -f board.dtb</span><br><span class="line">./uuu FB: ucmd setenv fastboot_buffer $&#123;initrd_addr&#125;</span><br><span class="line">./uuu FB: download -f fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz.u-boot</span><br><span class="line">#FB: ucmd setenv bootargs console=$&#123;console&#125;,$&#123;baudrate&#125; earlycon=$&#123;earlycon&#125;,$&#123;baudrate&#125;</span><br><span class="line">./uuu FB: acmd $&#123;kboot&#125; $&#123;loadaddr&#125; $&#123;initrd_addr&#125; $&#123;fdt_addr&#125;</span><br></pre></td></tr></table></figure><p></p><p>我这边使用上述的命令无法执行成功，原因是没办法取得默认的环境变量<code>${loadaddr}</code>等，所以这里临时测试使用直接的地址进行测试，如下可以保证<code>小kernel</code>跑起来，当然，这里的<code>小kernel</code>和<code>小 rootfs</code>必须重新定制一下。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./uuu FB: ucmd setenv -f fastboot_buffer 0x80280000</span><br><span class="line">./uuu FB: download -f Image</span><br><span class="line">./uuu FB: ucmd setenv -f fastboot_buffer 0x83000000</span><br><span class="line">./uuu FB: download -f board.dtb</span><br><span class="line">./uuu FB: ucmd setenv -f fastboot_buffer 0x83100000</span><br><span class="line">./uuu FB: download -f fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz.u-boot</span><br><span class="line">./uuu FB: acmd booti 0x80280000 0x83100000 0x83000000</span><br></pre></td></tr></table></figure><p></p><p>无法取得默认的环境变量<code>${loadaddr}</code>的解决方法是要给环境变量加上引号，如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./uuu FB: ucmd setenv fastboot_buffer &apos;$&#123;loadaddr&#125;&apos;</span><br><span class="line">./uuu FB: download -f Image</span><br><span class="line">./uuu FB: ucmd setenv fastboot_buffer &apos;$&#123;fdt_addr&#125;&apos;</span><br><span class="line">./uuu FB: download -f board.dtb</span><br><span class="line">./uuu FB: ucmd setenv fastboot_buffer &apos;$&#123;initrd_addr&#125;&apos;</span><br><span class="line">./uuu FB: download -f fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz.u-boot</span><br><span class="line">#FB: ucmd setenv bootargs console=$&#123;console&#125;,$&#123;baudrate&#125; earlycon=$&#123;earlycon&#125;,$&#123;baudrate&#125;</span><br><span class="line">./uuu FB: acmd &apos;$&#123;kboot&#125;&apos; &apos;$&#123;loadaddr&#125;&apos; &apos;$&#123;initrd_addr&#125;&apos; &apos;$&#123;fdt_addr&#125;&apos;</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="定制和load小kernel"><a href="#定制和load小kernel" class="headerlink" title="定制和load小kernel"></a>定制和load小kernel</h2><p>1、按照<code>UUU.pdf</code>中<code>kernel config requirement</code>章节的说明，需要配置<code>小kernel</code>支持以下几种功能，编译生成<code>Image</code>：</p><ul><li>配置 USB CONFIGFS</li><li>配置USB UDC</li><li>配置function fs<br><img src="https://ae01.alicdn.com/kf/HTB1lM3_b.GF3KVjSZFo762mpFXaH.png" alt="图2"></li></ul><p>关于配置function fs需要配置如下几个宏：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_USB_LIBCOMPOSITE=y</span><br><span class="line">CONFIG_USB_F_MASS_STORAGE=y</span><br><span class="line">CONFIG_USB_F_FS=y</span><br><span class="line">CONFIG_USB_CONFIGFS=y</span><br><span class="line">CONFIG_USB_CONFIGFS_MASS_STORAGE=y</span><br><span class="line">CONFIG_USB_CONFIGFS_F_FS=y</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="定制小rootfs"><a href="#定制小rootfs" class="headerlink" title="定制小rootfs"></a>定制小rootfs</h2><p>当<code>小kernel</code>和<code>小rootfs</code>跑起来后，PC端查看<code>lsusb</code>发现一个USB设备为：<code>Bus 001 Device 099: ID 066f:37ff SigmaTel, Inc.</code>。<br>按照uuu.pdf的说明，接下来可以使用<code>FBK</code>与<code>小kernel</code>进行<code>fastboot</code>协议的通信。但是我这边执行<code>./uuu FBK: ucmd ls</code>命令就block住了，没有返回<code>Okay</code>或者失败啥的。<br>根据uuu.pdf的说明，<code>FBK</code>的实现依赖于<code>initramfs</code>，且<code>FBK</code>默认只支持<code>066f:9afe</code>和<code>066f:9bff</code>的设备。<br><img src="https://ae01.alicdn.com/kf/HTB15dZ_b2WG3KVjSZPc762kbXXaW.png" alt="图3"></p><p>解决<code>FBK</code>不能执行的两种方案如下：<br>方案1：重新编译<code>initramfs</code>，使用最新的yocto编译新的<code>initramfs</code>为：<code>fsl-image-mfgtool-initramfs-imx8qxpmek.cpio.gz.u-boot</code>，命令如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source setup-environment fsl-imx-wayland/</span><br><span class="line">bitbake fsl-image-mfgtool-initramfs</span><br></pre></td></tr></table></figure><p></p><p>可以看到在生成的<code>rootfs</code>中的<code>linuxrc</code>里面，已经设置新的PID和VID了。<br><code>tmp/work/imx8qxpmek-poky-linux/fsl-image-mfgtool-initramfs/1.0-r0/rootfs/linuxrc</code><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function launch_uuc() &#123;</span><br><span class="line">    echo $1 $2</span><br><span class="line">    mkdir /sys/kernel/config/usb_gadget/$1</span><br><span class="line">    cd /sys/kernel/config/usb_gadget/$1</span><br><span class="line">    echo 0x066F &gt; idVendor</span><br><span class="line">   </span><br><span class="line">    if [[ $&#123;cmdline&#125; == *nfsroot* ]]; then</span><br><span class="line">        echo 0x9CFF &gt; idProduct</span><br><span class="line">    else</span><br><span class="line">        echo 0x9BFF &gt; idProduct</span><br><span class="line">    fi</span><br><span class="line">    </span><br><span class="line">    mkdir strings/0x409</span><br></pre></td></tr></table></figure><p></p><p>将这个<code>initramfs</code>做为<code>小rootfs</code>load进去就可以使用<code>FBK</code>命令了。</p><p>方案2：根据uuu源代码中<code>uuu/uuu.lst</code>文件的说明，我们可以重新配置<code>FBK</code>支持的设备。</p><blockquote><p>CFG: Config protocol of specific usb device vid/pid<br>SDPS|SDP|FB\Fastboot|FBK -chip<chip name="">-pid<pid>-vid<vid>[-bcdversion<ver>]</ver></vid></pid></chip></p></blockquote><p>使用下面的命令进行配置：<code>./uuu CFG: FBK: -pid 0x37ff -vid 0x066f</code><br>按照上述的步骤，<code>小kernel</code>与PC通信上了后接下来烧录的动作就可以使用<code>FBK</code>命令来完成了。</p><hr><h2 id="使用uuu实现工厂烧写"><a href="#使用uuu实现工厂烧写" class="headerlink" title="使用uuu实现工厂烧写"></a>使用<code>uuu</code>实现工厂烧写</h2><p>1、既然我们现在可以实现<code>uuu</code>的<code>FB</code>和<code>FBK</code>命令，那么我们就可以通过<code>FB</code>命令在u-boot中实现烧写fuse的动作，也就是烧写<code>SRK fuse</code>。可以在出厂的时候使用<code>uuu</code>对fuse进行烧写：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FB: ucmd fuse prog 0 730 0x475e1dca</span><br><span class="line">FB: ucmd fuse prog 0 731 0xec5c98d2</span><br><span class="line">FB: ucmd fuse prog 0 732 0x6dd5b7ec</span><br><span class="line">FB: ucmd fuse prog 0 733 0xda535b48</span><br><span class="line">FB: ucmd fuse prog 0 734 0x5baa6f61</span><br><span class="line">FB: ucmd fuse prog 0 735 0x9d788292</span><br><span class="line">FB: ucmd fuse prog 0 736 0x27f53d5f</span><br><span class="line">FB: ucmd fuse prog 0 737 0x1316752a</span><br><span class="line">FB: ucmd fuse prog 0 738 0x01043451</span><br><span class="line">FB: ucmd fuse prog 0 739 0x7578275d</span><br><span class="line">FB: ucmd fuse prog 0 740 0xc5fcd1e1</span><br><span class="line">FB: ucmd fuse prog 0 741 0x12bac3e2</span><br><span class="line">FB: ucmd fuse prog 0 742 0xef6860a2</span><br><span class="line">FB: ucmd fuse prog 0 743 0xa0a12501</span><br><span class="line">FB: ucmd fuse prog 0 744 0xbc2b9c25</span><br><span class="line">FB: ucmd fuse prog 0 745 0xcfeea329</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h2><p>1、sudo 问题<br>执行<code>uuu</code>的时候提示要执行<code>sudo</code>的问题，必须在ubuntu下新建<code>sudo vi /etc/udev/rules.d/99-uuu.rules</code>文件，内容如下，最后执行<code>sudo udevadm control --reload-rules</code>。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1fc9&quot;, ATTRS&#123;idProduct&#125;==&quot;012f&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1fc9&quot;, ATTRS&#123;idProduct&#125;==&quot;0129&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;15a2&quot;, ATTRS&#123;idProduct&#125;==&quot;0076&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;15a2&quot;, ATTRS&#123;idProduct&#125;==&quot;0054&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;15a2&quot;, ATTRS&#123;idProduct&#125;==&quot;0061&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;15a2&quot;, ATTRS&#123;idProduct&#125;==&quot;0063&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;15a2&quot;, ATTRS&#123;idProduct&#125;==&quot;0071&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;15a2&quot;, ATTRS&#123;idProduct&#125;==&quot;007d&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;15a2&quot;, ATTRS&#123;idProduct&#125;==&quot;0080&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1fc9&quot;, ATTRS&#123;idProduct&#125;==&quot;0128&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1fc9&quot;, ATTRS&#123;idProduct&#125;==&quot;0126&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1fc9&quot;, ATTRS&#123;idProduct&#125;==&quot;0135&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1fc9&quot;, ATTRS&#123;idProduct&#125;==&quot;0134&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1fc9&quot;, ATTRS&#123;idProduct&#125;==&quot;012b&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0525&quot;, ATTRS&#123;idProduct&#125;==&quot;b4a4&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0525&quot;, ATTRS&#123;idProduct&#125;==&quot;a4a5&quot;, MODE=&quot;0666&quot;</span><br><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;066F&quot;, ATTRS&#123;idProduct&#125;==&quot;9BFF&quot;, MODE=&quot;0666&quot;</span><br></pre></td></tr></table></figure><p></p><p>2、传输大文件问题<br>按照<code>FBK</code>命令的说明，可以使用<code>ucp</code>命令从PC拷贝文件到板子上，再使用<code>ucmd</code>进行操作，比如说烧写imx8的<code>flash.bin</code>：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./uuu FBK: ucp file/imx8x/flash.bin t:/tmp</span><br><span class="line">./uuu FBK: ucmd dd if=/tmp/flash.bin of=/dev/mmcblk0 bs=1024 seek=32</span><br></pre></td></tr></table></figure><p></p><p>比如说有个<code>bigdata.img</code>的镜像，大小为256MB，按照这种做法去传输大文件会出问题，必须使用如下的方式：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ./uuu FBK: acmd dd of=/dev/mmcblk0p3 bs=512</span><br><span class="line">sudo ./uuu FBK: ucp file/imx8x/bigdata.img t:-</span><br></pre></td></tr></table></figure><p></p><p><img src="https://ae01.alicdn.com/kf/HTB1FSVdclKw3KVjSZFO761rDVXal.png" alt="图4"><br>其中，<code>ucp</code>命令使用的参数<code>t:-</code>表示这个文件是传输到<code>stdio pipe</code>上，在这里是<code>stdin</code>；<code>acmd</code>命令表示不等待命令返回，这里面的<code>dd</code>命令的<code>if=</code>其实就是从<code>stdin</code>里面拿到的，以此实现大文件的传输。</p><p>3、如果出现<code>1:11 1/ 0 [Failure open usb device,Try ]</code>的错误，原因是没有执行<code>sudo</code>。</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>u-boot/doc/README.android-fastboot<br><a href="https://chromium.googlesource.com/aosp/platform/system/core/+/upstream/fastboot/" target="_blank" rel="noopener">https://chromium.googlesource.com/aosp/platform/system/core/+/upstream/fastboot/</a><br><a href="https://android.googlesource.com/platform/system/core/+/android-sdk-4.4.2_r1/fastboot/fastboot_protocol.txt" target="_blank" rel="noopener">https://android.googlesource.com/platform/system/core/+/android-sdk-4.4.2_r1/fastboot/fastboot_protocol.txt</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> i.MX8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i.MX8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu修改盘符名称</title>
      <link href="/d2bb7d25/"/>
      <url>/d2bb7d25/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h2><p>我在移动硬盘中下载了一套代码，在编译的时候出现了如下错误：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Checking build tools versions...</span><br><span class="line">build/core/main.mk:115: ************************************************************</span><br><span class="line">build/core/main.mk:116: You are building in a directory whose absolute path contains</span><br><span class="line">build/core/main.mk:117: a space character:</span><br><span class="line">build/core/main.mk:118:  </span><br><span class="line">build/core/main.mk:119: "/media/victor/My Passport/code/xxx"</span><br><span class="line">build/core/main.mk:120:  </span><br><span class="line">build/core/main.mk:121: Please move your source tree to a path that does not contain</span><br><span class="line">build/core/main.mk:122: any spaces.</span><br><span class="line">build/core/main.mk:123: ************************************************************</span><br><span class="line">build/core/main.mk:124: *** Directory names containing spaces not supported.  Stop.</span><br></pre></td></tr></table></figure><p></p><p>很明显，我的编译路径存在空格，也就是我移动硬盘的盘符名称<code>My Passport</code>有空格，突然感觉WD的硬盘好low啊。。。<br>此时就要去修改硬盘盘符名称。<a id="more"></a></p><hr><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>必须将移动硬盘盘符名称改掉，以下介绍在ubuntu中怎么一步步修改盘符名称。<br>1、查看类型<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># sudo blkid</span><br><span class="line">/dev/sda1: UUID=&quot;4488-EAF5&quot; TYPE=&quot;vfat&quot; PARTLABEL=&quot;EFI System Partition&quot; PARTUUID=&quot;0875dd30-1da5-4303-987f-73a7ee9c41b5&quot;</span><br><span class="line">/dev/sda2: UUID=&quot;8cefef49-192c-4f78-879d-725feb2c9f97&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;066a86a5-e1da-4f63-a110-1abc15e1f4e6&quot;</span><br><span class="line">/dev/sda3: UUID=&quot;fecf47eb-ec23-4c80-9c4f-8f0074bcf2ea&quot; TYPE=&quot;swap&quot; PARTUUID=&quot;5aa677f9-1fd6-45ff-a9ca-cb1c90ac705e&quot;</span><br><span class="line">/dev/sdb1: UUID=&quot;3a68ba27-4dd6-41a9-bc12-8cf4301ea6eb&quot; TYPE=&quot;ext4&quot; PARTUUID=&quot;cf96ad83-01&quot;</span><br><span class="line">/dev/sdc1: LABEL=&quot;My Passport&quot; UUID=&quot;B84067E64067AA38&quot; TYPE=&quot;ntfs&quot; PARTLABEL=&quot;My Passport&quot; PARTUUID=&quot;5608a181-0df2-4693-af16-84189f9aebca&quot;</span><br></pre></td></tr></table></figure><p></p><p>我们可以知道，这个硬盘是<code>ntfs</code>格式，label为<code>My Passport</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># sudo fdisk -l</span><br><span class="line">Disk /dev/sda: 465.8 GiB, 500107862016 bytes, 976773168 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 4096 bytes</span><br><span class="line">I/O size (minimum/optimal): 4096 bytes / 4096 bytes</span><br><span class="line">Disklabel type: gpt</span><br><span class="line">Disk identifier: 1AB1B218-1445-4A7C-8C0C-1E9EDB7A7545</span><br><span class="line"></span><br><span class="line">Device         Start       End   Sectors   Size Type</span><br><span class="line">/dev/sda1       2048   1050623   1048576   512M EFI System</span><br><span class="line">/dev/sda2    1050624 974772223 973721600 464.3G Linux filesystem</span><br><span class="line">/dev/sda3  974772224 976771071   1998848   976M Linux swap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 931.5 GiB, 1000204886016 bytes, 1953525168 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0xcf96ad83</span><br><span class="line"></span><br><span class="line">Device     Boot Start        End    Sectors   Size Id Type</span><br><span class="line">/dev/sdb1        2048 1953525167 1953523120 931.5G 83 Linux</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sdc: 1.8 TiB, 2000365289472 bytes, 3906963456 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: gpt</span><br><span class="line">Disk identifier: AC76A599-ACF4-4252-AC38-25379D722DF8</span><br><span class="line"></span><br><span class="line">Device     Start        End    Sectors  Size Type</span><br><span class="line">/dev/sdc1   2048 3906961407 3906959360  1.8T Microsoft basic data</span><br></pre></td></tr></table></figure><p>2、umount掉设备<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo umount /dev/sdc1</span><br></pre></td></tr></table></figure><p></p><p>3、针对<code>ntfs</code>类型的设备，使用<code>ntfslabel</code>修改盘符名称：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo ntfslabel /dev/sdc1 victor_disk</span><br></pre></td></tr></table></figure><p></p><p>4、重新插拔移动硬盘即可</p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://help.ubuntu.com/community/RenameUSBDrive" target="_blank" rel="noopener">https://help.ubuntu.com/community/RenameUSBDrive</a></p><ul><li>For <code>FAT16</code> and <code>FAT32</code> partitions, use <code>mlabel</code> from the <code>mtools</code> package.</li><li>For <code>NTFS</code> partitions, use <code>ntfslabel</code> from the <code>ntfs-3g</code> package.</li><li>For <code>ext2</code>, <code>ext3</code>, or <code>ext4</code> partitions, use <code>e2label</code>.</li><li>For <code>JFS</code> partitions, use <code>jfs_tune</code>.</li><li>For <code>ReiserFS</code> (v3) partitions, use <code>reiserfstune</code>.</li><li>For <code>XFS</code> partitions, use <code>xfs_admin</code></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> ubuntu工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>set warning as error</title>
      <link href="/ab94cde8/"/>
      <url>/ab94cde8/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在kernel中将所有的warning当做error处理，这样可以保证编译的时候没有warning。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在Kernel中的<code>Makefile</code>中的<code>KBUILD_CFLAGS</code>的变量中加上<code>-Werror</code>选项，通常如下：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">KBUILD_CFLAGS   := -Wall -Wundef -Wstrict-prototypes -Wno-trigraphs \</span><br><span class="line">           -fno-strict-aliasing -fno-common -fshort-wchar \</span><br><span class="line">           -Werror-implicit-function-declaration \</span><br><span class="line">           -Wno-format-security \</span><br><span class="line">           -std=gnu89 \</span><br><span class="line">           -Werror</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux Kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归查找特定中英文字符</title>
      <link href="/d0a51092/"/>
      <url>/d0a51092/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>由于自己写博客，总有些词语不能碰，比如说公司相关的机密以及法律严禁的词语，因此自己写了个小的程序来<strong>查找特定目录下所有文件是否包含指定的中文或英文词语，有的话将对应的文件和行号输出。</strong></p><p>下面的代码只是实现简单的功能，效率非常的差，因为嵌套了多层循环。但是没办法，python的语法和库不是很懂，只能按照写C的逻辑来实现功能了。</p><p>对中文字符的处理，必须使用<code>UTF-8</code>的格式，否则有可能出现如下类似的错误：</p><blockquote><p>UnicodeDecodeError: ‘utf-8’ codec can’t decode byte 0xc6 in position 18: invalid continuation byte</p></blockquote><p>代码如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> chardet</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">fstr_en = [<span class="string">'wowothink'</span>, <span class="string">'123456'</span>, <span class="string">'fuck'</span>]</span><br><span class="line">fstr_zh = [<span class="string">u'傻B'</span>, <span class="string">u'变异'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归目录中所有文件，查找是否带有fstr指定的英文字符，有的话输出到log中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findstr_en</span><span class="params">(dirname, fstr)</span>:</span></span><br><span class="line">    hit_num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> filenames <span class="keyword">in</span> os.listdir(dirname):</span><br><span class="line">        filenames = os.path.join(dirname, filenames)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(filenames):</span><br><span class="line">            <span class="keyword">with</span> open(filenames, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:<span class="comment">#打开文件</span></span><br><span class="line">                <span class="keyword">for</span> line_num, line_str <span class="keyword">in</span> enumerate(f, <span class="number">1</span>): <span class="comment">#每次从文件读取一行存到 line_str 中</span></span><br><span class="line">                    <span class="keyword">for</span> str <span class="keyword">in</span> fstr: <span class="comment">#依次从待查找的字符串数组中取出一个字符串比较</span></span><br><span class="line">                        <span class="keyword">for</span> match <span class="keyword">in</span> re.finditer(str, line_str): <span class="comment">#使用正则表达式查找 fstr 字符串在 line_str 的位置</span></span><br><span class="line">                            hit_num = hit_num + <span class="number">1</span></span><br><span class="line">                            print(<span class="string">"[%d] hit string: %s, in file: %s, index: %d, line number: %d"</span> %(hit_num, str, filenames, match.start(), line_num)) <span class="comment">#打印要查找的str在文件中所在的行号和index</span></span><br><span class="line">                f.close()</span><br><span class="line">        <span class="keyword">elif</span> os.path.isdir(filenames): <span class="comment">#目录文件继续递归</span></span><br><span class="line">            <span class="comment">#print(filenames)</span></span><br><span class="line">            findstr_en(filenames, fstr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归目录中所有文件，查找是否带有fstr指定的中文字符，有的话输出到log中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findstr_zh</span><span class="params">(dirname, fstr)</span>:</span></span><br><span class="line">    hit_num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> filenames <span class="keyword">in</span> os.listdir(dirname):</span><br><span class="line">        filenames = os.path.join(dirname, filenames)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(filenames):</span><br><span class="line">            <span class="keyword">with</span> open(filenames, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:<span class="comment">#打开文件</span></span><br><span class="line">                <span class="keyword">for</span> line_num, line_str <span class="keyword">in</span> enumerate(f, <span class="number">1</span>): <span class="comment">#每次从文件读取一行存到 line_str 中</span></span><br><span class="line">                    <span class="keyword">for</span> match <span class="keyword">in</span> re.findall(<span class="string">'[\u4e00-\u9fa5]+'</span>, line_str): <span class="comment">#使用正则表达式查找 line_str 字符串中所包含的中文字符，保存到match中</span></span><br><span class="line">                        <span class="keyword">for</span> str <span class="keyword">in</span> fstr: <span class="comment">#从待查找的字符中依次取出一个字符串放到str中</span></span><br><span class="line">                            <span class="keyword">for</span> temp <span class="keyword">in</span> re.finditer(str, match): <span class="comment">#依次从match中查找是否有与str匹配的字符串，有的话保存到temp中</span></span><br><span class="line">                                hit_num = hit_num + <span class="number">1</span></span><br><span class="line">                                print(<span class="string">"[%d] hit string: %s, in file: %s, line number: %d"</span> %(hit_num, str, filenames, line_num)) <span class="comment">#打印要查找的str在文件中所在的行号和index</span></span><br><span class="line">                f.close()</span><br><span class="line">        <span class="keyword">elif</span> os.path.isdir(filenames): <span class="comment">#如果目录文件继续递归</span></span><br><span class="line">            <span class="comment">#print(filenames)</span></span><br><span class="line">            findstr_zh(filenames, fstr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    dirname = <span class="string">"./_posts"</span></span><br><span class="line">    findstr_en(dirname, fstr_en)</span><br><span class="line">    print(<span class="string">"find English string, all file check ok"</span>)</span><br><span class="line">    </span><br><span class="line">    findstr_zh(dirname, fstr_zh)</span><br><span class="line">    print(<span class="string">"find Chinese string, all file check ok"</span>)</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Python脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu硬盘分区修复</title>
      <link href="/b75288d9/"/>
      <url>/b75288d9/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p><font color="red">以下方法虽说是修复硬盘分区，但是操作过程中有可能导致数据丢失，请先做好备份，任何后果自己负责。</font></p><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>之前在<code>/etc/fstab</code>中新增如下命令开机自动挂载<code>/dev/sdb1</code>：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/sdb1 /home/victor/disk2 ext4 defaults 0 2</span><br></pre></td></tr></table></figure><p></p><p>某个时候，启动ubuntu，发现启动不了，只能进入recovery模式。然后看了下启动log，提示挂载<code>/dev/sdb1</code>分区失败。<br>自己手动去挂载，提示如下错误：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~$ mount -t ext4 /dev/sdb1 /home/victor/disk2/</span><br><span class="line">mount: only root can use &quot;--types&quot; option</span><br><span class="line">victor@victor-HP:~$ sudo mount -t ext4 /dev/sdb1 /home/victor/disk2/</span><br><span class="line">mount: wrong fs type, bad option, bad superblock on /dev/sdb1,</span><br><span class="line">missing codepage or helper program, or other error</span><br><span class="line"></span><br><span class="line">In some cases useful info is found in syslog - try</span><br><span class="line">dmesg | tail or so.</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>参照 <a href="https://ubuntuforums.org/showthread.php?t=1245536&amp;p=7822694#post7822694" target="_blank" rel="noopener">https://ubuntuforums.org/showthread.php?t=1245536&amp;p=7822694#post7822694</a> 中的办法一步步解决，碰到选择<code>yes or no</code>的，直接全部选择y。由于执行的过程时间较久，所以在执行的过程中，不能强制退出。大概的执行步骤如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># sudo e2fsck -f /dev/sdb1</span><br><span class="line"># sudo dumpe2fs -f /dev/sdb1 | grep -i superblock</span><br><span class="line"># sudo mke2fs -n /dev/sdb1</span><br><span class="line"># sudo e2fsck -f -b 32768 /dev/sdb1</span><br><span class="line"># sudo mount -t ext4 /dev/sdb1 /home/victor/disk2/</span><br></pre></td></tr></table></figure><p></p><p>同样的，还有一个修复无法删除文件的问题：<a href="http://wowothink.com/ef6d909f/">Ubuntu下无法删除文件</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 碰到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碰到的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kbuild Makefile</title>
      <link href="/35da6ee3/"/>
      <url>/35da6ee3/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>一般情况下，如果需要编译kernel的某个模块，我们通常在Makefile中使用如下格式：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">drivers/usb/host/Makefile</span><br><span class="line"></span><br><span class="line">obj-$(CONFIG_USB_EHCI_HCD)  += ehci-hcd.o</span><br><span class="line">obj-$(CONFIG_USB_EHCI_PCI)  += ehci-pci.o</span><br></pre></td></tr></table></figure><p></p><p>通过配置<code>CONFIG_XXX</code>来决定编译某个模块为 build-in 或者是编译成module。<br>但是，在 <code>drivers/usb/gadget/Makefile</code>文件中，有如下的用法：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj-$(CONFIG_USB_LIBCOMPOSITE)  += libcomposite.o</span><br><span class="line">libcomposite-y          := usbstring.o config.o epautoconf.o</span><br><span class="line">libcomposite-y          += composite.o functions.o configfs.o u_f.o</span><br></pre></td></tr></table></figure><p></p><p>其中<code>libcomposite</code>为目标，下面两行表示要生成这个目标的依赖，也就是需要<code>usbstring.c</code>、<code>config.c</code>、<code>composite.c</code>等。<br>关于这两种用法的解释，在<code>Documentation/kbuild/makefiles.txt</code>的<code>3.1 Goal definitions</code>和<code>3.3 Loadable module goals - obj-m</code>做了详细的描述，现摘录如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">--- 3.1 Goal definitions</span><br><span class="line"></span><br><span class="line">    Goal definitions are the main part (heart) of the kbuild Makefile.</span><br><span class="line">    These lines define the files to be built, any special compilation</span><br><span class="line">    options, and any subdirectories to be entered recursively.</span><br><span class="line"></span><br><span class="line">    The most simple kbuild makefile contains one line:</span><br><span class="line"></span><br><span class="line">    Example:</span><br><span class="line">        obj-y += foo.o</span><br><span class="line"></span><br><span class="line">    This tells kbuild that there is one object in that directory, named</span><br><span class="line">    foo.o. foo.o will be built from foo.c or foo.S.</span><br><span class="line"></span><br><span class="line">    If foo.o shall be built as a module, the variable obj-m is used.</span><br><span class="line">    Therefore the following pattern is often used:</span><br><span class="line"></span><br><span class="line">    Example:</span><br><span class="line">        obj-$(CONFIG_FOO) += foo.o</span><br><span class="line"></span><br><span class="line">    $(CONFIG_FOO) evaluates to either y (for built-in) or m (for module).</span><br><span class="line">    If CONFIG_FOO is neither y nor m, then the file will not be compiled</span><br><span class="line">    nor linked.</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">--- 3.3 Loadable module goals - obj-m</span><br><span class="line"></span><br><span class="line">    $(obj-m) specifies object files which are built as loadable</span><br><span class="line">    kernel modules.</span><br><span class="line"></span><br><span class="line">    A module may be built from one source file or several source</span><br><span class="line">    files. In the case of one source file, the kbuild makefile</span><br><span class="line">    simply adds the file to $(obj-m).</span><br><span class="line"></span><br><span class="line">    Example:</span><br><span class="line">        #drivers/isdn/i4l/Makefile</span><br><span class="line">        obj-$(CONFIG_ISDN_PPP_BSDCOMP) += isdn_bsdcomp.o</span><br><span class="line"></span><br><span class="line">    Note: In this example $(CONFIG_ISDN_PPP_BSDCOMP) evaluates to &apos;m&apos;</span><br><span class="line"></span><br><span class="line">    If a kernel module is built from several source files, you specify</span><br><span class="line">    that you want to build a module in the same way as above; however,</span><br><span class="line">    kbuild needs to know which object files you want to build your</span><br><span class="line">    module from, so you have to tell it by setting a $(&lt;module_name&gt;-y)</span><br><span class="line">    variable.</span><br><span class="line"></span><br><span class="line">    Example:</span><br><span class="line">        #drivers/isdn/i4l/Makefile </span><br><span class="line">        obj-$(CONFIG_ISDN_I4L) += isdn.o</span><br><span class="line">        isdn-y := isdn_net_lib.o isdn_v110.o isdn_common.o</span><br><span class="line"></span><br><span class="line">    In this example, the module name will be isdn.o. Kbuild will</span><br><span class="line">    compile the objects listed in $(isdn-y) and then run</span><br><span class="line">    &quot;$(LD) -r&quot; on the list of these files to generate isdn.o.</span><br><span class="line"></span><br><span class="line">    Due to kbuild recognizing $(&lt;module_name&gt;-y) for composite objects,</span><br><span class="line">    you can use the value of a CONFIG_ symbol to optionally include an</span><br><span class="line">    object file as part of a composite object.</span><br><span class="line"></span><br><span class="line">    Example:</span><br><span class="line">        #fs/ext2/Makefile</span><br><span class="line">            obj-$(CONFIG_EXT2_FS) += ext2.o</span><br><span class="line">        ext2-y := balloc.o dir.o file.o ialloc.o inode.o ioctl.o \</span><br><span class="line">              namei.o super.o symlink.o </span><br><span class="line">            ext2-$(CONFIG_EXT2_FS_XATTR) += xattr.o xattr_user.o \</span><br><span class="line">                        xattr_trusted.o</span><br><span class="line"></span><br><span class="line">    In this example, xattr.o, xattr_user.o and xattr_trusted.o are only</span><br><span class="line">    part of the composite object ext2.o if $(CONFIG_EXT2_FS_XATTR)</span><br><span class="line">    evaluates to &apos;y&apos;.</span><br><span class="line"></span><br><span class="line">    Note: Of course, when you are building objects into the kernel,</span><br><span class="line">    the syntax above will also work. So, if you have CONFIG_EXT2_FS=y,</span><br><span class="line">    kbuild will build an ext2.o file for you out of the individual</span><br><span class="line">    parts and then link this into built-in.o, as you would expect.</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Android编译相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android编译相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用程序打印kernel log</title>
      <link href="/1b13bd9e/"/>
      <url>/1b13bd9e/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h2><p>有时候需要监控应用程序关键动作，因此需要将应用程序的log写入到kernel log的缓冲区去。另外，有时候为了查看应用程序和kernel的时序，需要结合应用程序打印的log和kernel的log来查看前后关系。关于打印输出，<a href="https://elinux.org/Debugging_by_printing" target="_blank" rel="noopener">https://elinux.org/Debugging_by_printing</a> 做了详细的介绍。<a id="more"></a></p><h2 id="kernel-log输出介绍"><a href="#kernel-log输出介绍" class="headerlink" title="kernel log输出介绍"></a>kernel log输出介绍</h2><p>1、<code>dmesg</code>命令官方说明的用法是：</p><blockquote><p>dmesg is used to examine or control the kernel ring buffer. The default action is to read all messages from kernel ring buffer.</p></blockquote><p><code>-n</code>参数可以设置loglevel，详见：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-n, --console-level level</span><br><span class="line">Set  the  level  at  which  logging of messages is done to the console. </span><br><span class="line">The level is a level number or abbreviation of the level name. </span><br><span class="line">For all supported levels see dmesg --help output.</span><br><span class="line">For example, -n 1 or -n alert prevents all messages, except emergency (panic) messages,</span><br><span class="line">from appearing on the console.  All levels  of  messages  are  still  written  to /proc/kmsg, </span><br><span class="line">so  syslogd(8) can still be used to control exactly where kernel messages appear.</span><br><span class="line">When the -n option is used, dmesg will not print or clear the kernel ring buffer.</span><br></pre></td></tr></table></figure><p></p><p>在<code>include/linux/kern_levels.h</code>文件中定义了内核loglevel：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#ifndef __KERN_LEVELS_H__</span><br><span class="line">#define __KERN_LEVELS_H__ </span><br><span class="line"></span><br><span class="line">#define KERN_SOH    &quot;\001&quot;      /* ASCII Start Of Header */</span><br><span class="line">#define KERN_SOH_ASCII  &apos;\001&apos;</span><br><span class="line">   </span><br><span class="line">#define KERN_EMERG  KERN_SOH &quot;0&quot;    /* system is unusable */</span><br><span class="line">#define KERN_ALERT  KERN_SOH &quot;1&quot;    /* action must be taken immediately */</span><br><span class="line">#define KERN_CRIT   KERN_SOH &quot;2&quot;    /* critical conditions */</span><br><span class="line">#define KERN_ERR    KERN_SOH &quot;3&quot;    /* error conditions */</span><br><span class="line">#define KERN_WARNING    KERN_SOH &quot;4&quot;    /* warning conditions */</span><br><span class="line">#define KERN_NOTICE KERN_SOH &quot;5&quot;    /* normal but significant condition */</span><br><span class="line">#define KERN_INFO   KERN_SOH &quot;6&quot;    /* informational */</span><br><span class="line">#define KERN_DEBUG  KERN_SOH &quot;7&quot;    /* debug-level messages */</span><br><span class="line">   </span><br><span class="line">#define KERN_DEFAULT    KERN_SOH &quot;d&quot;    /* the default kernel loglevel */</span><br><span class="line">   </span><br><span class="line">/* </span><br><span class="line"> * Annotation for a &quot;continued&quot; line of log printout (only done after a</span><br><span class="line"> * line that had no enclosing \n). Only to be used by core/arch code</span><br><span class="line"> * during early bootup (a continued line is not SMP-safe otherwise).</span><br><span class="line"> */</span><br><span class="line">#define KERN_CONT   KERN_SOH &quot;c&quot;</span><br><span class="line">   </span><br><span class="line">/* integer equivalents of KERN_&lt;LEVEL&gt; */</span><br><span class="line">#define LOGLEVEL_SCHED      -2  /* Deferred messages from sched code</span><br><span class="line">                     * are set to this special level */</span><br><span class="line">#define LOGLEVEL_DEFAULT    -1  /* default (or last) loglevel */</span><br><span class="line">#define LOGLEVEL_EMERG      0   /* system is unusable */</span><br><span class="line">#define LOGLEVEL_ALERT      1   /* action must be taken immediately */</span><br><span class="line">#define LOGLEVEL_CRIT       2   /* critical conditions */</span><br><span class="line">#define LOGLEVEL_ERR        3   /* error conditions */</span><br><span class="line">#define LOGLEVEL_WARNING    4   /* warning conditions */</span><br><span class="line">#define LOGLEVEL_NOTICE     5   /* normal but significant condition */</span><br><span class="line">#define LOGLEVEL_INFO       6   /* informational */</span><br><span class="line">#define LOGLEVEL_DEBUG      7   /* debug-level messages */</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p></p><p>在终端中可以查看当前设置的loglevel：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cat /proc/sys/kernel/printk</span><br><span class="line">7       4       1       7</span><br><span class="line">currentdefaultminimumboot-time-default</span><br></pre></td></tr></table></figure><p></p><p>关于<code>dmesg</code>的具体实现，可以在<a href="http://androidxref.com/9.0.0_r3/" target="_blank" rel="noopener">androidxref.com</a>中查找或者查看<code>busybox</code>、<code>toybox</code>中关于<code>dmesg</code>命令的实现，最终都是调用<code>klogctl()</code>函数获取到kernel message。<br>查看<code>klogctl</code>函数的帮助文档<code>man klogctl</code>得到关于这个函数的介绍和用法：</p><blockquote><p>syslog, klogctl - read and/or clear kernel message ring buffer; set console_loglevel</p></blockquote><p>2、<code>cat /proc/kmsg</code>打印kernel log<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The kernel log buffer is accessible for reading from userspace by /proc/kmsg. </span><br><span class="line">/proc/kmsg behaves more or less like a FIFO and blocks until new messages appear.</span><br><span class="line">Please note - reading from /proc/kmsg consumes the messages </span><br><span class="line">in the ring buffer so they may not be available for other programs. </span><br><span class="line">It is usually a good idea to let klogd or syslog do this job and read the content of the buffer via dmesg.</span><br></pre></td></tr></table></figure><p></p><p>3、<code>/dev/kmsg</code>设备节点<br>应用程序可以通过<code>/dev/kmsg</code>节点将打印信息写入到kernel log中。关于这个节点详见官方的介绍：<a href="https://www.kernel.org/doc/Documentation/ABI/testing/dev-kmsg" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/ABI/testing/dev-kmsg</a><br>因此，下面的程序就是将log输出到kernel log中。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/mman.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;stdarg.h&gt;</span><br><span class="line"></span><br><span class="line">#define PRINTFK_LOG_BUF_MAX 1024</span><br><span class="line"></span><br><span class="line">enum LogLevel</span><br><span class="line">&#123;</span><br><span class="line">    LOGLEVEL_EMERG = 0,     /* system is unusable */</span><br><span class="line">    LOGLEVEL_ALERT,     /* action must be taken immediately */</span><br><span class="line">    LOGLEVEL_CRIT,      /* critical conditions */</span><br><span class="line">    LOGLEVEL_ERR,       /* error conditions */</span><br><span class="line">    LOGLEVEL_WARNING,   /* warning conditions */</span><br><span class="line">    LOGLEVEL_NOTICE,    /* normal but significant condition */</span><br><span class="line">    LOGLEVEL_INFO,      /* informational */</span><br><span class="line">    LOGLEVEL_DEBUG,     /* debug-level messages */</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void printfk(enum LogLevel level, const char *fmt, ...)</span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    int log_fd;</span><br><span class="line">    int ret;</span><br><span class="line">    char buf[PRINTFK_LOG_BUF_MAX] = &#123;0&#125;;</span><br><span class="line"></span><br><span class="line">    if ((level &lt; LOGLEVEL_EMERG) || (level &gt; LOGLEVEL_DEBUG) || (NULL == fmt)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    buf[0] = &apos;&lt;&apos;;</span><br><span class="line">    buf[1] = &apos;0&apos; + level;</span><br><span class="line">    buf[2] = &apos;&gt;&apos;;</span><br><span class="line">    </span><br><span class="line">    va_start(args, fmt);</span><br><span class="line">    vsnprintf(&amp;buf[3], (PRINTFK_LOG_BUF_MAX - 3), fmt, args);</span><br><span class="line">    log_fd = open(&quot;/dev/kmsg&quot;, O_WRONLY | O_CLOEXEC);</span><br><span class="line">    if (-1 != log_fd) &#123;</span><br><span class="line">        ret = write(log_fd, buf, sizeof(buf));</span><br><span class="line">        close(log_fd);</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    int a = 10;</span><br><span class="line">    char *s = &quot;abcdefgh&quot;;</span><br><span class="line">    printfk(LOGLEVEL_DEBUG, &quot;[xxx] bbbbbbbbb&quot;);</span><br><span class="line">    printfk(LOGLEVEL_DEBUG, &quot;%d, %s&quot;, a, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/karelzak/util-linux/blob/master/sys-utils/dmesg.c" target="_blank" rel="noopener">https://github.com/karelzak/util-linux/blob/master/sys-utils/dmesg.c</a><br><a href="https://github.com/brgl/busybox/blob/master/util-linux/dmesg.c" target="_blank" rel="noopener">https://github.com/brgl/busybox/blob/master/util-linux/dmesg.c</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux Kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>init进程启动失败调查</title>
      <link href="/61eb1c3c/"/>
      <url>/61eb1c3c/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>在做新版本kernel bring up的时候，由于我们没有使用到网络的功能，因此一上来就将内核的<code>CONFIG_NET</code>配置disable掉。<br>kernel启动后在去启动<code>init</code>进程的时候总是启动失败，报panic重启，每次启动都这样，panic log如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[   22.476539] (EE) init: /init.rc: 193: invalid option &apos;seclabel&apos;</span><br><span class="line">[   22.482520] (EE) init: /init.rc: 194: invalid option &apos;seclabel&apos;</span><br><span class="line">[   22.490153] init (1): /proc/1/oom_adj is deprecated, please use /proc/1/oom_score_adj instead.</span><br><span class="line">[   22.498841] (!!) init: starting &apos;ueventd&apos;</span><br><span class="line">[   27.222598] (EE) init: Wait for file /dev/block/mmcblk0p1 timeout</span><br><span class="line">[   27.228916] (EE) init: command &apos;mount ext4 /dev/block/mmcblk0p1 /system wait ro journal_checksum&apos;, r=-1</span><br><span class="line">[   27.238347] (!!) init: processing action 0x2be0ca50 (wait_for_coldboot_done)</span><br><span class="line">[   32.227859] (EE) init: Timed out waiting for /dev/.coldboot_done</span><br><span class="line">[   32.233901] (EE) init: command &apos;wait_for_coldboot_done&apos;, r=-1</span><br><span class="line">[   32.241095] (!!) init: processing action 0x2be0cae0 (property_init)</span><br><span class="line">[   32.247753] (!!) init: processing action 0x2be0cb70 (keychord_init)</span><br><span class="line">[   32.254054] (!!) init: processing action 0x2be0cc00 (console_init)</span><br><span class="line">[   32.260292] (!!) init: processing action 0x2be0cc90 (set_init_properties)</span><br><span class="line">[   32.267130] (!!) init: processing action 0x2be091f0 (init)</span><br><span class="line">[   32.273313] (EE) init: command &apos;write /proc/sys/kernel/hung_task_timeout_secs 0&apos;, r=-2</span><br><span class="line">[   32.281666] (EE) init: command &apos;write /dev/cpuctl/cpu.shares 1024&apos;, r=-22</span><br><span class="line">[   37.247949] (EE) init: command &apos;chown root root /data/lost+found&apos;, r=-2</span><br><span class="line">[   37.254615] (EE) init: command &apos;chmod 0770 /data/lost+found&apos;, r=-2</span><br><span class="line">[   37.261054] (!!) init: processing action 0x2be0cd20 (property_service_init)</span><br><span class="line">[   37.268206] (EE) init: Failed to open socket &apos;property_service&apos;: Function not implemented</span><br><span class="line">[   37.276412] (!!) init: processing action 0x2be0cdb0 (signal_init)</span><br><span class="line">[   37.282541] (!!) init: processing action 0x2be0ce40 (check_startup)</span><br><span class="line">[   37.288831] (EE) init: init startup failure</span><br><span class="line">[   37.293454] Kernel panic - not syncing: Attempted to kill init! exitcode=0x00000100</span><br><span class="line">[   37.293454] </span><br><span class="line">[   37.302597] CPU: 0 PID: 1 Comm: init Not tainted 4.14.62-ge4e3cbe-dirty #3</span><br><span class="line">[   37.309472] Hardware name: Freescale i.MX8QXP MEK (DT)</span><br><span class="line">[   37.314613] Call trace:</span><br><span class="line">[   37.317069] [&lt;ffff0000080899e8&gt;] dump_backtrace+0x0/0x3f8</span><br><span class="line">[   37.322472] [&lt;ffff000008089df4&gt;] show_stack+0x14/0x20</span><br><span class="line">[   37.327528] [&lt;ffff0000089e5338&gt;] dump_stack+0x98/0xb8</span><br><span class="line">[   37.332584] [&lt;ffff0000080cacc0&gt;] panic+0x114/0x27c</span><br><span class="line">[   37.337378] [&lt;ffff0000080cec38&gt;] complete_and_exit+0x0/0x20</span><br><span class="line">[   37.342955] [&lt;ffff0000080cec9c&gt;] do_group_exit+0x34/0x98</span><br><span class="line">[   37.348272] [&lt;ffff0000080ced10&gt;] __wake_up_parent+0x0/0x28</span><br><span class="line">[   37.353763] Exception stack(0xffff000008043ec0 to 0xffff000008044000)</span><br><span class="line">[   37.360212] 3ec0: 0000000000000001 0000000000000000 0000000000000001 000000002bdf26f0</span><br><span class="line">[   37.368046] 3ee0: 0000000000000048 0000000000000000 0000000000000001 7f7f7f7f7f7f7f7f</span><br><span class="line">[   37.375883] 3f00: 000000000000005e 756c696166207075 696e692029454528 2074696e69203a74</span><br><span class="line">[   37.383719] 3f20: 2070757472617473 0a6572756c696166 0000000000000022 0000000000000000</span><br><span class="line">[   37.391554] 3f40: 0000000000000000 0000000000000003 0000000000000000 0000000000000001</span><br><span class="line">[   37.399391] 3f60: 0000000000000001 0000000000000001 00000000004efe68 0000000000522200</span><br><span class="line">[   37.407227] 3f80: 00000000004d5000 0000000000000000 0000000000000000 0000000000000000</span><br><span class="line">[   37.415063] 3fa0: 0000000000000000 0000fffff4b35680 0000000000468a78 0000fffff4b35680</span><br><span class="line">[   37.422899] 3fc0: 0000000000490e14 0000000060000000 0000000000000001 000000000000005e</span><br><span class="line">[   37.430735] 3fe0: 0000000000000000 0000000000000000 0000000000000000 0000000000000000</span><br><span class="line">[   37.438572] [&lt;ffff000008083ac0&gt;] el0_svc_naked+0x34/0x38</span><br><span class="line">[   37.443890] SMP: stopping secondary CPUs</span><br><span class="line">[   37.447815] Kernel Offset: disabled</span><br><span class="line">[   37.451304] CPU features: 0x0802008</span><br><span class="line">[   37.454787] Memory Limit: none</span><br><span class="line">[   37.457841] Rebooting in 1 seconds..</span><br></pre></td></tr></table></figure><p></p><p>受到<a href="http://gityuan.com/2016/02/05/android-init/" target="_blank" rel="noopener">Android系统启动-Init篇</a>的启发，在启动<code>init</code>进程的时候会进行socket通信。而socket通信又是基于网络的功能。所以，我们将<code>CONFIG_NET</code>整个网络功能关掉了，肯定要出问题的。<br><code>net/socket.c</code>是<code>effectively the top level interface to the BSD socket paradigm</code>，因此，需要将<code>CONFIG_NET</code>打开。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 碰到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碰到的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>insmod版本不匹配问题</title>
      <link href="/33ec4d70/"/>
      <url>/33ec4d70/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p><code>insmod xxxdrv.ko</code>时候出现如下错误：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[   55.775651] xxxdrv: version magic &apos;3.14.19+ SMP mod_unload ARMv7 p2v8 &apos; should be &apos;3.14.19 SMP mod_unload ARMv7 p2v8 &apos;</span><br><span class="line">insmod: init_module &apos;/system/lib/modules/xxxdrv.ko&apos; failed (Exec format error)</span><br></pre></td></tr></table></figure><p></p><p>很明显，版本号<code>3.14.19+</code>后面多了个<code>+</code>号，<code>+</code>是为了标记说这个kernel是不干净的。这个<code>+</code>号是<code>scripts/setlocalversion</code>文件中调用<code>scm_version()</code>函数检查<code>Kernel_SrcDir/</code>目录下的<code>.scmversion</code>文件。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># CONFIG_LOCALVERSION and LOCALVERSION (if set)</span><br><span class="line">res=&quot;$&#123;res&#125;$&#123;CONFIG_LOCALVERSION&#125;$&#123;LOCALVERSION&#125;&quot;</span><br><span class="line"></span><br><span class="line"># scm version string if not at a tagged commit</span><br><span class="line">if test &quot;$CONFIG_LOCALVERSION_AUTO&quot; = &quot;y&quot;; then</span><br><span class="line">    # full scm version string</span><br><span class="line">    res=&quot;$res$(scm_version)&quot;</span><br><span class="line">else</span><br><span class="line">    # append a plus sign if the repository is not in a clean</span><br><span class="line">    # annotated or signed tagged state (as git describe only</span><br><span class="line">    # looks at signed or annotated tags - git tag -a/-s) and</span><br><span class="line">    # LOCALVERSION= is not specified</span><br><span class="line">    if test &quot;$&#123;LOCALVERSION+set&#125;&quot; != &quot;set&quot;; then</span><br><span class="line">        scm=$(scm_version --short)</span><br><span class="line">        #res=&quot;$res$&#123;scm:++&#125;&quot;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p></p><p>如果要去除掉<code>+</code>号，需要设置</p><ul><li><code>LOCALVERSION</code>设为为空；</li><li>在<code>defconfig</code>中设置<code>CONFIG_LOCALVERSION_AUTO is not set</code>；</li><li>在<code>Kernel_SrcDir/</code>目录下创建空的<code>.scmversion</code>文件。</li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 碰到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碰到的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>valgrind使用</title>
      <link href="/bd3ef1e4/"/>
      <url>/bd3ef1e4/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Valgrind</code>是构建动态分析工具的框架，<code>Valgrind</code>工具可以自动检测许多内存管理和线程错误，并详细介绍您的程序，还可以使用<code>Valgrind</code>构建新工具。</p><p>官网：<a href="http://valgrind.org/" target="_blank" rel="noopener">http://valgrind.org/</a><br>valgrind的使用：<a href="http://valgrind.org/docs/manual/manual.html" target="_blank" rel="noopener">http://valgrind.org/docs/manual/manual.html</a><br>下载地址：<code>git clone git://sourceware.org/git/valgrind.git</code></p><a id="more"></a><hr><h2 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h2><p>查看<code>README.aarch64</code>和<code>README.android</code>文件：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Building</span><br><span class="line">~~~~~~~~</span><br><span class="line"></span><br><span class="line">You could probably build it directly on a target OS, using the normal</span><br><span class="line">non-cross scheme</span><br><span class="line"></span><br><span class="line">  ./autogen.sh ; ./configure --prefix=.. ; make ; make install</span><br><span class="line"></span><br><span class="line">Development so far was however done by cross compiling, viz:</span><br><span class="line"></span><br><span class="line">  export CC=aarch64-linux-gnu-gcc</span><br><span class="line">  export LD=aarch64-linux-gnu-ld</span><br><span class="line">  export AR=aarch64-linux-gnu-ar</span><br><span class="line"></span><br><span class="line">  ./autogen.sh</span><br><span class="line">  ./configure --prefix=`pwd`/Inst --host=aarch64-unknown-linux \</span><br><span class="line">              --enable-only64bit</span><br><span class="line">  make -j4</span><br><span class="line">  make -j4 install</span><br><span class="line"></span><br><span class="line">Doing this assumes that the install path (`pwd`/Inst) is valid on</span><br><span class="line">both host and target, which isn&apos;t normally the case.  To avoid</span><br><span class="line">this limitation, do instead:</span><br><span class="line"></span><br><span class="line">  ./configure --prefix=/install/path/on/target \</span><br><span class="line">              --host=aarch64-unknown-linux \</span><br><span class="line">              --enable-only64bit</span><br><span class="line">  make -j4</span><br><span class="line">  make -j4 install DESTDIR=/a/temp/dir/on/host</span><br><span class="line">  # and then copy the contents of DESTDIR to the target.</span><br><span class="line"></span><br><span class="line">See README.android for more examples of cross-compile building.</span><br></pre></td></tr></table></figure><p></p><p>参照上面的做法，开始交叉编译：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mkdir out</span><br><span class="line">export CC=~/disk2/work2/imx8x/toolchains/aarch64-imx8x-linux/bin/aarch64-poky-linux-gcc</span><br><span class="line">export LD=~/disk2/work2/imx8x/toolchains/aarch64-imx8x-linux/bin/aarch64-poky-linux-ld</span><br><span class="line">export AR=~/disk2/work2/imx8x/toolchains/aarch64-imx8x-linux/bin/aarch64-poky-linux-ar</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --prefix=/home/victor/disk2/work2/util/valgrind/out/ \</span><br><span class="line">              --host=aarch64-poky-linux \</span><br><span class="line">              --enable-only64bit</span><br><span class="line">make -j4</span><br><span class="line">make -j4 install</span><br></pre></td></tr></table></figure><p></p><p>编译生成的文件放在<code>./out</code>目录下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~/disk2/work2/util/valgrind# ll out/</span><br><span class="line">total 20</span><br><span class="line">drwxrwxr-x  5 victor victor 4096 3月  20 16:27 .</span><br><span class="line">drwxrwxr-x 29 victor victor 4096 3月  20 16:27 ..</span><br><span class="line">drwxrwxr-x  2 victor victor 4096 3月  20 16:27 bin</span><br><span class="line">drwxrwxr-x  3 victor victor 4096 3月  20 16:27 include</span><br><span class="line">drwxrwxr-x  4 victor victor 4096 3月  20 16:27 lib</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="拷贝到目标板子上"><a href="#拷贝到目标板子上" class="headerlink" title="拷贝到目标板子上"></a>拷贝到目标板子上</h2><p>1、拷贝方法一：<br>将编译出来的<code>out/</code>目录整个拷贝到目标板子上，比如说拷贝到目标板子的<code>/var/</code>目录下，然后设置环境变量<code>export VALGRIND_LIB=&quot;/out/bin/lib/valgrind&quot;</code>，设置完毕后就可以进入到<code>cd /var/bin/bin</code>目录下开始执行<code>valgrind</code>命令。<br>如果这里不执行设置环境变量，运行<code>valgrind</code>会出现如下错误：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valgrind: failed to start tool &apos;memcheck&apos; for platform &apos;arm-linux&apos;: No such file or directory</span><br></pre></td></tr></table></figure><p></p><p>2、拷贝方法二：<br>将生成的 <code>bin/</code>、<code>include/</code>、<code>lib/</code>三个文件的内容放到目标板子上对应的位置，就可以直接执行<code>valgrind</code>命令了。</p><hr><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>在板子上执行如下命令测试应用程序：<br><code>./valgrind --leak-check=full /var/test_app</code>，正常情况下，就能够开始检查并输出结果，但是我的这边执行结果如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Fatal error at startup: a function redirection</span><br><span class="line">which is mandatory for this platform-tool combination</span><br><span class="line">cannot be set up.  Details of the redirection are:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">valgrind:  Fatal error at startup: a function redirection</span><br><span class="line">valgrind:  which is mandatory for this platform-tool combination</span><br><span class="line">valgrind:  cannot be set up.  Details of the redirection are:</span><br><span class="line">valgrind:  </span><br><span class="line">valgrind:  A must-be-redirected function</span><br><span class="line">valgrind:  whose name matches the pattern:      strlen</span><br><span class="line">valgrind:  in an object with soname matching:   ld-linux-aarch64.so.1</span><br><span class="line">valgrind:  was not found whilst processing</span><br><span class="line">valgrind:  symbols from the object with soname: ld-linux-aarch64.so.1</span><br><span class="line">valgrind:  </span><br><span class="line">valgrind:  Possible fixes: (1, short term): install glibc&apos;s debuginfo</span><br><span class="line">valgrind:  package on this machine.  (2, longer term): ask the packagers</span><br><span class="line">valgrind:  for your Linux distribution to please in future ship a non-</span><br><span class="line">valgrind:  stripped ld.so (or whatever the dynamic linker .so is called)</span><br><span class="line">valgrind:  that exports the above-named function using the standard</span><br><span class="line">valgrind:  calling conventions for this platform.  The package you need</span><br><span class="line">valgrind:  to install for fix (1) is called</span><br><span class="line">valgrind:  </span><br><span class="line">valgrind:    On Debian, Ubuntu:                 libc6-dbg</span><br><span class="line">valgrind:    On SuSE, openSuSE, Fedora, RHEL:   glibc-debuginfo</span><br><span class="line">valgrind:  </span><br><span class="line">valgrind:  Note that if you are debugging a 32 bit process on a</span><br><span class="line">valgrind:  64 bit system, you will need a corresponding 32 bit debuginfo</span><br><span class="line">valgrind:  package (e.g. libc6-dbg:i386).</span><br><span class="line">valgrind:  </span><br><span class="line">valgrind:  Cannot continue -- exiting now.  Sorry.</span><br></pre></td></tr></table></figure><p></p><p>按照上面的提示，就是说<code>ld-linux-aarch64.so.1</code>文件不带debuginfo的，也就是<code>stripped</code>的，调试信息已经被剥离，所以<code>valgrind</code>无法运行。果然，找到板子上的<code>ld-linux-aarch64.so.1</code>执行<code>file</code>命令，看到的结果是<code>stripped</code>。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># file ld-linux-aarch64.so.1</span><br><span class="line">ld-linux-aarch64.so.1: symbolic link to ld-2.27.so</span><br><span class="line"># file ld-2.27.so</span><br><span class="line">ld-2.27.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, stripped</span><br></pre></td></tr></table></figure><p></p><p>关于<code>stripped</code>和<code>not-stripped</code>的区别在：<br><a href="https://unix.stackexchange.com/questions/2969/what-are-stripped-and-not-stripped-executables-in-unix" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/2969/what-are-stripped-and-not-stripped-executables-in-unix</a><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">If you compile an executable with gcc&apos;s -g flag, it contains debugging information. </span><br><span class="line">That means for each instruction there is information which line of the source code generated it, </span><br><span class="line">the name of the variables in the source code is retained </span><br><span class="line">and can be associated to the matching memory at runtime etc. </span><br><span class="line">Strip can remove this debugging information </span><br><span class="line">and other data included in the executable which is not necessary for execution </span><br><span class="line">in order to reduce the size of the executable.</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h3><p>按照提示，我们需要使用到<code>not-stripped</code>的<code>ld-linux-aarch64.so.1</code>文件，刚好看到yocto上有编译出<code>valgrind</code>，lib文件放在<code>tmp/work/aarch64-poky-linux/valgrind/3.13.0-r0/recipe-sysroot/lib</code>目录下，查看到<code>ld-linux-aarch64.so.1</code>的文件类型是<code>not stripped</code>类型，符合我们的要求。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># file ld-linux-aarch64.so.1</span><br><span class="line">ld-linux-aarch64.so.1: symbolic link to ld-2.27.so</span><br><span class="line"># file ld-2.27.so</span><br><span class="line">ld-2.27.so: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, not stripped</span><br></pre></td></tr></table></figure><p></p><p>解决方法就是将其拷贝到目标板子上，当然，这里不单单是要拷贝<code>ld-linux-aarch64.so.1</code>文件，也要拷贝<code>libc.so.6</code>和<code>libc-2.27.so</code>文件。<br>当然，这个只是临时的测试方法，最最根据的解决办法还是在系统中编译出带<code>not stripped</code>的文件。</p><hr><h3 id="解决方法二"><a href="#解决方法二" class="headerlink" title="解决方法二"></a>解决方法二</h3><p>因为yocto有现成编译好的<code>valgrind</code>，所以我们之间将<code>tmp/work/aarch64-poky-linux/valgrind/3.13.0-r0/image/</code>生成的可执行文件和库之间拷贝到目标板子上，参照上面的拷贝方法，此方法可以顺利的运行，不需要用到<code>not-stripped</code>类型的<code>ld-linux-aarch64.so.1</code>文件。<br>这里遗留了一个问题，就是yocto编译的<code>valgrind</code>和我们自己交叉编译出来的<code>valgrind</code>对<code>ld-linux-aarch64.so.1</code>文件<code>stripped</code>和<code>not stripped</code>的依赖程度不一样。yocto不需要<code>not stripped</code>的，而我们自己交叉编译出来的需要。</p><hr><h2 id="再次运行"><a href="#再次运行" class="headerlink" title="再次运行"></a>再次运行</h2><p>我们准备了一个测试程序<code>test_app</code>，如下，这个程序有<code>malloc</code>但是没有<code>free</code>，保证会内存泄露。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;      </span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123; </span><br><span class="line">    printf(&quot;[xxx] 111\n&quot;);</span><br><span class="line">    int *p = malloc(50);</span><br><span class="line">    printf(&quot;[xxx] 222\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用<code>valgrind</code>运行检查<code>test_app</code>程序：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@android:/var/out/bin # ./valgrind --leak-check=full /var/test_app</span><br><span class="line">==1661== Memcheck, a memory error detector</span><br><span class="line">==1661== Copyright (C) 2002-2017, and GNU GPL&apos;d, by Julian Seward et al.</span><br><span class="line">==1661== Using Valgrind-3.15.0.GIT and LibVEX; rerun with -h for copyright info</span><br><span class="line">==1661== Command: /var/test_app</span><br><span class="line">==1661==</span><br><span class="line">[xxx] 111</span><br><span class="line">[xxx] 222</span><br><span class="line">==1661==</span><br><span class="line">==1661== HEAP SUMMARY:</span><br><span class="line">==1661==     in use at exit: 50 bytes in 1 blocks</span><br><span class="line">==1661==   total heap usage: 2 allocs, 1 frees, 4,146 bytes allocated</span><br><span class="line">==1661==</span><br><span class="line">==1661== 50 bytes in 1 blocks are definitely lost in loss record 1 of 1</span><br><span class="line">==1661==    at 0x4845100: malloc (vg_replace_malloc.c:309)</span><br><span class="line">==1661==    by 0x40060F: main (test_app.c:7)</span><br><span class="line">==1661==</span><br><span class="line">==1661== LEAK SUMMARY:</span><br><span class="line">==1661==    definitely lost: 50 bytes in 1 blocks</span><br><span class="line">==1661==    indirectly lost: 0 bytes in 0 blocks</span><br><span class="line">==1661==      possibly lost: 0 bytes in 0 blocks</span><br><span class="line">==1661==    still reachable: 0 bytes in 0 blocks</span><br><span class="line">==1661==         suppressed: 0 bytes in 0 blocks</span><br><span class="line">==1661==</span><br><span class="line">==1661== For lists of detected and suppressed errors, rerun with: -s</span><br><span class="line">==1661== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)</span><br></pre></td></tr></table></figure><p></p><p>从上面可以很清楚的看出，出现了50个字节的内存泄露，泄露位置在<code>test_app.c</code>的第7行。其中<code>0x40060F</code>为堆栈信息，可以通过<code>objdump</code>反汇编出来，比如说：<code>aarch64-poky-linux-objdump -d -l -f -g -S test_app &gt; test_app_objdump.txt</code>，或者使用<code>addr2line</code>查看代码所在位置<code>aarch64-poky-linux-addr2line -e test_app 0x40060F</code>。如果<code>addr2line</code>出来的结果是<code>??:0</code>，可以去解析带<code>not stripped</code>的<code>test_app</code>的二进制文件，通常放在<code>out/target/xxx/yyy/symbol/</code>文件下。</p><hr><h2 id="可能出现的错误"><a href="#可能出现的错误" class="headerlink" title="可能出现的错误"></a>可能出现的错误</h2><p>如果在运行<code>valgrind</code>一直刷新如下log，可以使用带<code>--undef-value-errors=no</code>的参数进行过滤。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==56903== Use of uninitialised value of size 8</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://blog.csdn.net/breaksoftware/article/details/79429330" target="_blank" rel="noopener">内存、性能问题分析的利器——valgraind</a><br><a href="https://blog.csdn.net/breaksoftware/article/details/79445591" target="_blank" rel="noopener">内存问题分析的利器——valgraind的memcheck</a><br><a href="https://www.cnblogs.com/AndyStudy/p/6409287.html" target="_blank" rel="noopener">valgrind 工具介绍和简单的使用</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 性能测试工具</title>
      <link href="/97742f2b/"/>
      <url>/97742f2b/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="Linux性能测试工具"><a href="#Linux性能测试工具" class="headerlink" title="Linux性能测试工具"></a>Linux性能测试工具</h2><p>在<a href="http://lbs.sourceforge.net/" target="_blank" rel="noopener">Linux Benchmark Suite Homepage</a>网站上列举了诸多Linux性能测试工具，包括CPU/RAM/ROM/Cache/net等性能测试。<br><code>iozone</code>工具我们在前面的文章中已经介绍和使用过了。今天，我们主要来玩一下关于<code>RAM</code>的读写性能测试。<a id="more"></a></p><hr><h2 id="lmbench"><a href="#lmbench" class="headerlink" title="lmbench"></a>lmbench</h2><h3 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h3><p>这个工具集中包含以下几种测试工具，我们主要使用到<code>bw_mem</code>工具进行Memory read和write测试。</p><p>1、Bandwidth benchmarks(带宽测试)</p><ul><li>Cached file read</li><li>Memory copy (bcopy)</li><li>Memory read</li><li>Memory write</li><li>Pipe</li><li>TCP</li></ul><p>2、Latency benchmarks(延时测试)</p><ul><li>Context switching.</li><li>Networking: connection establishment, pipe, TCP, UDP, and RPC hot potato</li><li>File system creates and deletes.</li><li>Process creation.</li><li>Signal handling</li><li>System call overhead</li><li>Memory read latency</li></ul><p>3、Miscellanious</p><ul><li>Processor clock rate calculation</li></ul><h3 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h3><p>1、从 How do I get LMbench? 或者从<a href="https://github.com/tonyho/ARM_BenchMark" target="_blank" rel="noopener">github</a>下载源码；<br>2、设置交叉工具链和编译FLAG<br>修改<code>src/Makefile</code>中的<code>CC</code>和<code>EXFLAGS</code>为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CC=/home/xxx/work2/xxx/imx8x/prebuilt/toolchains/aarch64-imx8x-linux/bin/aarch64-poky-linux-gcc</span><br><span class="line">EXFLAGS=-static -march=armv8-a -mfpu=neon -mfloat-abi=hard -mtune=cortex-a35 -funroll-loops</span><br></pre></td></tr></table></figure><p></p><p>3、编译<br>使用<code>make OS=arm-linux build</code>编译。<br>如果出现如下错误：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cd src &amp;&amp; make</span><br><span class="line">make[1]: Entering directory &apos;/home/xxx/work2/util/lmbench3/src&apos;</span><br><span class="line">make[2]: Entering directory &apos;/home/xxx/work2/util/lmbench3/src&apos;</span><br><span class="line">make[2]: *** No rule to make target &apos;../SCCS/s.ChangeSet&apos;, needed by &apos;bk.ver&apos;.  Stop.</span><br><span class="line">make[2]: Leaving directory &apos;/home/xxx/work2/util/lmbench3/src&apos;</span><br><span class="line">Makefile:117: recipe for target &apos;lmbench&apos; failed</span><br><span class="line">make[1]: *** [lmbench] Error 2</span><br><span class="line">make[1]: Leaving directory &apos;/home/xxx/work2/util/lmbench3/src&apos;</span><br><span class="line">Makefile:20: recipe for target &apos;build&apos; failed</span><br><span class="line">make: *** [build] Error 2</span><br></pre></td></tr></table></figure><p></p><p>解决办法就是创建一个文件。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir SCCS</span><br><span class="line">cd SCCS</span><br><span class="line">touch s.ChangeSet</span><br></pre></td></tr></table></figure><p></p><p>上述编译好了之后，就可以在<code>/bin/arm-linux/</code>目录下生成可执行文件，关于各个可执行文件的用法，可以简要的参照：<br><a href="http://www.bitmover.com/lmbench/man_lmbench.html" target="_blank" rel="noopener">lmbench1.0 manual pages</a><br><a href="http://lmbench.sourceforge.net/man/lmbench.8.html" target="_blank" rel="noopener">lmbench</a></p><h3 id="memory性能测试"><a href="#memory性能测试" class="headerlink" title="memory性能测试"></a>memory性能测试</h3><p>将<code>bw_mem</code>文件拷贝到板子上运行如下命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@android:/var # ./bw_mem 256M wr                                              </span><br><span class="line">268.44 573.30</span><br><span class="line">@android:/var # ./bw_mem 256M fwr                                             </span><br><span class="line">268.44 3034.69</span><br><span class="line">@android:/var #</span><br><span class="line">@android:/var #</span><br><span class="line">@android:/var # ./bw_mem 256M rd                                              </span><br><span class="line">268.44 896.46</span><br><span class="line">@android:/var # ./bw_mem 256M frd                                             </span><br><span class="line">268.44 867.99</span><br></pre></td></tr></table></figure><p></p><p>各个参数含义如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* rd - 4 byte read, 32 byte stride</span><br><span class="line">* wr - 4 byte write, 32 byte stride</span><br><span class="line">* rdwr - 4 byte read followed by 4 byte write to same place, 32 byte stride</span><br><span class="line">* cp - 4 byte read then 4 byte write to different place, 32 byte stride</span><br><span class="line">* fwr - write every 4 byte word</span><br><span class="line">* frd - read every 4 byte word</span><br><span class="line">* fcp - copy every 4 byte word</span><br><span class="line">*</span><br><span class="line">* All tests do 512 byte chunks in a loop.</span><br><span class="line">*                        </span><br><span class="line">* XXX - do a 64bit version of this.</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p></p><p>输出结果为<code>megabytes, megabytes_per_second</code>。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://processors.wiki.ti.com/index.php/Lmbench" target="_blank" rel="noopener">Lmbench-Ti</a><br><a href="http://www.bitmover.com/lmbench/" target="_blank" rel="noopener">LMbench - Tools for Performance Analysis</a></p><hr><h2 id="STREAM"><a href="#STREAM" class="headerlink" title="STREAM"></a>STREAM</h2><p>官方的说法是：</p><blockquote><p>The STREAM benchmark is a simple synthetic benchmark program that measures sustainable memory bandwidth (in MB/s) and the corresponding computation rate for simple vector kernels.</p></blockquote><p>翻译过来就是：<br><code>STREAM benchmark</code>是一个简单的综合基准测试程序，用于测量可持续存储器带宽（以MB/s为单位）和简单矢量内核的相应计算速率。</p><h3 id="交叉编译-1"><a href="#交叉编译-1" class="headerlink" title="交叉编译"></a>交叉编译</h3><p>1、下载源码<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir STREAM</span><br><span class="line">cd STREAM</span><br><span class="line">wget -r -R &apos;index*&apos; -np -nH --cut-dirs=3 http://www.cs.virginia.edu/stream/FTP/Code/</span><br></pre></td></tr></table></figure><p></p><p>2、指定交叉工具链：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CC=/home/xxx/work2/xxx/imx8x/prebuilt/toolchains/aarch64-imx8x-linux/bin/aarch64-poky-linux-gcc</span><br></pre></td></tr></table></figure><p></p><p>在编译的时候，需要指定一些参数，这些参数对结果影响很大，建议直接查看<code>stream.c</code>源文件。</p><p>3、编译c语言版本的工具<code>make stream_c.exe</code>，生成<code>stream_c.exe</code>可执行文件。</p><p>4、执行结果为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@android:/var # ./stream_c.exe                                                </span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">STREAM version $Revision: 5.10 $</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">This system uses 8 bytes per array element.</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">Array size = 10000000 (elements), Offset = 0 (elements)</span><br><span class="line">Memory per array = 76.3 MiB (= 0.1 GiB).</span><br><span class="line">Total memory required = 228.9 MiB (= 0.2 GiB).</span><br><span class="line">Each kernel will be executed 10 times.</span><br><span class="line">The *best* time for each kernel (excluding the first iteration)</span><br><span class="line">will be used to compute the reported bandwidth.</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">Your clock granularity/precision appears to be 1 microseconds.</span><br><span class="line">Each test below will take on the order of 134214 microseconds.</span><br><span class="line">   (= 134214 clock ticks)</span><br><span class="line">Increase the size of the arrays if this shows that</span><br><span class="line">you are not getting at least 20 clock ticks per test.</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">WARNING -- The above is only a rough guideline.</span><br><span class="line">For best results, please be sure you know the</span><br><span class="line">precision of your system timer.</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">Function    Best Rate MB/s  Avg time     Min time     Max time</span><br><span class="line">Copy:            1731.3     0.106711     0.092416     0.125942</span><br><span class="line">Scale:           1294.3     0.140618     0.123622     0.164197</span><br><span class="line">Add:             1107.7     0.232000     0.216672     0.263167</span><br><span class="line">Triad:            991.0     0.252958     0.242168     0.276101</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">Solution Validates: avg error less than 1.000000e-13 on all three arrays</span><br><span class="line">-------------------------------------------------------------</span><br></pre></td></tr></table></figure><p></p><p>目前还不知道这个结果都是些什么，与上文的<code>lmbench</code>的<code>bw_mem</code>工具差异蛮的的，有待后续研究。</p><p><code>STREAM</code>参考资料如下：<br><a href="http://www.cs.virginia.edu/stream/" target="_blank" rel="noopener">STREAM: Sustainable Memory Bandwidth in High Performance Computers</a><br><a href="https://www.cs.virginia.edu/stream/ref.html" target="_blank" rel="noopener">What is STREAM</a><br><a href="https://gitlab.com/arm-hpc/packages/wikis/packages/stream" target="_blank" rel="noopener">stream gitlab</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>u-boot启动流程</title>
      <link href="/146db8db/"/>
      <url>/146db8db/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>以下内容根据wowo的文章进行整理学习，多数内容拷贝自wowo的文章，在适当的地方添加自己的理解，在此非常感谢wowo的大神们。</p><ul><li>u-boot版本：2017.03</li><li>开发板：imx8qxp mek</li><li>u-boot配置：未打开SPL</li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<code>README</code>文件中的<code>Board Initialisation Flow</code>章节有关于板级初始化流程的说明，如下：<br>整个u-boot的流程都按照下面的规定走：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">Board Initialisation Flow:</span><br><span class="line">--------------------------</span><br><span class="line"></span><br><span class="line">This is the intended start-up flow for boards. This should apply for both</span><br><span class="line">SPL and U-Boot proper (i.e. they both follow the same rules).</span><br><span class="line"></span><br><span class="line">Note: &quot;SPL&quot; stands for &quot;Secondary Program Loader,&quot; which is explained in</span><br><span class="line">more detail later in this file.</span><br><span class="line"></span><br><span class="line">At present, SPL mostly uses a separate code path, but the function names</span><br><span class="line">and roles of each function are the same. Some boards or architectures</span><br><span class="line">may not conform to this.  At least most ARM boards which use</span><br><span class="line">CONFIG_SPL_FRAMEWORK conform to this.</span><br><span class="line"></span><br><span class="line">Execution typically starts with an architecture-specific (and possibly</span><br><span class="line">CPU-specific) start.S file, such as:</span><br><span class="line"></span><br><span class="line">     - arch/arm/cpu/armv7/start.S</span><br><span class="line">     - arch/powerpc/cpu/mpc83xx/start.S</span><br><span class="line">     - arch/mips/cpu/start.S</span><br><span class="line"></span><br><span class="line">and so on. From there, three functions are called; the purpose and</span><br><span class="line">limitations of each of these functions are described below.</span><br><span class="line"></span><br><span class="line">lowlevel_init():</span><br><span class="line">     - purpose: essential init to permit execution to reach board_init_f()</span><br><span class="line">     - no global_data or BSS</span><br><span class="line">     - there is no stack (ARMv7 may have one but it will soon be removed)</span><br><span class="line">     - must not set up SDRAM or use console</span><br><span class="line">     - must only do the bare minimum to allow execution to continue to</span><br><span class="line">          board_init_f()</span><br><span class="line">     - this is almost never needed</span><br><span class="line">     - return normally from this function</span><br><span class="line"></span><br><span class="line">board_init_f():</span><br><span class="line">     - purpose: set up the machine ready for running board_init_r():</span><br><span class="line">          i.e. SDRAM and serial UART</span><br><span class="line">     - global_data is available</span><br><span class="line">     - stack is in SRAM</span><br><span class="line">     - BSS is not available, so you cannot use global/static variables,</span><br><span class="line">          only stack variables and global_data</span><br><span class="line"></span><br><span class="line">     Non-SPL-specific notes:</span><br><span class="line">     - dram_init() is called to set up DRAM. If already done in SPL this</span><br><span class="line">          can do nothing</span><br><span class="line"></span><br><span class="line">     SPL-specific notes:</span><br><span class="line">     - you can override the entire board_init_f() function with your own</span><br><span class="line">          version as needed.</span><br><span class="line">     - preloader_console_init() can be called here in extremis</span><br><span class="line">     - should set up SDRAM, and anything needed to make the UART work</span><br><span class="line">     - these is no need to clear BSS, it will be done by crt0.S</span><br><span class="line">     - must return normally from this function (don&apos;t call board_init_r()</span><br><span class="line">          directly)</span><br><span class="line"></span><br><span class="line">Here the BSS is cleared. For SPL, if CONFIG_SPL_STACK_R is defined, then at</span><br><span class="line">this point the stack and global_data are relocated to below</span><br><span class="line">CONFIG_SPL_STACK_R_ADDR. For non-SPL, U-Boot is relocated to run at the top of</span><br><span class="line">memory.</span><br><span class="line"></span><br><span class="line">board_init_r():</span><br><span class="line">     - purpose: main execution, common code</span><br><span class="line">     - global_data is available</span><br><span class="line">     - SDRAM is available</span><br><span class="line">     - BSS is available, all static/global variables can be used</span><br><span class="line">     - execution eventually continues to main_loop()</span><br><span class="line"></span><br><span class="line">     Non-SPL-specific notes:</span><br><span class="line">     - U-Boot is relocated to the top of memory and is now running from</span><br><span class="line">          there.</span><br><span class="line"></span><br><span class="line">     SPL-specific notes:</span><br><span class="line">     - stack is optionally in SDRAM, if CONFIG_SPL_STACK_R is defined and</span><br><span class="line">          CONFIG_SPL_STACK_R_ADDR points into SDRAM</span><br><span class="line">     - preloader_console_init() can be called here - typically this is</span><br><span class="line">          done by selecting CONFIG_SPL_BOARD_INIT and then supplying a</span><br><span class="line">          spl_board_init() function containing this call</span><br><span class="line">     - loads U-Boot or (in falcon mode) Linux</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><hr><h2 id="u-boot入口"><a href="#u-boot入口" class="headerlink" title="u-boot入口"></a>u-boot入口</h2><p>在<code>arch/arm/cpu/armv8/start.S</code>文件中定义：<br>调用顺序为： <code>_start</code> → <code>lowlevel_init</code> → <code>_main</code></p><ul><li><code>_start</code>为u-boot启动后的第一个执行地址。之所以是第一个执行的地址，是在<code>arch/arm/cpu/armv8/u-boot.lds</code>链接文件中指定的。</li><li><code>lowlevel_init()</code>一般不需要实现，现在基本不用了。</li><li><code>_main</code>为arm公共的，在<code>./arch/arm/lib/crt0_64.S</code>中定义，下面说明<code>_main</code>的实现。</li></ul><hr><h2 id="main简要说明"><a href="#main简要说明" class="headerlink" title="_main简要说明"></a><code>_main</code>简要说明</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* This file handles the target-independent stages of the U-Boot</span></span><br><span class="line"><span class="comment">* start-up where a C runtime environment is needed. Its entry point</span></span><br><span class="line"><span class="comment">* is _main and is branched into from the target's start.S file.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* _main execution sequence is:</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 1. Set up initial environment for calling board_init_f().</span></span><br><span class="line"><span class="comment">*    This environment only provides a stack and a place to store</span></span><br><span class="line"><span class="comment">*    the GD ('global data') structure, both located in some readily</span></span><br><span class="line"><span class="comment">*    available RAM (SRAM, locked cache...). In this context, VARIABLE</span></span><br><span class="line"><span class="comment">*    global data, initialized or not (BSS), are UNAVAILABLE; only</span></span><br><span class="line"><span class="comment">*    CONSTANT initialized data are available. GD should be zeroed</span></span><br><span class="line"><span class="comment">*    before board_init_f() is called.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 2. Call board_init_f(). This function prepares the hardware for</span></span><br><span class="line"><span class="comment">*    execution from system RAM (DRAM, DDR...) As system RAM may not</span></span><br><span class="line"><span class="comment">*    be available yet, , board_init_f() must use the current GD to</span></span><br><span class="line"><span class="comment">*    store any data which must be passed on to later stages. These</span></span><br><span class="line"><span class="comment">*    data include the relocation destination, the future stack, and</span></span><br><span class="line"><span class="comment">*    the future GD location.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 3. Set up intermediate environment where the stack and GD are the</span></span><br><span class="line"><span class="comment">*    ones allocated by board_init_f() in system RAM, but BSS and</span></span><br><span class="line"><span class="comment">*    initialized non-const data are still not available.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 4a.For U-Boot proper (not SPL), call relocate_code(). This function</span></span><br><span class="line"><span class="comment">*    relocates U-Boot from its current location into the relocation</span></span><br><span class="line"><span class="comment">*    destination computed by board_init_f().</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 4b.For SPL, board_init_f() just returns (to crt0). There is no</span></span><br><span class="line"><span class="comment">*    code relocation in SPL.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 5. Set up final environment for calling board_init_r(). This</span></span><br><span class="line"><span class="comment">*    environment has BSS (initialized to 0), initialized non-const</span></span><br><span class="line"><span class="comment">*    data (initialized to their intended value), and stack in system</span></span><br><span class="line"><span class="comment">*    RAM (for SPL moving the stack and GD into RAM is optional - see</span></span><br><span class="line"><span class="comment">*    CONFIG_SPL_STACK_R). GD has retained values set by board_init_f().</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">TODO:</span> For SPL, implement stack relocation on AArch64.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 6. For U-Boot proper (not SPL), some CPUs have some work left to do</span></span><br><span class="line"><span class="comment">*    at this point regarding memory, so call c_runtime_cpu_setup.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 7. Branch to board_init_r().</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* For more information see 'Board Initialisation Flow in README.</span></span><br></pre></td></tr></table></figure><p>简单翻译如下：</p><ul><li>1.创建调用<code>board_init_f()</code>的C运行环境。关于C运行环境，可以参照最后一章的链接；</li><li>2.调用<code>board_init_f()</code>做先前的板级初始化动作；</li><li>3.设置中间环境，其中的堆栈和<code>GD</code>是由系统RAM中调用<code>board_init_f()</code>进行分配的；</li><li>4a.调用<code>relocate_code</code>重新定位u-boot；</li><li>4b.对于SPL，不用重新定位；</li><li>5.为调用<code>board_init_r()</code>设置最后的环境；</li></ul><hr><h2 id="main的详细流程如下："><a href="#main的详细流程如下：" class="headerlink" title="_main的详细流程如下："></a><code>_main</code>的详细流程如下：</h2><ul><li><p>1.设置初始的堆栈，基址由<code>CONFIG_SYS_INIT_SP_ADDR</code>定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#if defined(CONFIG_SPL_BUILD) &amp;&amp; defined(CONFIG_SPL_STACK)</span><br><span class="line">    ldr x0, =(CONFIG_SPL_STACK)</span><br><span class="line">#else</span><br><span class="line">    ldr x0, =(CONFIG_SYS_INIT_SP_ADDR)</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></li><li><p>2.分配<code>global data</code>所需的空间，将堆栈16 bits对齐之后，调用<code>board_init_f_alloc_reserve</code>接口，从堆栈开始的地方，为u-boot的<code>global data（struct global_data）</code>分配空间。<br>也就是调用<code>common/init/board_init.c</code>的<code>board_init_f_alloc_reserve()</code>函数。按照之前的说明，<code>_main</code>主要是为了调用<code>board_init_f()</code>初始化环境。这个环境提供了stack和放置<code>GD</code>数据结构的地方，这两者都放在可读的RAM(SRAM或锁住的cached等)。在上下文环境中<code>GD</code>、已初始化或未初始化的<code>BSS</code>是不可用的。只有<code>初始化的常量</code>可以使用。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">`board_init_f_alloc_reserve()`函数的定义如下：</span><br><span class="line">/*                       </span><br><span class="line">* Allocate reserved space for use as &apos;globals&apos; from &apos;top&apos; address and</span><br><span class="line">* return &apos;bottom&apos; address of allocated space</span><br><span class="line">*</span><br><span class="line">* Notes:</span><br><span class="line">*</span><br><span class="line">* Actual reservation cannot be done from within this function as</span><br><span class="line">* it requires altering the C stack pointer, so this will be done by</span><br><span class="line">* the caller upon return from this function.</span><br><span class="line">*</span><br><span class="line">* IMPORTANT:</span><br><span class="line">*</span><br><span class="line">* Alignment constraints may differ for each &apos;chunk&apos; allocated. For now:</span><br><span class="line">*</span><br><span class="line">* - GD is aligned down on a 16-byte boundary</span><br><span class="line">*</span><br><span class="line">*  - the early malloc arena is not aligned, therefore it follows the stack</span><br><span class="line">*   alignment constraint of the architecture for which we are bulding.</span><br><span class="line">*</span><br><span class="line">*  - GD is allocated last, so that the return value of this functions is</span><br><span class="line">*   both the bottom of the reserved area and the address of GD, should</span><br><span class="line">*   the calling context need it.</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">ulong board_init_f_alloc_reserve(ulong top)</span><br><span class="line">&#123;</span><br><span class="line">    /* Reserve early malloc arena */</span><br><span class="line">#if defined(CONFIG_SYS_MALLOC_F)</span><br><span class="line">    top -= CONFIG_SYS_MALLOC_F_LEN;</span><br><span class="line">#endif</span><br><span class="line">    /* LAST : reserve GD (rounded up to a multiple of 16 bytes) */</span><br><span class="line">    top = rounddown(top-sizeof(struct global_data), 16);</span><br><span class="line"></span><br><span class="line">    return top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数主要用来分配堆栈区域。<code>top</code>地址为<code>CONFIG_SYS_INIT_SP_ADDR</code>，如果定义了<code>CONFIG_SYS_MALLOC_F</code>，reserve 空间的起始地址为<code>CONFIG_SYS_INIT_SP_ADDR - CONFIG_SYS_MALLOC_F_LEN</code> ~ <code>CONFIG_SYS_INIT_SP_ADDR</code>。返回值为指向<code>GD</code>的地址为<code>top-sizeof(struct global_data)</code>。初始化堆栈和reserve空间后的内存layout如下<a href="https://blog.csdn.net/ooonebook/article/details/53013545" target="_blank" rel="noopener">global_data介绍</a>：<br>执行<code>board_init_f_alloc_reserve()</code>后，sp指针就指向了<code>GD</code>，并把值存到<code>x18</code>寄存器里。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bl  board_init_f_alloc_reserve</span><br><span class="line">mov sp, x0</span><br><span class="line">/* set up gd here, outside any C code */</span><br><span class="line">mov x18, x0</span><br></pre></td></tr></table></figure><p></p><p>在<code>arch/arm/include/asm/global_data.h</code>文件中定义了指针<code>gd</code>的值从<code>x18</code>寄存器取得，这样的话，我们在后续的过程中就可以使用<code>gd</code>了。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#ifdef CONFIG_ARM64</span><br><span class="line">#define DECLARE_GLOBAL_DATA_PTR     register volatile gd_t *gd asm (&quot;x18&quot;)</span><br><span class="line">#else</span><br><span class="line">#define DECLARE_GLOBAL_DATA_PTR     register volatile gd_t *gd asm (&quot;r9&quot;)</span><br><span class="line">#endif</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p></p><p>注：在ARM中<code>x0-x7</code>寄存器用于函数调用时参数传递，<code>x0</code>一般用作返回值。<br>该函数调用之后，DDR SDRAM的layout如下：</p><ul><li><p>3.<code>GD</code>的空间分配后，调用<code>board_init_f_init_reserve</code>，初始化<code>global data</code>，所谓的初始化，无非就是一些清零操作。<br>赋值<code>gd_ptr</code>和<code>gd-&gt;malloc_base</code>。执行完之后，DDR SDRAM的layout如下：<br><img src="https://pic.superbed.cn/item/5c9f8cf03a213b041769c82b" alt="图1"></p></li><li><p>4.调用<code>common/board_f.c</code>的<code>board_init_f()</code>函数，参数为0。以下对该函数进行详细的说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov x0, #0</span><br><span class="line">bl  board_init_f</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="board-init-f-函数"><a href="#board-init-f-函数" class="headerlink" title="board_init_f()函数"></a><code>board_init_f()</code>函数</h2><p>u-boot将需要在<code>board_init_f</code>中初始化的内容，抽象为一系列API。这些API由u-boot声明，由平台的开发者根据实际情况实现。该函数在<code>common/board_f.c</code>文件中定义。<br>对<code>global data</code>进行简单的初始化之后，调用位于<code>init_sequence_f</code>数组中的各种初始化API，进行各式各样的初始化动作。这些API有些需要板级厂商进行实现。以下是对<code>init_sequence_f</code>数组中相关的API进行说明。</p><ul><li>1.调用<code>setup_mon_len()</code>设置<code>gd-&gt;mon_len</code>的值，这个值表示u-boot代码大小。</li><li><p>2.调用<code>fdtdec_setup()</code>设置<code>gd-&gt;fdt_blob</code>的值。<br>如果打开了<code>CONFIG_OF_CONTROL</code>，也就是u-boot使用dts，那么会调用<code>fdtdec_setup</code>，设置<code>gd-&gt;fdt_blob</code>指针（即device tree所在的存储位置）的值。对ARM平台来说，u-boot的Makefile会通过连接脚本，将dtb文件打包到u-boot image的<code>__dtb_dt_begin</code>位置处，因此不需要特别关心。<br><code>gd-&gt;fdt_blob = (ulong *)&amp;_end;</code>，因此通过<code>u-boot.map</code>文件查找到<code>_end</code>的地址为<code>0x0000000080060570 _end = .</code>，在u-boot的命令行模式读取该段内存数据<code>md 80060570</code>，显示如下：<br>这段内容开始就是<code>fdt</code>的内容，也可以与dtb的内容对应起来。<br>在<code>fdtdec_prepare_fdt()</code>函数中，会通过<code>gd-&gt;fdt_blob</code>指向区域的值来判断是否是device tree。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">=&gt; md 80060570</span><br><span class="line">80060570: edfe0dd0 6aa20000 48000000 d49c0000    .......j...H....</span><br><span class="line">80060580: 28000000 11000000 10000000 00000000    ...(............</span><br><span class="line">80060590: 96050000 8c9c0000 00000000 00000080    ................</span><br><span class="line">800605a0: 00000000 00004000 00000000 00000000    .....@..........</span><br><span class="line">800605b0: 00000000 00000000 01000000 00000000    ................</span><br><span class="line">800605c0: 03000000 24000000 00000000 2c6c7366    .......$....fsl,</span><br><span class="line">800605d0: 38786d69 2d707871 6464706c 612d3472    imx8qxp-xxxxx4-a</span><br><span class="line">800605e0: 00326d72 2c6c7366 38786d69 00707871    rm2.fsl,imx8qxp.</span><br><span class="line">800605f0: 03000000 04000000 0b000000 01000000    ................</span><br><span class="line">80060600: 03000000 04000000 1c000000 02000000    ................</span><br><span class="line">80060610: 03000000 04000000 2b000000 02000000    ...........+....</span><br><span class="line">80060620: 03000000 1f000000 37000000 65657246    ...........7Free</span><br><span class="line">80060630: 6c616373 2e692065 5138584d 4c205058    scale i.MX8QXP X</span><br><span class="line">80060640: 52444450 52412034 0000324d 01000000    XXXX4 ARM2......</span><br><span class="line">80060650: 73757063 00000000 03000000 04000000    cpus............</span><br><span class="line">80060660: 1c000000 02000000 03000000 04000000    ................</span><br></pre></td></tr></table></figure></li><li><p>3.调用<code>initf_malloc()</code>设置<code>gd-&gt;malloc_limit</code>分配空间限制为<code>CONFIG_SYS_MALLOC_F_LEN</code>。</p></li><li><p>4.调用<code>initf_dm()</code>进行u-boot的driver model的初始化，在这里回去解析fdt的设备并注册与之匹配的驱动。关于这部分的内容，可以参照<a href="https://blog.csdn.net/ooonebook/article/details/53234020" target="_blank" rel="noopener">uboot 驱动模型</a></p></li><li><p>5.调用<code>env_init()</code>设置<code>gd-&gt;env_addr</code>环境变量的地址。<br><code>env_init</code>在<code>common/env_mmc.c</code>中定义(文件名不一定)。里面用到了个全局数组<code>default_environment[]</code>，该数组在<code>include/env_default.h</code>中定义，数组中定义好多环境变量相关的，我们可以通过在u-boot终端敲<code>pirntenv</code>命令打印环境变量。<br>环境变量的值可以在编译u-boot之后查看<code>u-boot.cfg</code>中找到。</p></li><li>6.调用<code>init_baud_rate()</code>设置<code>gd-&gt;baudrate</code>波特率，也就是从环境变量中获取<code>baudrate</code>的值。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gd-&gt;baudrate = getenv_ulong(&quot;baudrate&quot;, 10, CONFIG_BAUDRATE);</span><br></pre></td></tr></table></figure></li></ul><p>获取当前使用串口波特率，可以有两个途径（优先级从高到低），从<code>baudrate</code>中获取；从<code>CONFIG_BAUDRATE</code>配置项获取。</p><ul><li>7.调用<code>serial_init()</code>和<code>console_init_f()</code>初始化串口相关的设备和驱动。<br>初始化硬件串口，由原厂实现，最终在<code>drivers/serial/</code>文件中实现。</li><li><p>8.<code>display_options()</code>显示u-boot的版本信息和编译信息，具体的定义是编译自动生成在：<br><code>include/generated/version_autogenerated.h</code>文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define U_BOOT_VERSION_STRING U_BOOT_VERSION &quot; (&quot; U_BOOT_DATE &quot; - &quot; \</span><br><span class="line">    U_BOOT_TIME &quot; &quot; U_BOOT_TZ &quot;)&quot; CONFIG_IDENT_STRING</span><br></pre></td></tr></table></figure></li><li><p>9.调用<code>display_text_info()</code>打印u-boot代码段的起始和结束地址，以及BSS段的起始和结束地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;U-Boot code: %08lX -&gt; %08lX  BSS: -&gt; %08lX\n&quot;,</span><br><span class="line">    text_base, bss_start, bss_end);</span><br></pre></td></tr></table></figure></li></ul><p>上述两条打印语句，在串口打印的内容如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[    0.267] U-Boot 2017.03-g3d43db2-dirty (Mar 08 2018 - 16:12:42 +0800)</span><br><span class="line">[    0.284] U-Boot code: 80020000 -&gt; 80061430  BSS: -&gt; 800984F8</span><br></pre></td></tr></table></figure><p></p><p>因此，内存空间由上到下分别是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--------bss_end  --------------高地址</span><br><span class="line"></span><br><span class="line">         BSS 段</span><br><span class="line"></span><br><span class="line">--------bss_start  -------------</span><br><span class="line"></span><br><span class="line">         代码段</span><br><span class="line"></span><br><span class="line">-------- text_base(CONFIG_SYS_TEXT_BASE)------ 低地址</span><br></pre></td></tr></table></figure><p></p><p><code>text_base</code>由<code>CONFIG_SYS_TEXT_BASE</code>来决定，<code>text_base</code>也就是<code>start.S</code>中执行<code>_start</code>开始的地方，也就是u-boot的代码段。但是<code>bss_start</code>和<code>bss_end</code>的地址在哪里决定还没搞清楚。<br>这些内容也可以通过编译出来的u-boot.map文件查看到。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Address of section .text set to 0x80020000</span><br><span class="line">                0x0000000000000000                . = 0x0</span><br><span class="line">                0x0000000000000000                . = ALIGN (0x8)</span><br><span class="line"></span><br><span class="line">.text           0x0000000080020000    0x2a898</span><br><span class="line">*(.__image_copy_start)</span><br><span class="line">.__image_copy_start</span><br><span class="line">                0x0000000080020000        0x0 arch/arm/lib/built-in.o</span><br><span class="line">                0x0000000080020000                __image_copy_start</span><br><span class="line">arch/arm/cpu/armv8/start.o(.text*)</span><br><span class="line">.text          0x0000000080020000      0x110 arch/arm/cpu/armv8/start.o</span><br><span class="line">                0x0000000080020000                _start</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.bss_start      0x0000000080061430        0x0</span><br><span class="line">*(.__bss_start)</span><br><span class="line">.__bss_start   0x0000000080061430        0x0 arch/arm/lib/built-in.o</span><br><span class="line">                0x0000000080061430                __bss_start</span><br><span class="line">               </span><br><span class="line">.bss_end        0x00000000800984f8        0x0</span><br><span class="line">*(.__bss_end)</span><br><span class="line">.__bss_end     0x00000000800984f8        0x0 arch/arm/lib/built-in.o</span><br><span class="line">                0x00000000800984f8                __bss_end</span><br></pre></td></tr></table></figure><ul><li>10.调用<code>print_cpuinfo()</code>打印CPU的相关信息。</li><li><p>11.调用<code>show_board_info()</code>打印板级的相关信息，在<code>common/board_info.c</code>文件中定义，主要去获取dts中<code>model</code>节点的信息，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* If the root node of the DTB has a &quot;model&quot; property, show it.</span><br><span class="line">* Then call checkboard().</span><br><span class="line">*/ </span><br><span class="line">int __weak show_board_info(void)</span><br><span class="line">&#123;</span><br><span class="line">#ifdef CONFIG_OF_CONTROL</span><br><span class="line">    DECLARE_GLOBAL_DATA_PTR;</span><br><span class="line">    const char *model;</span><br><span class="line"></span><br><span class="line">    model = fdt_getprop(gd-&gt;fdt_blob, 0, &quot;model&quot;, NULL);</span><br><span class="line"></span><br><span class="line">    if (model)</span><br><span class="line">        printf(&quot;Model: %s\n&quot;, model);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    return checkboard();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>12.调用<code>dram_init()</code>初始化系统的DDR，<code>dram_init</code>应该由平台相关的代码实现。<br>如果DDR已经初始化过了，则不需要重新初始化，只需要把DDR信息(DDR大小和初始地址)保存在<code>global data</code>中即可。在我们这里，将DDR的大小信息保存在<code>gd-&gt;ram_size</code>中。<br>按照u-boot的说明，调用<code>dram_init()</code>之后，就要去分配DDR SDRAM的的空间以及<code>relocate u-boot</code>的代码了，注释说明如下，更多关于<code>relocate u-boot</code>，请见下文分解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* Now that we have DRAM mapped and working, we can</span><br><span class="line">* relocate the code and continue running from DRAM.</span><br><span class="line">*</span><br><span class="line">* Reserve memory at end of RAM for (top down in that order):</span><br><span class="line">*  - area that won&apos;t get touched by U-Boot and Linux (optional)</span><br><span class="line">*  - kernel log buffer</span><br><span class="line">*  - protected RAM </span><br><span class="line">*  - LCD framebuffer</span><br><span class="line">*  - monitor code  </span><br><span class="line">*  - board info struct</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="u-boot-relocate"><a href="#u-boot-relocate" class="headerlink" title="u-boot relocate"></a>u-boot relocate</h2><p>这部分的内容同样属于上一篇文章中<code>board_init_f()</code>的范畴内，主要是为了说明方便，本文单独成文描述u-boot relocate。<br>在说明relocate之前，先说为啥要relocate：</p><ul><li>在以前的板子上，u-boot有可能是运行在NOR FLASH或ROM上，空间很小，执行慢，而且不支持写操作，DDR SDRAM初始化完毕之后，需要将其relocate到DDR SDRAM去运行，空间大，执行的速度也比较快，支持写操作；</li><li>考虑到后续的kernel是在DDR SDRAM的低端位置解压缩并执行的，为了避免麻烦，u-boot将使用DRAM的顶端地址，即<code>gd-&gt;ram_top</code>所代表的位置；</li></ul><h3 id="reserve空间"><a href="#reserve空间" class="headerlink" title="reserve空间"></a>reserve空间</h3><p>以下内容都是在DDR SDRAM高地址为relocate做reserve的准备。</p><ul><li><p>1.调用<code>setup_dest_addr()</code>设置u-boot的relocaddr地址，通过<code>gd-&gt;ram_size</code>和<code>CONFIG_SYS_SDRAM_BASE</code>(DDR的起始地址)确定<code>gd-&gt;ram_top</code>和<code>gd-&gt;relocaddr</code>，也就是将u-boot重定位到DDR最高的地址，执行完之后<code>gd-&gt;relocaddr = gd-&gt;ram_top</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#ifdef CONFIG_SYS_SDRAM_BASE</span><br><span class="line">    gd-&gt;ram_top = CONFIG_SYS_SDRAM_BASE;</span><br><span class="line">#endif</span><br><span class="line">    gd-&gt;ram_top += get_effective_memsize();</span><br><span class="line">    gd-&gt;ram_top = board_get_usable_ram_top(gd-&gt;mon_len);</span><br><span class="line">    gd-&gt;relocaddr = gd-&gt;ram_top;</span><br><span class="line">    printf(&quot;Ram top: %08lX\n&quot;, (ulong)gd-&gt;ram_top);</span><br></pre></td></tr></table></figure></li><li><p>2.特殊功能所需空间的reserve，如<code>log buffer</code>、<code>MMU page table</code>、<code>LCD fb buffer</code>、<code>trace buffer</code>等等。</p></li><li>3.调用<code>reserve_uboot()</code>，reserve <code>gd-&gt;mon_len</code>和<code>U-Boot code</code>, <code>data &amp; bss</code>的空间。分配完之后，DDR SDRAM布局如下：<br><img src="https://pic.superbed.cn/item/5c9f8cf03a213b041769c82e" alt="图2"></li><li><p>4.调用<code>reserve_malloc()</code>，reserve malloc的空间，大小为<code>TOTAL_MALLOC_LEN</code>，该在<code>include/common.h</code>文件中定义，定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#if defined(CONFIG_ENV_IS_EMBEDDED)</span><br><span class="line">#define TOTAL_MALLOC_LEN    CONFIG_SYS_MALLOC_LEN</span><br><span class="line">#elif ( ((CONFIG_ENV_ADDR+CONFIG_ENV_SIZE) &lt; CONFIG_SYS_MONITOR_BASE) || \</span><br><span class="line">    (CONFIG_ENV_ADDR &gt;= (CONFIG_SYS_MONITOR_BASE + CONFIG_SYS_MONITOR_LEN)) ) || \</span><br><span class="line">      defined(CONFIG_ENV_IS_IN_NVRAM)</span><br><span class="line">#define TOTAL_MALLOC_LEN    (CONFIG_SYS_MALLOC_LEN + CONFIG_ENV_SIZE)</span><br><span class="line">#else</span><br><span class="line">#define TOTAL_MALLOC_LEN    CONFIG_SYS_MALLOC_LEN</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></li><li><p>5.调用<code>reserve_board()</code>为<code>struct bd_info</code>分配空间，此时可以得到<code>gd-&gt;bd</code>并将其初始化为0。<br>执行完之后，DDR SDRAM布局如下：<br><img src="https://pic.superbed.cn/item/5c9f8cf03a213b041769c834" alt="图3"></p></li><li>6.调用<code>reserve_global_data()</code>为<code>struct global_data</code>分配空间，此时可以得到<code>gd-&gt;new_gd</code>的值。<br>执行完之后，DDR SDRAM布局如下：<br><img src="https://pic.superbed.cn/item/5c9f8cf03a213b041769c837" alt="图4"></li><li>7.调用<code>reserve_fdt()</code>通过<code>gd-&gt;fdt_blob</code>计算出<code>gd-&gt;fdt_size</code>的大小，未fdt分配空间，得到<code>gd-&gt;new_fdt</code>的值。</li><li>8.调用<code>reserve_stacks()</code>设置16字节的irq stack，得到<code>gd-&gt;irq_sp</code>的值。<br><img src="https://pic.superbed.cn/item/5c9f8cf03a213b041769c829" alt="图5"></li><li>9.调用<code>setup_dram_config()</code>做RAM configuration，主要是为了填充<code>gd-&gt;bd-&gt;bi_dram</code>字段，这一部分内容由厂商实现。</li><li>10.调用<code>display_new_sp()</code>打印当前的<code>gd-&gt;start_addr_sp</code>的值，也就是堆栈指针。至此，reserve空间已完毕，最终的DDR SDRAM的布局如下：<br><img src="https://pic.superbed.cn/item/5c9f8db63a213b041769d167" alt="图6"></li></ul><hr><h3 id="relocate-u-boot"><a href="#relocate-u-boot" class="headerlink" title="relocate u-boot"></a>relocate u-boot</h3><p>实际上的relocate u-boot就是将以前在低地址的内容拷贝到高地址与之对应的位置，并重新赋值指针。</p><ul><li><p>1.调用<code>reloc_fdt()</code>将<code>gd-&gt;fdt_blob</code>的内容拷贝到<code>gd-&gt;new_fdt</code>，拷贝<code>gd-&gt;fdt_size</code>这么多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static int reloc_fdt(void)</span><br><span class="line">&#123;</span><br><span class="line">#ifndef CONFIG_OF_EMBED</span><br><span class="line">    if (gd-&gt;flags &amp; GD_FLG_SKIP_RELOC)</span><br><span class="line">        return 0;</span><br><span class="line">    if (gd-&gt;new_fdt) &#123;  </span><br><span class="line">        memcpy(gd-&gt;new_fdt, gd-&gt;fdt_blob, gd-&gt;fdt_size);</span><br><span class="line">        gd-&gt;fdt_blob = gd-&gt;new_fdt;   </span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.调用<code>setup_reloc()</code>计算u-boot代码空间到relocation的位置的偏移，也就是<code>gd-&gt;reloc_off = gd-&gt;relocaddr - CONFIG_SYS_TEXT_BASE;</code>，拷贝<code>GD</code>内容到<code>new_gd</code>，也就是：<code>memcpy(gd-&gt;new_gd, (char *)gd, sizeof(gd_t));</code>。<br>将最重要的<code>GD</code>内容拷贝到新的地址后，后面我们就可以根据<code>GD</code>来做很多事。至此，<code>init_sequence_f[]</code>中定义的函数指针都已执行完毕，也就是<code>board_init_f()</code>函数执行完毕，接下来就会到<code>_main</code>中执行relocate的动作了。</p></li><li>3.调用<code>relocate_code()</code>将u-boot的存放地址根据<code>board_init_f()</code>计算后的地址重新改变，这部分涉及到很多汇编代码以及<code>位置无关代码</code>原理，其中还有很多不明白的，后续等明白了再补充。</li></ul><hr><h2 id="board-init-r函数"><a href="#board-init-r函数" class="headerlink" title="board_init_r函数"></a><code>board_init_r</code>函数</h2><p>在<code>_main</code>的最后，调用<code>board_init_r()</code>函数，参数1为<code>gd-&gt;new_gd</code>，参数2为<code>gd-&gt;relocaddr</code>。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* call board_init_r(gd_t *id, ulong dest_addr) */</span><br><span class="line">mov x0, x18             /* gd_t */</span><br><span class="line">ldr x1, [x18, #GD_RELOCADDR]    /* dest_addr */</span><br><span class="line">b   board_init_r            /* PC relative jump */</span><br></pre></td></tr></table></figure><p></p><p><code>board_init_r()</code>函数在<code>common/board_r.c</code>文件中定义，这个函数中同样也会去执行由<code>init_sequence_r[]</code>定义的一系列函数指针。</p><ul><li>1.调用<code>initr_trace()</code>，初始化并使能u-boot的tracing system。</li><li>2.调用<code>initr_reloc()</code>，标记<code>gd-&gt;flags</code>为<code>GD_FLG_RELOC | GD_FLG_FULL_MALLOC_INIT</code>表示: Code was relocated to RAM and Full malloc() is ready。</li><li>3.调用<code>initr_caches()</code>去使能<code>dcache</code>、<code>icache</code>。</li><li>4.调用<code>initr_reloc_global_data()</code>得到<code>monitor_flash_len</code>的值。</li><li>5.调用<code>initr_malloc()</code>初始化从<code>malloc_start</code>~<code>gd-&gt;relocaddr</code>总共<code>TOTAL_MALLOC_LEN</code>大小空间为0。</li><li>6.调用<code>initr_dm()</code>: Save the pre-reloc driver model and start a new one。</li><li>7.调用<code>board_init()</code>做板级初始化，这部分的内容一般定义在<code>board/vendor/xxx_board/xxx_board.c</code>文件下，我这里的路径为<code>board/freescale/imx8qxp_mek/imx8qxp_mek.c</code>。</li><li>8.调用<code>initr_serial()</code>重新初始化初始化串口，在relocate之前，调用<code>serial_init()</code>进行初始化，在relocate之后(也就是这里)，调用<code>initr_serial()</code> -&gt; <code>serial_initialize()</code> -&gt; <code>serial_init()</code>。<br>最终也是调用<code>serial_init()</code>做串口的初始化。</li><li>9.调用<code>initr_mmc()</code>做mmc的初始化，相关内容在<code>drivers/mmc/mmc.c</code>文件中定义。</li><li>10.调用<code>initr_env()</code>初始化环境变量，并从环境变量获取到<code>load_addr</code>的值，这个环境变量在<code>default_environment[]</code>就已经设定进去了。</li><li>11.调用<code>console_init_r()</code>: fully init console as a device。</li><li>12.调用<code>board_late_init()</code>，功能类似<code>board_init()</code>，涉及的配置项有<code>CONFIG_BOARD_LATE_INIT</code>。</li><li>13.调用<code>run_main_loop()</code>执行到<code>main_loop()</code>，开始命令行操作。</li></ul><hr><h2 id="main-loop"><a href="#main-loop" class="headerlink" title="main_loop()"></a><code>main_loop()</code></h2><p>在<code>common/main.c</code>文件中定义，这里只关注后面的几个函数调用。从这里开始，基本上都是通过环境变量来判断做什么事情。<code>cli_xxx</code>是<code>Command Line Interface</code>的简写。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/* We come here after U-Boot is initialised and ready to process commands */</span><br><span class="line">void main_loop(void)</span><br><span class="line">&#123;</span><br><span class="line">    const char *s;</span><br><span class="line"></span><br><span class="line">    bootstage_mark_name(BOOTSTAGE_ID_MAIN_LOOP, &quot;main_loop&quot;);</span><br><span class="line"></span><br><span class="line">#ifdef CONFIG_VERSION_VARIABLE</span><br><span class="line">    setenv(&quot;ver&quot;, version_string);  /* set version variable */</span><br><span class="line">#endif /* CONFIG_VERSION_VARIABLE */</span><br><span class="line"></span><br><span class="line">    cli_init();</span><br><span class="line"></span><br><span class="line">    run_preboot_environment_command();</span><br><span class="line"></span><br><span class="line">#if defined(CONFIG_UPDATE_TFTP)   </span><br><span class="line">    update_tftp(0UL, NULL, NULL);</span><br><span class="line">#endif /* CONFIG_UPDATE_TFTP */</span><br><span class="line"></span><br><span class="line">    s = bootdelay_process();</span><br><span class="line">    if (cli_process_fdt(&amp;s))</span><br><span class="line">        cli_secure_boot_cmd(s);</span><br><span class="line"></span><br><span class="line">    autoboot_command(s);</span><br><span class="line"></span><br><span class="line">    cli_loop();</span><br><span class="line">    panic(&quot;No CLI available&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><ul><li>1.调用<code>bootdelay_process()</code>主要是为了设置启动延时使用，可以通过<code>CONFIG_BOOTDELAY</code>设置启动延时多少秒。通过<code>s = getenv(&quot;bootcmd&quot;);</code>获取<code>bootcmd</code>的值做为返回值。<br>调用<code>process_fdt_options(gd-&gt;fdt_blob);</code>从device tree判断是否有<code>kernel-offset</code>和<code>rootdisk-offset</code>的说明，如果有的话，那么设置<code>kernaddr</code>和<code>rootaddr</code>的环境变量。<br>从这个来看，支持从device tree中传递去设置环境变量。</li><li>2.调用<code>cli_process_fdt()</code>判断是否有secure boot相关的，这里没有。</li><li>3.调用<code>autoboot_command()</code>执行环境变量<code>bootcmd</code>的内容，也就是执行相关的命令，在<code>common/autoboot.c</code>文件中定义。通过命令，就可以启动Linux Kernel了。</li></ul><hr><h2 id="Boot-Linux"><a href="#Boot-Linux" class="headerlink" title="Boot Linux"></a>Boot Linux</h2><p>在<code>README</code>中有<code>Boot Linux</code>章节用来描述如何启动linux。<code>bootm</code>命令用来启动存储在RAM或Flash上的程序，<code>bootargs</code>环境变量用来传递参数给kernel。<br>我的理解是，u-boot从eMMC读取Image到DDR启动linux，主要是有以下几个步骤：</p><ul><li>1.<code>setenv bootargs</code>，设置<code>bootargs</code>用来传递参数给kernel。</li><li>2.<code>mmc read ram_addr emmc_blk cnt</code>，从emmc读取Image并load到DDR中去。</li><li>3.<code>checkimage ram_addr</code>检查镜像是否正确（非必须）。</li><li>4.<code>booti kernel_start_addr ramdisk_start_addr dtb_start_addr</code>，从ram中的去启动kernel、ramdisk、dtb，<code>booti</code>的用法如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[    2.787] =&gt; help booti</span><br><span class="line">booti - boot arm64 Linux Image image from memory</span><br><span class="line"></span><br><span class="line">[  210.831] Usage:</span><br><span class="line">[  210.833] booti [addr [initrd[:size]] [fdt]]</span><br><span class="line">[  210.838] - boot arm64 Linux Image stored in memory</span><br><span class="line">[  210.843]     The argument &apos;initrd&apos; is optional and specifies the address</span><br><span class="line">[  210.849]     of an initrd in memory. The optional parameter &apos;:size&apos; allows</span><br><span class="line">[  210.856]     specifying the size of a RAW initrd.</span><br><span class="line">[  210.860]     Since booting a Linux kernel requires a flat device-tree, a</span><br><span class="line">[  210.867]     third argument providing the address of the device-tree blob</span><br><span class="line">[  210.874]     is required. To boot a kernel with a device-tree blob but</span><br><span class="line">[  210.880]     without an initrd image, use a &apos;-&apos; for the initrd argument.</span><br></pre></td></tr></table></figure></li></ul><p>关于u-boot的命令行模式和<code>bootm/booti</code>等启动命令的原理，可以参照下面的文章：</p><hr><h2 id="U-Boot-porting"><a href="#U-Boot-porting" class="headerlink" title="U-Boot porting"></a>U-Boot porting</h2><p>非常重要的一篇文章，讲述如何在porting一个新板子。<br><a href="https://elinux.org/images/2/2a/Schulz-how-to-support-new-board-u-boot-linux.pdf" target="_blank" rel="noopener">https://elinux.org/images/2/2a/Schulz-how-to-support-new-board-u-boot-linux.pdf</a></p><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p>C运行环境：<br><a href="http://microchipdeveloper.com/tls2101:c-runtime-environment" target="_blank" rel="noopener">http://microchipdeveloper.com/tls2101:c-runtime-environment</a><br><a href="http://web.cs.ucdavis.edu/~pandey/Teaching/ECS142/Lects/runtime.pdf" target="_blank" rel="noopener">http://web.cs.ucdavis.edu/~pandey/Teaching/ECS142/Lects/runtime.pdf</a></p></li><li><p>位置无关原理：<br><a href="https://blog.csdn.net/ooonebook/article/details/53047992" target="_blank" rel="noopener">https://blog.csdn.net/ooonebook/article/details/53047992</a><br><a href="https://blog.csdn.net/skyflying2012/article/details/37660265" target="_blank" rel="noopener">https://blog.csdn.net/skyflying2012/article/details/37660265</a><br><a href="https://github.com/lentinj/u-boot/blob/master/doc/README.arm-relocation" target="_blank" rel="noopener">https://github.com/lentinj/u-boot/blob/master/doc/README.arm-relocation</a></p></li><li><p>u-boot启动命令：<br><a href="https://blog.csdn.net/ooonebook/article/details/53495021" target="_blank" rel="noopener">https://blog.csdn.net/ooonebook/article/details/53495021</a><br><a href="https://blog.csdn.net/ooonebook/article/details/53164198" target="_blank" rel="noopener">https://blog.csdn.net/ooonebook/article/details/53164198</a><br><a href="http://www.wowotech.net/x_project/bubblegum_uboot_booti.html" target="_blank" rel="noopener">http://www.wowotech.net/x_project/bubblegum_uboot_booti.html</a></p></li><li><p>整体参考资料：<br><a href="http://www.wowotech.net/u-boot/boot_flow_1.html" target="_blank" rel="noopener">http://www.wowotech.net/u-boot/boot_flow_1.html</a><br><a href="http://www.wowotech.net/u-boot/boot_flow_2.html" target="_blank" rel="noopener">http://www.wowotech.net/u-boot/boot_flow_2.html</a><br><a href="http://www.wowotech.net/u-boot/fit_image_overview.html" target="_blank" rel="noopener">http://www.wowotech.net/u-boot/fit_image_overview.html</a><br><a href="https://blog.csdn.net/ooonebook/article/details/52957395" target="_blank" rel="noopener">https://blog.csdn.net/ooonebook/article/details/52957395</a></p></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> u-boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> u-boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android传递宏给uboot或kernel</title>
      <link href="/8b524cfd/"/>
      <url>/8b524cfd/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>Android编译环境，<code>lunch</code>的时候会进行product和variant的选择，比如说<code>lunch xxx-eng</code>得到的结果如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~/master$ lunch xxx-eng </span><br><span class="line"></span><br><span class="line">Already installed latest Toochain</span><br><span class="line">============================================</span><br><span class="line">PLATFORM_VERSION_CODENAME=REL</span><br><span class="line">PLATFORM_VERSION=3.0.0</span><br><span class="line">TARGET_PRODUCT=xxx</span><br><span class="line">TARGET_BUILD_VARIANT=eng</span><br><span class="line">TARGET_BUILD_TYPE=release</span><br><span class="line">TARGET_BUILD_APPS=</span><br><span class="line">TARGET_ARCH=arm64</span><br><span class="line">TARGET_ARCH_VARIANT=armv8-a</span><br><span class="line">HOST_ARCH=x86</span><br><span class="line">HOST_OS=linux</span><br><span class="line">HOST_BUILD_TYPE=release</span><br><span class="line">BUILD_ID=master</span><br><span class="line">============================================</span><br></pre></td></tr></table></figure><p></p><p>因此我们可以取得几个环境变量，<code>TARGET_BUILD_VARIANT=eng</code>和<code>TARGET_PRODUCT=xxx</code>，输入<code>env</code>命令就可以查看当前系统当前shell下的环境变量。我们想根据<code>TARGET_BUILD_VARIANT</code>的值为<code>eng</code>或者<code>user</code>来选择在uboot或kernel中开关某个功能。</p><p><strong>解决思路：</strong><br>在<code>lunch</code>后我们可以获得<code>TARGET_BUILD_VARIANT</code>的值，判断其为<code>eng</code>或者<code>user</code>，然后相应的<code>export</code>出一个环境变量，最后在uboot或kernel中的<code>Makefile</code>中判断环境变量传递相应的宏。<a id="more"></a></p><h2 id="export环境变量"><a href="#export环境变量" class="headerlink" title="export环境变量"></a>export环境变量</h2><p>在<code>build/envsetup.sh</code>文件中的<code>function lunch()</code>函数的最后添加如下判断。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">unset ENABLE_ALL_CONSOLE</span><br><span class="line">if [ &quot;$product&quot;x = &quot;xxx&quot;x ] &amp;&amp; [ &quot;$variant&quot;x = &quot;eng&quot;x ]</span><br><span class="line">then</span><br><span class="line">    export ENABLE_ALL_CONSOLE=true</span><br><span class="line">    echo &quot;export ENABLE_ALL_CONSOLE=true for: &apos;$product&apos;-&apos;$variant&apos;&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p></p><p><code>function lunch()</code>的函数是用户执行<code>lunch xxx-eng</code>调用的，<code>unset ENABLE_ALL_CONSOLE</code>是为了清除上次残留的环境变量，在这里我们增加对<code>$product</code>和<code>$variant</code>的判断。</p><hr><h2 id="在Makefile中添加环境变量的判断，如下："><a href="#在Makefile中添加环境变量的判断，如下：" class="headerlink" title="在Makefile中添加环境变量的判断，如下："></a>在<code>Makefile</code>中添加环境变量的判断，如下：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifeq ($(ENABLE_ALL_CONSOLE),true)</span><br><span class="line">KBUILD_CPPFLAGS += -DCONFIG_ENABLE_ALL_CONSOLE</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><p>往<code>KBUILD_CPPFLAGS</code>中的变量添加<code>-DCONFIG_ENABLE_ALL_CONSOLE</code>的值。<code>KBUILD_CPPFLAGS</code>在编译kernel或uboot的时候会传递给<code>gcc</code>编译器，而<code>gcc</code>编译器支持<code>-D</code>的参数，用于定义一个宏。这样，我们就可以在uboot或kernel中的代码使用<code>CONFIG_ENABLE_ALL_CONSOLE</code>的宏了。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-D name</span><br><span class="line">    Predefine name as a macro, with definition 1.</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Android编译相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android编译相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz.u-boot注入程序</title>
      <link href="/866559ba/"/>
      <url>/866559ba/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>NXP release出来的mfgtools默认自带<code>fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz.u-boot</code>文件，这个文件是mfgtools的uramdisk.img，里面自带<code>uuc</code>应用程序，用于进行<code>UTP</code>传输，可以接收<code>ucl2.xml</code>中指定的命令并执行。<br>我们需要在mfgtools烧录过程中执行某个动作，有对应的应用程序，现需要将这个应用程序打包进<code>fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz.u-boot</code>中，以下列出2种实现方案。<a id="more"></a></p><hr><h2 id="方案1：解压再打包进去"><a href="#方案1：解压再打包进去" class="headerlink" title="方案1：解压再打包进去"></a>方案1：解压再打包进去</h2><p>我的想法是将<code>fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz.u-boot</code>文件解压出来，然后将应用程序拷贝进去，再原模原样的打包。以下为步骤：</p><ul><li>1.查看原文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># file fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz.u-boot</span><br><span class="line">fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz.u-boot: u-boot legacy uImage, fsl-image-mfgtool-initramfs-imx8\037\213\010, Linux/ RAMDisk Image (Not compressed), 9406408 bytes, Thu Jun 28 09:30:50 2018, Load Address: 0x00000000, Entry Point: 0x00000000, Header CRC: 0x473F16A9, Data CRC: 0x69DB3466</span><br></pre></td></tr></table></figure></li></ul><p>发现这个文件的头64字节为u-boot头信息，u-boot的头信息格式如下，我们可以通过<code>mkimage</code>产生u-boot头信息。：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">typedef struct image_header &#123;</span><br><span class="line">    uint32_t    ih_magic;    /* Image Header Magic Number    */</span><br><span class="line">    uint32_t    ih_hcrc;    /* Image Header CRC Checksum    */</span><br><span class="line">    uint32_t    ih_time;    /* Image Creation Timestamp    */</span><br><span class="line">    uint32_t    ih_size;    /* Image Data Size        */</span><br><span class="line">    uint32_t    ih_load;    /* Data     Load  Address        */</span><br><span class="line">    uint32_t    ih_ep;        /* Entry Point Address        */</span><br><span class="line">    uint32_t    ih_dcrc;    /* Image Data CRC Checksum    */</span><br><span class="line">    uint8_t        ih_os;        /* Operating System        */</span><br><span class="line">    uint8_t        ih_arch;    /* CPU architecture        */</span><br><span class="line">    uint8_t        ih_type;    /* Image Type            */</span><br><span class="line">    uint8_t        ih_comp;    /* Compression Type        */</span><br><span class="line">    uint8_t        ih_name[IH_NMLEN];    /* Image Name        */</span><br><span class="line">&#125; image_header_t;</span><br></pre></td></tr></table></figure><p></p><ul><li><p>2.舍弃前64字节的u-boot头信息<br>这一步是将<code>.cpio.gz.u-boot</code>变成<code>.cpio.gz</code>文件，查看<code>.cpio.gz</code>文件类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># dd if=fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz.u-boot of=fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz bs=1 skip=64</span><br><span class="line">记录了9451495+0 的读入</span><br><span class="line">记录了9451495+0 的写出</span><br><span class="line">9451495字节(9.5 MB)已复制，9.37393 秒，1.0 MB/秒</span><br><span class="line"></span><br><span class="line"># file fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz</span><br><span class="line">fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz: gzip compressed data, from Unix, last modified: Fri Oct 26 17:31:38 2018</span><br></pre></td></tr></table></figure></li><li><p>3.解压<code>.cpio.gz</code>文件<br>这一步是将<code>.cpio.gz</code>文件解压为<code>.cpio</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># gunzip fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz </span><br><span class="line"># file fsl-image-mfgtool-initramfs-imx_mfgtools.cpio</span><br><span class="line">fsl-image-mfgtool-initramfs-imx_mfgtools.cpio: ASCII cpio archive (SVR4 with no CRC)</span><br></pre></td></tr></table></figure></li><li><p>4.解压<code>.cpio</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mkdir rootfs</span><br><span class="line"># cd rootfs /</span><br><span class="line"># cpio -i -F ../fsl-image-mfgtool-initramfs-imx_mfgtools.cpio</span><br></pre></td></tr></table></figure></li></ul><p>解压<code>.cpio</code>文件后，可以在<code>rootfs/</code>目录下查看<code>fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz.u-boot</code>文件的原始目录结构。<br>目录结构为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">总用量 1096</span><br><span class="line">drwxr-xr-x 17 root         root            4096 10月 29 18:03 ./</span><br><span class="line">drwxrwxr-x  3 root         root    4096 10月 29 17:56 ../</span><br><span class="line">drwxr-xr-x  2 root         root            4096 10月 29 17:56 bin/</span><br><span class="line">drwxr-xr-x  2 root         root            4096 10月 29 17:55 boot/</span><br><span class="line">drwxr-xr-x  2 root         root            4096 10月 29 17:55 dev/</span><br><span class="line">drwxr-xr-x 10 root         root            4096 10月 29 17:55 etc/</span><br><span class="line">-rw-r--r--  1 root         root         1048576 10月 29 17:55 fat</span><br><span class="line">drwxr-xr-x  3 root         root            4096 10月 29 17:55 home/</span><br><span class="line">-rw-r--r--  1 root         root               0 10月 29 17:55 init</span><br><span class="line">drwxr-xr-x  3 root         root            4096 10月 29 17:55 lib/</span><br><span class="line">-rwxr-xr-x  1 root         root            1450 10月 29 18:03 linuxrc*</span><br><span class="line">drwxr-xr-x  2 root         root            4096 10月 29 17:55 media/</span><br><span class="line">drwxr-xr-x  2 root         root            4096 10月 29 17:55 mnt/</span><br><span class="line">drwxr-xr-x  2 root         root            4096 10月 29 17:55 proc/</span><br><span class="line">drwxr-xr-x  2 root         root            4096 10月 29 17:55 run/</span><br><span class="line">drwxr-xr-x  2 root         root            4096 10月 29 17:55 sbin/</span><br><span class="line">drwxr-xr-x  2 root         root            4096 10月 29 17:55 sys/</span><br><span class="line">drwxrwxrwt  2 root         root            4096 10月 29 17:55 tmp/</span><br><span class="line">drwxr-xr-x  9 root         root            4096 10月 29 17:55 usr/</span><br><span class="line">drwxr-xr-x  8 root         root            4096 10月 29 17:55 var/</span><br></pre></td></tr></table></figure><p></p><ul><li><p>5.注入应用程序<br>实际上就是拷贝:<code># cp -rf ~/app ./bin/</code></p></li><li><p>6.原样打包文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># find . |cpio -ov -H newc | gzip -f -9 -n -c &gt; ../fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz</span><br></pre></td></tr></table></figure></li><li><p>7.添加u-boot头信息<br>将打包生成的<code>fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz</code>文件拷贝到u-boot源码目录下，用u-boot源码中的<code>mkimage</code>工具添加u-boot头信息。<br>这一步将<code>.cpio.gz</code>文件进一步打包成<code>.cpio.gz.u-boot</code>文件，生成的<code>.cpio.gz.u-boot</code>文件中u-boot的头信息基本与原先的文件一致（crc和size大小有差异）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># ./tools/mkimage -A arm64 -O linux -T ramdisk -C none -n fsl-image-mfgtool-initramfs-imx8 -d fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz.u-boot</span><br><span class="line">Image Name:   fsl-image-mfgtool-initramfs-imx8</span><br><span class="line">Created:      Mon Oct 29 20:20:17 2018</span><br><span class="line">Image Type:   AArch64 Linux RAMDisk Image (uncompressed)</span><br><span class="line">Data Size:    9447708 Bytes = 9226.28 KiB = 9.01 MiB</span><br><span class="line">Load Address: 00000000</span><br><span class="line">Entry Point:  00000000</span><br></pre></td></tr></table></figure></li></ul><p><code>mkimage</code>工具的使用参照：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/tools/mkimage: invalid option -- &apos;-&apos;</span><br><span class="line">Error: Invalid option</span><br><span class="line">Usage: ./tools/mkimage -l image</span><br><span class="line">          -l ==&gt; list image header information</span><br><span class="line">       ./tools/mkimage [-x] -A arch -O os -T type -C comp -a addr -e ep -n name -d data_file[:data_file...] image</span><br><span class="line">          -A ==&gt; set architecture to &apos;arch&apos;</span><br><span class="line">          -O ==&gt; set operating system to &apos;os&apos;</span><br><span class="line">          -T ==&gt; set image type to &apos;type&apos;</span><br><span class="line">          -C ==&gt; set compression type &apos;comp&apos;</span><br><span class="line">          -a ==&gt; set load address to &apos;addr&apos; (hex)</span><br><span class="line">          -e ==&gt; set entry point to &apos;ep&apos; (hex)</span><br><span class="line">          -n ==&gt; set image name to &apos;name&apos;</span><br><span class="line">          -d ==&gt; use image data from &apos;datafile&apos;</span><br><span class="line">          -x ==&gt; set XIP (execute in place)</span><br><span class="line">       ./tools/mkimage [-D dtc_options] [-f fit-image.its|-f auto|-F] [-b &lt;dtb&gt; [-b &lt;dtb&gt;]] [-i &lt;ramdisk.cpio.gz&gt;] fit-image</span><br><span class="line">           &lt;dtb&gt; file is used with -f auto, it may occur multiple times.</span><br><span class="line">          -D =&gt; set all options for device tree compiler</span><br><span class="line">          -f =&gt; input filename for FIT source</span><br><span class="line">          -i =&gt; input filename for ramdisk file</span><br><span class="line">Signing / verified boot not supported (CONFIG_FIT_SIGNATURE undefined)</span><br><span class="line">       ./tools/mkimage -V ==&gt; print version information and exit</span><br><span class="line">Use -T to see a list of available image types</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="使用方案1有可能出现的问题"><a href="#使用方案1有可能出现的问题" class="headerlink" title="使用方案1有可能出现的问题"></a>使用方案1有可能出现的问题</h2><p>使用打包的方法，最终mfgtools烧录mini kernel起来后加载rootfs有可能会出现以下的错误：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mount: only root can use &quot;--types&quot; option (effective UID is 1000)</span><br><span class="line">mount: only root can use &quot;--types&quot; option (effective UID is 1000)</span><br><span class="line">mount: only root can use &quot;--types&quot; option (effective UID is 1000)</span><br><span class="line">mount: only root can use &quot;--types&quot; option (effective UID is 1000)</span><br><span class="line"></span><br><span class="line">ls: cannot access &apos;/sys/class/udc&apos;: No such file or directory</span><br><span class="line">No udc Available!</span><br></pre></td></tr></table></figure><p></p><p>因为在<code>fsl-image-mfgtool-initramfs-imx_mfgtools.cpio.gz.u-boot</code>中的<code>linuxrc</code>文件的开头会去挂载<code>sysfs/proc</code>等文件。如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">export PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line"></span><br><span class="line">mount -t sysfs none /sys</span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">mount -t configfs none /sys/kernel/config</span><br></pre></td></tr></table></figure><p></p><p>根据 <a href="https://www.linuxquestions.org/questions/linux-software-2/nfs-rootfs-mount-only-root-can-mount-proc-on-proc-4175595326/" target="_blank" rel="noopener">https://www.linuxquestions.org/questions/linux-software-2/nfs-rootfs-mount-only-root-can-mount-proc-on-proc-4175595326/</a> 文章的说明：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&quot;effective UID is 1000&quot; - It thinks you are NOT root which is UID 0. </span><br><span class="line">Did you login as something else then su to root?</span><br><span class="line"></span><br><span class="line">On NFS server side, I&apos;m using the Yocto to generate the target rootfs.</span><br><span class="line">The UID and GID for my PC account is 1000, thus the UID and GID for all of </span><br><span class="line">the files of target rootfs generated by Yocto is 1000,</span><br><span class="line">including bin/mount binary. Also, bin/mount has SUID bit set.</span><br><span class="line"></span><br><span class="line">So, what happen is that target boots, NFS mount is done successfully, </span><br><span class="line">and mounted rootfs contains bin/mount whose UID and GID are 1000 and SUID set.</span><br><span class="line">Thus, bin/mount is executed as non-root user because of SUID, </span><br><span class="line">and resulted in the mount error.</span><br><span class="line">Confirmed either changing SUID of bin/mount to disable or </span><br><span class="line">changing UID and GID of roofs to root resolved this issue.</span><br><span class="line"></span><br><span class="line">But, I&apos;m curious how the people using Yocto avoid this issue...</span><br><span class="line">I would not like to manually change the UID and GID, </span><br><span class="line">or SUID every time whenever build the rootfs.</span><br><span class="line">I also would not like to use root account to generate target rootfs.</span><br></pre></td></tr></table></figure><p></p><p>也就是说，之所以出现这种错误，是<code>UID</code>不匹配，我的<code>.cpio.gz.u-boot</code>文件中的文件<code>UID</code>是为1000，但是在mfgtools中执行的<code>UID</code>是为0(root用户)，导致出现了问题。<br>解决办法是将上述所有的步骤按照<code>root</code>权限去操作。</p><hr><h2 id="方案2：使用yocto编译出fsl-image-mfgtool-initramfs"><a href="#方案2：使用yocto编译出fsl-image-mfgtool-initramfs" class="headerlink" title="方案2：使用yocto编译出fsl-image-mfgtool-initramfs"></a>方案2：使用yocto编译出fsl-image-mfgtool-initramfs</h2><p>编译<code>fsl-image-mfgtool-initramfs</code>，<code>-v</code>的选项输出编译log。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># bitbake -f -c compile fsl-image-mfgtool-initramfs</span><br><span class="line"># bitbake -v fsl-image-mfgtool-initramfs</span><br></pre></td></tr></table></figure><p></p><p>目前这个方案还没实现成功，不清楚需要将应用程序拷贝到哪个目录进行编译打包。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> i.MX6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i.MX6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RAM_ROM_SRAM_DRAM_SDRAM_FLASH</title>
      <link href="/f3b410c4/"/>
      <url>/f3b410c4/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>以下内容完全参照三篇文章，特别是第一篇文章，再此表示感谢。<br><a href="https://blog.csdn.net/liujiaoyage/article/details/37930475" target="_blank" rel="noopener">https://blog.csdn.net/liujiaoyage/article/details/37930475</a><br><a href="http://www.atpinc.com/Memory-insider/computer-memory-types-dram-ram-module" target="_blank" rel="noopener">http://www.atpinc.com/Memory-insider/computer-memory-types-dram-ram-module</a><br><a href="https://blog.csdn.net/wbwwf8685/article/details/52724068" target="_blank" rel="noopener">https://blog.csdn.net/wbwwf8685/article/details/52724068</a></p><a id="more"></a><h2 id="RAM和ROM的区别"><a href="#RAM和ROM的区别" class="headerlink" title="RAM和ROM的区别"></a>RAM和ROM的区别</h2><p>根据掉电数据是否丢失可以分为<code>RAM（Read Only Memory/随机存取存储器）</code>和<code>ROM（Random Access Memory/只读存储器）</code>，其中<code>RAM</code>的访问速度比较快，但掉电后数据会丢失。<br>而<code>ROM</code>掉电后数据不会丢失，<code>ROM</code>可片上运行，与<code>NOR FLASH</code>一样，通常存储CPU的<code>ROM Code</code>，不可改变。能不能片上执行，主要是看存储器存放的代码是可以由CPU直接取指并执行。</p><hr><h2 id="RAM的分类"><a href="#RAM的分类" class="headerlink" title="RAM的分类"></a>RAM的分类</h2><p><code>RAM</code>又可分为<code>SRAM（Static RAM/静态存储器）</code>和<code>DRAM（Dynamic RAM/动态存储器）</code>。</p><ul><li><code>SRAM</code>：<code>SRAM</code>速度非常快，是目前读写最快的存储设备了，但是它也非常昂贵，所以只在要求很苛刻的地方使用，譬如CPU的一级缓冲，二级缓冲。</li><li><code>DRAM</code>：每个<code>DRAM</code>存储器单元由集成电路内的晶体管和电容器组成，数据位存储在电容器中。由于晶体管总是少量泄漏，电容器会缓慢放电，导致存储在其中的信息耗尽; 因此，每隔几毫秒就必须刷新<code>DRAM</code>（给定新的电子充电）以保留数据。<br>计算机内存就是<code>DRAM</code>的。<code>DRAM</code>分为很多种，常见的主要有<code>FPRAM/FastPage</code>、<code>EDORAM</code>、<code>SDRAM</code>、<code>DDR RAM</code>、<code>RDRAM</code>等。<code>DDR RAM（Date-Rate RAM）</code>也称作<code>DDR SDRAM</code>，这种改进型的<code>RAM</code>和<code>SDRAM</code>是基本一样的，不同之处在于它可以在一个时钟读写两次数据，这样就使得数据传输速度加倍了。这是目前电脑中用得最多的内存，而且它有着成本优势.</li></ul><hr><h2 id="DRAM分类"><a href="#DRAM分类" class="headerlink" title="DRAM分类"></a>DRAM分类</h2><ul><li><code>SDRAM-Synchronizes DRAM</code>：是<code>DRAM</code>的一种，它是同步动态存储器，利用一个单一的系统时钟同步所有的地址数据和控制信号。使用<code>SDRAM</code>不但能提高系统表现，还能简化设计、提供高速的数据传输，在嵌入式系统中经常使用。</li><li><code>RDRAM-Rambus DRAM</code>：名字取自Rambus公司。它在21世纪初流行，主要用于视频游戏设备和显卡，传输速度高达1GHz。</li><li><code>DDR SDRAM-Double Data Rate SDRAM</code>：双倍速率同步动态随机存储器。<code>SDRAM</code>在一个时钟周期内只传输一次数据，它是在时钟的上升期进行数据传输；而<code>DDR</code>内存则是一个时钟周期内传输两次数据，它能够在时钟的上升期和下降期各传输一次数据，因此称为双倍速率同步动态随机存储器。<br>这就是我们通常口中所说的<code>DDR</code>内存条。</li></ul><hr><h2 id="Flash定义"><a href="#Flash定义" class="headerlink" title="Flash定义"></a>Flash定义</h2><p><code>Flash</code>也是一种非易失性存储器（掉电不会丢失），它擦写方便，访问速度快，已大大取代了传统的<code>EPROM</code>的地位。由于它具有和<code>ROM</code>一样掉电不会丢失的特性，因此很多人称其为<code>Flash ROM</code>。<br><code>FLASH</code>存储器又称闪存，它结合了<code>ROM</code>和<code>RAM</code>的长处，不仅具备电子可擦出可编程<code>（EEPROM）</code>的性能，还不会断电丢失数据同时可以快速读取数据（<code>NVRAM</code>的优势），U盘和MP3里用的就是这种存储器。<br>在过去的20年里，嵌入式系统一直使用<code>ROM（EPROM）</code>作为它们的存储设备，然而近年来<code>Flash</code>全面代替了<code>ROM（EPROM）</code>在嵌入式系统中的地位，用作存储<code>bootloader</code>以及操作系统或者程序代码或者直接当硬盘使用。</p><ul><li><code>NOR Flash</code>：<code>NOR Flash</code>的读取和我们常见的<code>SDRAM</code>的读取是一样，用户可以直接运行装载在<code>NOR FLASH</code>里面的代码（也就是片上运行），这样可以减少<code>SRAM</code>的容量从而节约了成本。</li><li><code>NAND Flash</code>：<code>NAND Flash</code>没有采取内存的随机读取技术，它的读取是以一次读取一块的形式来进行的，通常是一次读取512个字节，采用这种技术的<code>Flash</code>比较廉价。<font color="red">用户不能直接运行<code>NAND Flash</code>上的代码，因此好多使用<code>NAND Flash</code>的开发板除了使用<code>NAND Flah</code>以外，还作上了一块小的<code>NOR Flash</code>来运行启动代码。</font></li></ul><p>比较：</p><ul><li><code>NAND</code>则是高数据存储密度的理想解决方案，<code>NOR</code>一般只用来存储少量的代码；</li><li><code>NOR</code>主要应用在代码存储介质中，NOR的特点是应用简单、无需专门的接口电路、传输效率高，它是属于芯片内执行<code>(XIP, eXecute In Place)</code>，这样应用程序可以直接在<code>NOR flash</code>上运行，不必再把代码读到系统RAM中；</li><li>在1～4MB的小容量时具有很高的成本效益，但是很低的写入和擦除速度大大影响了它的性能。NOR flash带有SRAM接口，有足够的地址引脚来寻址，可以很容易地存取其内部的每一个字节。NOR flash占据了容量为1～16MB闪存市场的大部分。NAND结构能提供极高的单元密度，可以达到高存储密度，并且写入和擦除的速度也很快。应用NAND的困难在于flash的管理和需要特殊的系统接口；</li><li><code>Nor Flash</code>有自己的地址线和数据线，可以采用类似于memory的随机访问方式，在<code>Nor Flash</code>上可以直接运行程序，所以<code>Nor Flash</code>可以直接用来做boot，采用<code>Nor Flash</code>启动的时候会把地址映射到0x00上；</li><li><code>Nand Flash</code>是IO设备，数据、地址、控制线都是共用的，需要软件区控制读取时序，所以不能像<code>Nor Flash</code>内存一样随机访问，不能<code>EIP</code>（片上运行），因此不能直接作为boot；</li></ul><hr><h2 id="为什么不能再NAND-上运行程序？"><a href="#为什么不能再NAND-上运行程序？" class="headerlink" title="为什么不能再NAND 上运行程序？"></a>为什么不能再NAND 上运行程序？</h2><p>代码执行主要就是指令取值和数据存取，对于指令存取和数据存取，CPU 直接将要预取的指令或者数据的地址发到系统总线上，对于ARM (就是AXBI)总线，这个地址会根据Soc之间的地址编码送到不同的控制器。<br>对于<code>NAND Flash</code>根本就没有地址线，只有数据线。<code>NAND Flash</code>的读取是要靠软件代码经过<code>NAND Flash controller</code>发相关的命令和要地址等数据到<code>NAND Flash</code>芯片内部的控制器，<font color="red">命令和地址都是经过数据线传送的</font>。一般需要多个周期，由于需要数据读写，需要软件介入，所以说他不是<code>XIP</code>的。<br><code>XIP</code>从某种意义上说是CPU送出的地址能否不经过任何软件直接能够寻址到相关的存储单元。所以<code>Nor Flash/SRAM/SDRAM</code>都是<code>XIP</code>的，而<code>Nand Flash</code>等就不是<code>XIP</code>了。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 碰到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碰到的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-commit-template</title>
      <link href="/ce5433ff/"/>
      <url>/ce5433ff/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><ul><li>可以通过<code>git config --global commit.template template.file</code>来配置特定的commit log，<code>template.file</code>为模板。</li><li>可以通过<code>scripts/checkpatch.pl [patch or source file]</code>来检查格式是否正确。</li><li><p>linux kernel的commit log建议使用如下模板：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Short (50 chars or less) summary of changes</span><br><span class="line"></span><br><span class="line">More detailed explanatory text, if necessary.  Wrap it to</span><br><span class="line">about 72 characters or so.  In some contexts, the first</span><br><span class="line">line is treated as the subject of an email and the rest of</span><br><span class="line">the text as the body.  The blank line separating the</span><br><span class="line">summary from the body is critical (unless you omit the body</span><br><span class="line">entirely); tools like rebase can get confused if you run</span><br><span class="line">the two together.</span><br><span class="line"></span><br><span class="line">Further paragraphs come after blank lines.</span><br><span class="line"></span><br><span class="line">  - Bullet points are okay, too</span><br><span class="line"></span><br><span class="line">  - Typically a hyphen or asterisk is used for the bullet,</span><br><span class="line">    preceded by a single space, with blank lines in</span><br><span class="line">    between, but conventions vary here</span><br></pre></td></tr></table></figure></li><li><p>参考资料：<br><a href="https://www.zhihu.com/question/21209619" target="_blank" rel="noopener">如何写好 Git commit log?</a><br><a href="https://stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting" target="_blank" rel="noopener">git-commit-messages-50-72-formatting</a><br><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/process/submitting-patches.rst?id=bc7938deaca7f474918c41a0372a410049bd4e13#n664" target="_blank" rel="noopener">Documentation/process/submitting-patches.rst</a><br><a href="https://consen.github.io/2018/01/19/submit-linux-kernel-patch/" target="_blank" rel="noopener">提交Linux内核Patch</a><br><a href="http://perthcharles.github.io/2015/08/14/manage-project-code-like-linux-kernel/" target="_blank" rel="noopener">像linux kernel一样管理你的项目</a><br><a href="https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html" target="_blank" rel="noopener">A Note About Git Commit Messages</a></p></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> ubuntu工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eMMC读写性能和稳定性验证</title>
      <link href="/7ffb6593/"/>
      <url>/7ffb6593/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>本文主要讲述使用<code>iozone</code>、<code>dd/cp/rm</code>命令、<code>fio</code>、<code>flashbench</code>进行eMMC读写性能和稳定性测试。读写性能主要是通过<code>iozone</code>测试，稳定性主要是通过长时间随机读写进行测试。<a id="more"></a></p><hr><h2 id="iozone进行读写性能测试"><a href="#iozone进行读写性能测试" class="headerlink" title="iozone进行读写性能测试"></a>iozone进行读写性能测试</h2><p>在之前的<a href="http://wowothink.com/iozone%E7%9A%84%E4%BD%BF%E7%94%A8.html">文章中</a>，我们介绍了<code>iozone</code>的使用，以及进行简单的读写测试。使用如下命令循环进行长时间读写测试：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while true; do /var/iozone -azecI -+n -L64 -S32 -r2m -s128m -i0 -i2 -+b 400000,30000 -w -f testfile; sleep 5; done</span><br></pre></td></tr></table></figure><p></p><p>输出结果类似如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#while true; do /var/iozone -azecI -+n -L64 -S32 -r2m -s128m -i0 -i2 -+b 400000,30000 -w -f testfile; sleep 10; done</span></span><br><span class="line">Iozone: Performance Test of File I/O</span><br><span class="line">        Version $Revision: <span class="number">3.482</span> $</span><br><span class="line">Compiled <span class="keyword">for</span> <span class="number">64</span> bit mode.</span><br><span class="line">Build: linux-arm </span><br><span class="line"></span><br><span class="line">Contributors:William Norcott, Don Capps, Isom Crawford, Kirby Collins</span><br><span class="line">             Al Slater, Scott Rhine, Mike Wisner, Ken Goss</span><br><span class="line">             Steve Landherr, Brad Smith, Mark Kelly, Dr. Alain CYR,</span><br><span class="line">             Randy Dunlap, Mark Montague, Dan Million, Gavin Brebner,</span><br><span class="line">             Jean-Marc Zucconi, Jeff Blomberg, Benny Halevy, Dave Boone,</span><br><span class="line">             Erik Habbinga, Kris Strecker, Walter Wong, Joshua Root,</span><br><span class="line">             Fabrice Bacchella, Zhenghua Xue, Qin Li, Darren Sawyer,</span><br><span class="line">             Vangel Bojaxhi, Ben England, Vikentsi Lapa,</span><br><span class="line">             Alexey Skidanov, Sudhir Kumar.</span><br><span class="line"></span><br><span class="line">Run began: Thu Jan  <span class="number">1</span> <span class="number">00</span>:<span class="number">43</span>:<span class="number">42</span> <span class="number">1970</span></span><br><span class="line"></span><br><span class="line">Auto Mode</span><br><span class="line">Cross over of record size disabled.</span><br><span class="line">Include fsync <span class="keyword">in</span> write timing</span><br><span class="line">Include close <span class="keyword">in</span> write timing</span><br><span class="line">O_DIRECT feature enabled</span><br><span class="line">No retest option selected</span><br><span class="line">Record Size <span class="number">2048</span> kB</span><br><span class="line">File size set to <span class="number">131072</span> kB</span><br><span class="line">Setting no_unlink</span><br><span class="line">Command line used: ./iozone -azecI -+n -L64 -S32 -r2m -s128m -i0 -i2 -+b <span class="number">400000</span>,<span class="number">30000</span> -w -f testfile</span><br><span class="line">Output <span class="keyword">is</span> <span class="keyword">in</span> kBytes/sec</span><br><span class="line">Time Resolution = <span class="number">0.000001</span> seconds.</span><br><span class="line">Processor cache size set to <span class="number">32</span> kBytes.</span><br><span class="line">Processor cache line size set to <span class="number">64</span> bytes.</span><br><span class="line">File stride size set to <span class="number">17</span> * record size.</span><br><span class="line">Burst size set to <span class="number">400000</span> Kbytes.</span><br><span class="line">Burst sleep duration set to <span class="number">30000</span> msec</span><br><span class="line">                                                              random    random     bkwd    record    stride                                    </span><br><span class="line">              kB  reclen    write  rewrite    read    reread    read     write     read   rewrite      read   fwrite frewrite    fread  freread</span><br><span class="line">          <span class="number">131072</span>    <span class="number">2048</span>    <span class="number">29113</span>        <span class="number">0</span>                     <span class="number">120309</span>    <span class="number">30641</span>                                                                </span><br><span class="line"></span><br><span class="line">iozone test complete.</span><br><span class="line">Iozone: Performance Test of File I/O</span><br><span class="line">        Version $Revision: <span class="number">3.482</span> $</span><br><span class="line">Compiled <span class="keyword">for</span> <span class="number">64</span> bit mode.</span><br><span class="line">Build: linux-arm </span><br><span class="line"></span><br><span class="line">Contributors:William Norcott, Don Capps, Isom Crawford, Kirby Collins</span><br><span class="line">             Al Slater, Scott Rhine, Mike Wisner, Ken Goss</span><br><span class="line">             Steve Landherr, Brad Smith, Mark Kelly, Dr. Alain CYR,</span><br><span class="line">             Randy Dunlap, Mark Montague, Dan Million, Gavin Brebner,</span><br><span class="line">             Jean-Marc Zucconi, Jeff Blomberg, Benny Halevy, Dave Boone,</span><br><span class="line">             Erik Habbinga, Kris Strecker, Walter Wong, Joshua Root,</span><br><span class="line">             Fabrice Bacchella, Zhenghua Xue, Qin Li, Darren Sawyer,</span><br><span class="line">             Vangel Bojaxhi, Ben England, Vikentsi Lapa,</span><br><span class="line">             Alexey Skidanov, Sudhir Kumar.</span><br><span class="line"></span><br><span class="line">Run began: Thu Jan  <span class="number">1</span> <span class="number">00</span>:<span class="number">44</span>:<span class="number">03</span> <span class="number">1970</span></span><br><span class="line"></span><br><span class="line">Auto Mode</span><br><span class="line">Cross over of record size disabled.</span><br><span class="line">Include fsync <span class="keyword">in</span> write timing</span><br><span class="line">Include close <span class="keyword">in</span> write timing</span><br><span class="line">O_DIRECT feature enabled</span><br><span class="line">No retest option selected</span><br><span class="line">Record Size <span class="number">2048</span> kB</span><br><span class="line">File size set to <span class="number">131072</span> kB</span><br><span class="line">Setting no_unlink</span><br><span class="line">Command line used: ./iozone -azecI -+n -L64 -S32 -r2m -s128m -i0 -i2 -+b <span class="number">400000</span>,<span class="number">30000</span> -w -f testfile</span><br><span class="line">Output <span class="keyword">is</span> <span class="keyword">in</span> kBytes/sec</span><br><span class="line">Time Resolution = <span class="number">0.000001</span> seconds.</span><br><span class="line">Processor cache size set to <span class="number">32</span> kBytes.</span><br><span class="line">Processor cache line size set to <span class="number">64</span> bytes.</span><br><span class="line">File stride size set to <span class="number">17</span> * record size.</span><br><span class="line">Burst size set to <span class="number">400000</span> Kbytes.</span><br><span class="line">Burst sleep duration set to <span class="number">30000</span> msec</span><br><span class="line">                                                              random    random     bkwd    record    stride                                    </span><br><span class="line">              kB  reclen    write  rewrite    read    reread    read     write     read   rewrite      read   fwrite frewrite    fread  freread</span><br><span class="line">          <span class="number">131072</span>    <span class="number">2048</span>    <span class="number">27780</span>        <span class="number">0</span>                     <span class="number">131062</span>    <span class="number">31161</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p></p><p>上述测试可以放置测试，看看emmc或者文件系统有没有报错。然后我们可以将测试过程中的log保存为一个文件，通过python去解析读写速度并将其输出到excel表格中。再通过图表的形式，看读写速度是不是稳定持续，有没有出现突变的情况。比如我测试的读写速度输出如下，当然，这里面的格式可以稍微整理一下。<br><img src="https://pic.superbed.cn/item/5c84ca483a213b04179add6f" alt="eMMC读写性能和稳定性验证-1"><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line">file = open(<span class="string">"./emmc_test.txt"</span>)</span><br><span class="line">line = <span class="number">0</span></span><br><span class="line">list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    content = file.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> content:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    line = line+<span class="number">1</span></span><br><span class="line">    content=content.strip(<span class="string">'\n'</span>)</span><br><span class="line">    iscomplete = content.startswith(<span class="string">"          131072"</span>)</span><br><span class="line">    <span class="keyword">if</span> iscomplete == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 读速度</span></span><br><span class="line">        <span class="comment">#print("%d: %s\n" %(line-1,content))</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 读速度</span></span><br><span class="line">        read_start_index = <span class="number">63</span></span><br><span class="line">        read_end_index = <span class="number">69</span></span><br><span class="line">        read_speed_str = content[read_start_index:read_end_index]</span><br><span class="line">        read_speed = int(read_speed_str)</span><br><span class="line">        <span class="comment"># print("%d, %d, %d\n" %(read_start_index, read_end_index, read_speed))</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 写速度</span></span><br><span class="line">        write_start_index = <span class="number">73</span></span><br><span class="line">        write_end_index = <span class="number">78</span></span><br><span class="line">        write_speed_str = content[write_start_index:write_end_index]</span><br><span class="line">        write_speed = int(write_speed_str)</span><br><span class="line">        <span class="comment">#print("%d, %d, %d\n" %(write_start_index, write_end_index, write_speed))</span></span><br><span class="line">        list.append((read_speed, write_speed))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入到excel表格中</span></span><br><span class="line">data=xlwt.Workbook()</span><br><span class="line">table=data.add_sheet(<span class="string">"emmc"</span>)</span><br><span class="line">table.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">u'读速度'</span>)</span><br><span class="line">table.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">u'写速度'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(list)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">2</span>):</span><br><span class="line">        table.write(i+<span class="number">1</span>, <span class="number">1</span>-j, list[i][j])</span><br><span class="line">data.save(<span class="string">"output.xls"</span>)</span><br></pre></td></tr></table></figure><p></p><hr><h2 id="dd-cp命令进行读写压力测试"><a href="#dd-cp命令进行读写压力测试" class="headerlink" title="dd/cp命令进行读写压力测试"></a>dd/cp命令进行读写压力测试</h2><p>关于<code>dd</code>命令的详细使用，可以参照：<a href="https://www.gnu.org/software/coreutils/manual/html_node/dd-invocation.html" target="_blank" rel="noopener">https://www.gnu.org/software/coreutils/manual/html_node/dd-invocation.html</a><br>在下面的脚本中，测试<code>dd</code>多次读写100M的文件，当然，可以将<code>dd</code>命令替换成<code>cp</code>命令测试。<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo "eMMC dd test start ...."</span><br><span class="line">test_times=100000</span><br><span class="line">i=0</span><br><span class="line"><span class="meta">while(($</span><span class="bash">i &lt; <span class="variable">$test_times</span>))</span></span><br><span class="line">do</span><br><span class="line">printf "test count: %d\n" $i</span><br><span class="line">echo "dd write test"</span><br><span class="line">time dd if=/dev/zero of=/var/temp bs=512 count=204800</span><br><span class="line">sync</span><br><span class="line"></span><br><span class="line">echo "dd read test"</span><br><span class="line">time dd if=/var/temp of=/dev/null bs=512 count=204800</span><br><span class="line">sync</span><br><span class="line"></span><br><span class="line">echo "remove temp file"</span><br><span class="line">rm -rf /var/temp</span><br><span class="line">sync</span><br><span class="line"></span><br><span class="line">echo "drop caches"</span><br><span class="line">echo 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line">sleep 1</span><br><span class="line">i=$(($i+1))</span><br><span class="line">printf "\n\n"</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p></p><p>上面的是带文件系统的读写，如果要测试直接IO读写，需要给<code>dd</code>命令加上<code>iflag=direct,nonblock</code>或<code>oflag=direct,nonblock</code>的参数。关于这两个参数的解释，详见：<br><a href="http://blog.sina.com.cn/s/blog_5d9051c00100g4aj.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_5d9051c00100g4aj.html</a><br><a href="https://blog.csdn.net/menogen/article/details/38059671" target="_blank" rel="noopener">https://blog.csdn.net/menogen/article/details/38059671</a></p><p>但是我这边使用的<code>dd</code>命令版本不支持这两个参数，可下载<code>dd</code>源码自行交叉编译：<br><a href="https://www.gnu.org/software/coreutils/coreutils.html" target="_blank" rel="noopener">https://www.gnu.org/software/coreutils/coreutils.html</a><br><a href="https://unix.stackexchange.com/questions/189804/how-can-i-cross-compile-the-dd-linux-tool-for-arm" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/189804/how-can-i-cross-compile-the-dd-linux-tool-for-arm</a></p><hr><h2 id="fio性能测试工具"><a href="#fio性能测试工具" class="headerlink" title="fio性能测试工具"></a>fio性能测试工具</h2><p><code>fio</code>为<code>flexible I/O tester</code>，是一个工具，它将生成许多线程或进程，执行用户指定的特定类型的IO操作。<code>fio</code>的典型用法是编写与想要模拟的IO负载匹配的作业文件。<code>fio</code>是一个专业的测试IO性能的工具，不太适用于我们的测试场景，以下内容只是作为简单的了解使用。<br>从 <a href="https://github.com/axboe/fio" target="_blank" rel="noopener">https://github.com/axboe/fio</a> clone一个source code下来，然后交叉编译生成<code>fio</code>，测试命令为：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ./fio -filename=/dev/block/mmcblk0 -direct=1 -iodepth 1 -thread -rw=<span class="built_in">read</span> -ioengine=psync -bs=16k -numjobs=30 -runtime=60 -group_reporting -name=<span class="string">"IORTest"</span></span></span><br></pre></td></tr></table></figure><p></p><p>得到的结果为：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">IORTest: (g=0): rw=read, bs=(R) 16.0KiB-16.0KiB, (W) 16.0KiB-16.0KiB, (T) 16.0KiB-16.0KiB, ioengine=psync, iodepth=1</span><br><span class="line">...</span><br><span class="line">fio-3.11-21-g307f</span><br><span class="line">Starting 30 threads</span><br><span class="line">Jobs: 30 (f=30): [R(30)][100.0%][r=43.4MiB/s][r=2778 IOPS][eta 00m:00s]</span><br><span class="line">IORTest: (groupid=0, jobs=30): err= 0: pid=1533: Thu Jan  1 00:01:22 1970</span><br><span class="line">   read: IOPS=3050, BW=47.7MiB/s (49.0MB/s)(2860MiB/60019msec)</span><br><span class="line">    clat (usec): min=351, max=6205.4k, avg=9827.33, stdev=180070.72</span><br><span class="line">     lat (usec): min=353, max=6205.4k, avg=9828.22, stdev=180070.72</span><br><span class="line">    clat percentiles (usec):</span><br><span class="line">     |  1.00th=[    791],  5.00th=[    799], 10.00th=[    816],</span><br><span class="line">     | 20.00th=[    832], 30.00th=[    848], 40.00th=[    979],</span><br><span class="line">     | 50.00th=[   1012], 60.00th=[   1057], 70.00th=[   1074],</span><br><span class="line">     | 80.00th=[   1090], 90.00th=[   1090], 95.00th=[   1106],</span><br><span class="line">     | 99.00th=[   1221], 99.50th=[   1565], 99.90th=[3774874],</span><br><span class="line">     | 99.95th=[4328522], 99.99th=[5268046]</span><br><span class="line">   bw (  KiB/s): min=   31, max=19232, per=13.03%, avg=6358.74, stdev=5584.55, samples=914</span><br><span class="line">   iops        : min=    1, max= 1202, avg=396.95, stdev=349.09, samples=915</span><br><span class="line">  lat (usec)   : 500=0.01%, 750=0.45%, 1000=46.08%</span><br><span class="line">  lat (msec)   : 2=53.04%, 4=0.03%, 10=0.01%, 20=0.01%, 50=0.01%</span><br><span class="line">  lat (msec)   : 100=0.01%, 250=0.05%, 500=0.05%, 750=0.01%, 1000=0.01%</span><br><span class="line">  cpu          : usr=0.10%, sys=0.35%, ctx=183434, majf=0, minf=153</span><br><span class="line">  IO depths    : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0%</span><br><span class="line">     submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</span><br><span class="line">     complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</span><br><span class="line">     issued rwts: total=183066,0,0,0 short=0,0,0,0 dropped=0,0,0,0</span><br><span class="line">     latency   : target=0, window=0, percentile=100.00%, depth=1</span><br><span class="line"></span><br><span class="line">Run status group 0 (all jobs):</span><br><span class="line">   READ: bw=47.7MiB/s (49.0MB/s), 47.7MiB/s-47.7MiB/s (49.0MB/s-49.0MB/s), io=2860MiB (2999MB), run=60019-60019msec</span><br><span class="line"></span><br><span class="line">Disk stats (read/write):</span><br><span class="line">  mmcblk0: ios=182797/0, merge=29/0, ticks=2051544/0, in_queue=2144416, util=100.00%</span><br></pre></td></tr></table></figure><p></p><p>关于参数的说明可以参照：<br><a href="https://linux.die.net/man/1/fio" target="_blank" rel="noopener">https://linux.die.net/man/1/fio</a><br><a href="https://github.com/axboe/fio/blob/master/HOWTO" target="_blank" rel="noopener">https://github.com/axboe/fio/blob/master/HOWTO</a></p><p>关于输出结果的解释说明，可以参照：<br><a href="https://tobert.github.io/post/2014-04-17-fio-output-explained.html" target="_blank" rel="noopener">https://tobert.github.io/post/2014-04-17-fio-output-explained.html</a></p><p>用法的例子可以参照：<br><a href="https://blog.csdn.net/jiecxy/article/details/58197387?utm_source=blogxgwz10" target="_blank" rel="noopener">https://blog.csdn.net/jiecxy/article/details/58197387?utm_source=blogxgwz10</a><br><a href="https://blog.csdn.net/m0_37972390/article/details/80019762" target="_blank" rel="noopener">https://blog.csdn.net/m0_37972390/article/details/80019762</a><br><a href="https://www.jianshu.com/p/9d823b353f22" target="_blank" rel="noopener">https://www.jianshu.com/p/9d823b353f22</a></p><hr><h2 id="flashbench"><a href="#flashbench" class="headerlink" title="flashbench"></a>flashbench</h2><p><code>flashbench</code>是用于识别linaro闪存调查的SD卡和其他媒体属性的工具。<br>参考资料：<br><a href="https://github.com/bradfa/flashbench" target="_blank" rel="noopener">https://github.com/bradfa/flashbench</a><br><a href="https://lwn.net/Articles/428584/" target="_blank" rel="noopener">https://lwn.net/Articles/428584/</a><br><a href="https://blog.csdn.net/luckywang1103/article/details/53175368?locationNum=10&amp;fps=1" target="_blank" rel="noopener">https://blog.csdn.net/luckywang1103/article/details/53175368?locationNum=10&amp;fps=1</a><br><a href="https://wiki.linaro.org/WorkingGroups/KernelArchived/Projects/FlashCardSurvey" target="_blank" rel="noopener">https://wiki.linaro.org/WorkingGroups/KernelArchived/Projects/FlashCardSurvey</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="/423abe9e/"/>
      <url>/423abe9e/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h3 id="clone某个ip地址的git仓库"><a href="#clone某个ip地址的git仓库" class="headerlink" title="clone某个ip地址的git仓库"></a>clone某个ip地址的git仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">git <span class="built_in">clone</span> git@192.168.1.3:knl/kernel-imx6.git</span></span><br></pre></td></tr></table></figure><h3 id="git删除未跟踪的文件"><a href="#git删除未跟踪的文件" class="headerlink" title="git删除未跟踪的文件"></a>git删除未跟踪的文件</h3><ul><li><code>git clean -f</code>: 删除 untracked files；</li><li><code>git clean -fd</code>: 连untracked的目录也一起删掉；</li><li><code>git clean -dxf</code>: 连gitignore的untrack文件和目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）。</li></ul><h3 id="代码提交并加上commit-id"><a href="#代码提交并加上commit-id" class="headerlink" title="代码提交并加上commit id"></a>代码提交并加上commit id</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">gitdir=$(git rev-parse --git-dir); scp -p -P 29418 user-name@192.168.1.74:hooks/commit-msg <span class="variable">$&#123;gitdir&#125;</span>/hooks/</span></span><br><span class="line"><span class="meta">#</span><span class="bash">git commit --amend</span></span><br><span class="line"><span class="meta">#</span><span class="bash">git push branch-name HEAD:refs/<span class="keyword">for</span>/master</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="撤销上次merge中解决conflict的记录"><a href="#撤销上次merge中解决conflict的记录" class="headerlink" title="撤销上次merge中解决conflict的记录"></a>撤销上次merge中解决conflict的记录</h3><p>git会记录上次merge过程中解决conflict的解决方案，如果下次碰到类似的情况，那么就会使用上次的方案并且会提示<code>using previous resolution.</code>。如果想要忽略此操作可以使用命令：<br><code>git rerere forget</code>或者<code>rm -rf .git/rr-cache</code>。<br><code>rerere</code>：reuse recorded resolution</p><h3 id="repo代码"><a href="#repo代码" class="headerlink" title="repo代码"></a>repo代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">repo init -u ssh://192.168.1.74:29418/Src/XXX/platform/manifest -b XXX/iMX6_1s -m xxx.xml</span></span><br><span class="line"><span class="meta">#</span><span class="bash">repo sync</span></span><br><span class="line"><span class="meta">#</span><span class="bash">repo start branch-name --all</span></span><br></pre></td></tr></table></figure><h3 id="单独取出某个提交的patch"><a href="#单独取出某个提交的patch" class="headerlink" title="单独取出某个提交的patch"></a>单独取出某个提交的patch</h3><p><code>git format-patch -s -1 commitid</code></p><h3 id="单独取出某个提交中的某个文件的patch"><a href="#单独取出某个提交中的某个文件的patch" class="headerlink" title="单独取出某个提交中的某个文件的patch"></a>单独取出某个提交中的某个文件的patch</h3><p><code>git format-patch -s -1 commit_id file_name</code></p><h3 id="批量patch操作"><a href="#批量patch操作" class="headerlink" title="批量patch操作"></a>批量patch操作</h3><p><a href="http://blog.csdn.net/wh_19910525/article/details/19416857" target="_blank" rel="noopener">http://blog.csdn.net/wh_19910525/article/details/19416857</a><br>比如说当前有A/B两个项目使用同一版本的u-boot，但是A和B并不是由同一个branch引申出来的，没有共同的base。其中A当前的代码与B项目提交的前面20个提交（假设此处提交为P20，commit id为<code>456789</code>）相近。此时要求将A更新到与B一样的代码并且提交履历。<br>在B项目做如下操作：<code>git format-patch -s 456789 ./</code><br>B项目中当前目录下生成从P20的提交到最新提交的所有patch。每个提交都有对应的一个patch，总共20个patch。格式如下：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">cp -rf ./*.patch patch_dir/         将生成的所有patch文件拷贝到patch_dir/目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash">git checkout -b B_base 456789       B项目回到与A项目类似的版本</span></span><br></pre></td></tr></table></figure><p></p><p>在A项目做如下操作：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">rm -rf A_Dir/*                     将A项目中的代码全部删除</span></span><br><span class="line"><span class="meta">#</span><span class="bash">cp -rf B_Dir/* A_Dir/              将B项目的代码全部拷贝到A去，此时code base完全一样。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">git add -A</span></span><br><span class="line"><span class="meta">#</span><span class="bash">git commit -a “base the same as B”</span></span><br><span class="line"><span class="meta">#</span><span class="bash">git am --abort         放弃掉以前的am信息，这样才可以进行一次全新的am。</span></span><br></pre></td></tr></table></figure><p></p><p>将<code>patch_dir/</code>目录下所有patch文件按顺序打到当前目录下<code>git am B_Dir/patch_dir/*.patch</code>。此时A项目的代码会和B项目的代码完全一致，且包含B代码中最近20个提交的信息。<br>使用<code>git am</code>命令关键是要找到两个相同的code base然后进行替换。</p><h3 id="repo-forall-c"><a href="#repo-forall-c" class="headerlink" title="repo forall -c"></a>repo forall -c</h3><p>这个命令会遍历所有的git仓库，并在每个仓库执行<code>-c</code>所指定的命令（这个被执行的命令就不限于仅仅是git命令了，而是任何被系统支持的命令，比如：<code>ls</code>、<code>pwd</code>、<code>cp</code>等等的）当我想通过这个命令遍历所有的仓库并在每个仓库执行<code>git checkout .</code>用以将每个仓库的改动都清除的时候，我这么输入命令：<code>repo forall -c git checkout .</code><br>我发现这样根本不行。看来repo不能遍历执行<code>checkout</code>这个命令。今天我终于想到了另外一个命令<code>git reset –hard HEAD</code>: <code>repo forall -c git reset --hard HEAD</code>。</p><p>再说一个新发现：以前用<code>repo forall</code>执行一些命令的时候，可能再遍历到某个仓库的时候出了问题，但是我却苦于不知道这个仓库到底是哪个！一直也没有解决。今天终于找到了。关键时候还是要看命令自己带的帮助手册呀。。。<br><code>repo help forall</code>用这个命令查看下针对forall的帮助吧。说的很清楚，<code>repo</code>执行的时候加上<code>-p</code>参数就可以在遍历到每个仓库的时候先打印出当前的<code>pwd</code>，然后再继续执行<code>-c</code>所指定的命令。举例如下：<br><code>repo forall -p -c git branch</code>：该命令会遍历所有仓库并打印每个仓库的分支情况，由于有了<code>-p</code>参数，这样便会打印出每个仓库的路径</p><h3 id="将本地分支与远程分支同步起来"><a href="#将本地分支与远程分支同步起来" class="headerlink" title="将本地分支与远程分支同步起来"></a>将本地分支与远程分支同步起来</h3><p><code>git checkout --track -b master xxx/master</code>: 新建一个分支<code>master</code>并将其与远程分支<code>xxx/master</code>同步起来。可以查看<code>./git/config</code>文件看本地分支与远程分支的同步情况。</p><h3 id="git骚操作"><a href="#git骚操作" class="headerlink" title="git骚操作"></a>git骚操作</h3><p><a href="https://blog.csdn.net/coder_pig/article/details/54346867" target="_blank" rel="noopener">https://blog.csdn.net/coder_pig/article/details/54346867</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> ubuntu工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/d0edc1ed/"/>
      <url>/d0edc1ed/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h3 id="替换当前目录下所有字符串"><a href="#替换当前目录下所有字符串" class="headerlink" title="替换当前目录下所有字符串"></a>替换当前目录下所有字符串</h3><p>在Android的开发过程中，要将Android移植到自己的平台并将所有关于<code>Android.mk</code>字符串重命名为<code>Mydroid.mk</code>。<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> sed -i s/"Android.mk"/"Mydroid.mk"/g `grep -rl "Android.mk" ./`</span><br></pre></td></tr></table></figure><p></p><p>首先<code>grep</code>当前目录下包含<code>Android.mk</code>字符串的文件，然后输入给<code>sed</code>进行替换。注意包住<code>grep</code>命令的是<code>\`</code>(TAB键上面的字符，不包括<code>\</code>)，而不是<code>’</code>(单引号)。 可在<code>grep</code>命令后面加上<code>–exclude_dir=&quot;.git&quot;</code>排除对<code>.git/</code>目录下文件的替换。</p><h3 id="查看某个xxx命令的帮助"><a href="#查看某个xxx命令的帮助" class="headerlink" title="查看某个xxx命令的帮助"></a>查看某个xxx命令的帮助</h3><p><code>man xxx</code></p><h3 id="rename批量文件操作"><a href="#rename批量文件操作" class="headerlink" title="rename批量文件操作"></a>rename批量文件操作</h3><p>将Android项目中所有文件夹下名字为<code>Androd.mk</code>的文件重命名为<code>Mydroid.mk</code>。前面的是替换字符串。<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> find ./ -name "Android.mk" | xargs rename "s/Android.mk/Mydroid.mk/g"</span><br></pre></td></tr></table></figure><p></p><h3 id="scp-局域网内拷贝"><a href="#scp-局域网内拷贝" class="headerlink" title="scp 局域网内拷贝"></a>scp 局域网内拷贝</h3><p>假设本地一份Android的source code在A(192.168.1.2)电脑上(~/work/A_Android)，要将其拷贝到远程同一局域网内的B电脑(192.168.1.3 用户名为：xxx)的目录(~/work/B_Android)下：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> scp -r ~/work/A_Android xxx@192.168.1.3:~/work/B_Android</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h3 id="查看某个目录的占用空间"><a href="#查看某个目录的占用空间" class="headerlink" title="查看某个目录的占用空间"></a>查看某个目录的占用空间</h3><p><code>du -sh ./</code></p><h3 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h3><p><code>ln -s entity_file virtual_file</code>: 其中<code>entity_file</code>为真实存在的文件，<code>virtual_file</code>为软连接生成的文件。</p><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p><code>export MYVAR=true</code>: 添加环境变量<code>MYVAR</code><br><code>env | grep MYVAR</code>: 在环境变量中查找<code>MYVAR</code><br><code>unset MYVAR</code>: 删除环境变量<code>MYVAR</code></p><h3 id="获取当前CPU温度"><a href="#获取当前CPU温度" class="headerlink" title="获取当前CPU温度"></a>获取当前CPU温度</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>cat /sys/class/thermal/thermal_zone0/temp</span><br></pre></td></tr></table></figure><p>获取到的值除以1000就是当前CPU的摄氏温度了。</p><h3 id="挂载只读分区为可读写分区"><a href="#挂载只读分区为可读写分区" class="headerlink" title="挂载只读分区为可读写分区"></a>挂载只读分区为可读写分区</h3><p><code>mount -o remount rw /system</code></p><ul><li><code>-o</code>: 指定加载文件系统的选项；</li><li><code>remount</code>: 为<code>-o</code>的选项，重新加载设备，常用于改变设备的状态；</li><li><code>rw</code>: 为<code>-o</code>的选项，以可读写模式加载；</li><li><code>/system</code>: 重新将挂载的只读的<code>/system</code>分区挂载为可读写。</li></ul><h3 id="挂载U盘"><a href="#挂载U盘" class="headerlink" title="挂载U盘"></a>挂载U盘</h3><p><code>mount -t vfat /dev/block/sda1 /temp</code></p><h3 id="挂在文件系统"><a href="#挂在文件系统" class="headerlink" title="挂在文件系统"></a>挂在文件系统</h3><p><code>mount -t ext4 /dev/block/mmcblk0p1 /system</code></p><h3 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h3><p>在Linux shell窗口下<code>ctrl + shift + c</code> 和<code>ctrl + shift + v</code>为复制粘贴。 <code>shift + insert</code>也可以进行粘贴。</p><h3 id="编译过程中的信息输出到文件"><a href="#编译过程中的信息输出到文件" class="headerlink" title="编译过程中的信息输出到文件"></a>编译过程中的信息输出到文件</h3><p><code>make 2&gt;&amp;1 | tee build.log</code></p><h3 id="串口工具minicom的使用"><a href="#串口工具minicom的使用" class="headerlink" title="串口工具minicom的使用"></a>串口工具minicom的使用</h3><p><code>sudo minicom -s</code>启动minicom的配置选项，通过字母选择配置选项。</p><ul><li>启动后的minicom可以先按<code>ctrl+a</code>然后再按<code>z</code>可以出现帮助界面，之后选择对应字母可以配置minicom的功能。选择<code>Serial port setup</code>并做如下配置，可配置串口信息：<br><img src="https://pic.superbed.cn/item/5c84cf8e3a213b04179b2d6a" alt="图1"></li><li><p>如果说minicom只输入打印信息但是键盘无法输入，此时是由于打开硬件流控，设置<code>Hardware Flow Control</code>为<code>NO</code>即可。</p></li><li><p>打开minicom，然后按一下<code>ctrl + a</code>，再按<code>z</code>键，会出现下面这个界面，看到<code>Capture on/off</code>这项了吗，按下<code>l</code>键，命名要保存的log名称即可保存log。<br><img src="https://pic.superbed.cn/item/5c84cf8e3a213b04179b2d6c" alt="图1"></p></li></ul><h3 id="的神奇用法"><a href="#的神奇用法" class="headerlink" title="! 的神奇用法"></a>! 的神奇用法</h3><p><a href="http://www.linuxidc.com/Linux/2015-05/117774.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2015-05/117774.htm</a><br><code>!</code>是可以指定执行前面执行过的第几条命令，通常跟<code>history</code>命令搭配。比如说经常会出现这种情况，有个命令<code>xxx</code>，此时你去执行它，比如:<code>xxx argv1 ~/work/other</code>。<br>这样会提示你没有权限执行 xxx 命令，正常你会重新做如下处理：<code>sudo xxx argv1 ~/work/other</code>。<br>但是此时我们可以使用<code>!!</code>来替代上次的命令，可以使用：<code>sudo !!</code>。<br>你可以运行<code>!-1</code>、<code>!-2</code>或者<code>!-7</code>等命令来执行你记录序列中的倒数第一条命令、倒数第二条命令已经倒数第七条等等。</p><h3 id="查找历史命令"><a href="#查找历史命令" class="headerlink" title="查找历史命令"></a>查找历史命令</h3><p>可以使用<code>ctrl + r</code>，然后键入你要查找的关键字符串，此时会将已经执行过的命令自动补全。<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(reverse-i-search)`make ker': make kernelimage</span><br></pre></td></tr></table></figure><p></p><p>其中<code>make ker</code>是我敲入的，而<code>make kernelimage</code>是查找的结果，回车就可以执行<code>make kernelimage</code>编译kernel的操作。</p><h3 id="grep-忽略某个目录"><a href="#grep-忽略某个目录" class="headerlink" title="grep 忽略某个目录"></a>grep 忽略某个目录</h3><p><code>grep -rn “xxx” -R --exclude-dir=Dir_Name</code></p><h3 id="grep两个字符串"><a href="#grep两个字符串" class="headerlink" title="grep两个字符串"></a>grep两个字符串</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">Victor@Victor-HP:/$cat /proc/1/status</span><br><span class="line">Name:   init</span><br><span class="line">State:  S (sleeping)</span><br><span class="line">Tgid:   1</span><br><span class="line">Ngid:   0</span><br><span class="line">Pid:    1</span><br><span class="line">PPid:   0</span><br><span class="line">TracerPid:  0</span><br><span class="line">Uid:    0   0   0   0</span><br><span class="line">Gid:    0   0   0   0</span><br><span class="line">FDSize: 64</span><br><span class="line">Groups: </span><br><span class="line">NStgid: 1</span><br><span class="line">NSpid:  1</span><br><span class="line">NSpgid: 1</span><br><span class="line">NSsid:  1</span><br><span class="line">VmPeak:    33900 kB</span><br><span class="line">VmSize:    33860 kB</span><br><span class="line">VmLck:         0 kB</span><br><span class="line">VmPin:         0 kB</span><br><span class="line">VmHWM:      4296 kB</span><br><span class="line">VmRSS:      3496 kB</span><br><span class="line">VmData:     1636 kB</span><br><span class="line">VmStk:       136 kB</span><br><span class="line">VmExe:       248 kB</span><br><span class="line">VmLib:      3068 kB</span><br><span class="line">VmPTE:        88 kB</span><br><span class="line">VmPMD:        12 kB</span><br><span class="line">VmSwap:      272 kB</span><br><span class="line">Threads:    1</span><br><span class="line">SigQ:   0/15244</span><br><span class="line">SigPnd: 0000000000000000</span><br><span class="line">ShdPnd: 0000000000000000</span><br><span class="line">SigBlk: 0000000000000000</span><br><span class="line">SigIgn: 0000000000001000</span><br><span class="line">SigCgt: 00000001a0016623</span><br><span class="line">CapInh: 0000000000000000</span><br><span class="line">CapPrm: 0000003fffffffff</span><br><span class="line">CapEff: 0000003fffffffff</span><br><span class="line">CapBnd: 0000003fffffffff</span><br><span class="line">Seccomp:    0</span><br><span class="line">Cpus_allowed:   ff</span><br><span class="line">Cpus_allowed_list:  0-7</span><br><span class="line">Mems_allowed:   00000000,00000001</span><br><span class="line">Mems_allowed_list:  0</span><br><span class="line">voluntary_ctxt_switches:    4450</span><br><span class="line">nonvoluntary_ctxt_switches: 2503</span><br></pre></td></tr></table></figure><p>比如说我只想要<code>VmSize</code>和<code>VmRSS</code>的内容，可以使用如下命令：<br><code>cat /proc/1/status | grep -E &#39;VmSize|VmRSS&#39;</code><br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Victor@Victor-HP:/$cat /proc/1/status | grep -E 'VmSize|VmRSS'</span><br><span class="line">VmSize:    33860 kB</span><br><span class="line">VmRSS:      3496 kB</span><br></pre></td></tr></table></figure><p></p><h3 id="while-true"><a href="#while-true" class="headerlink" title="while true"></a>while true</h3><p>假设我们要持续cat 某一个GPIO的状态，不用一直执行如下的命令：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>cat /sys/class/gpio/gpio88/value</span><br></pre></td></tr></table></figure><p></p><p>我们可以在 shell 下执行 while true 命令来连续执行某个命令，比如说：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>while true</span><br><span class="line"><span class="meta">&gt;</span> do</span><br><span class="line"><span class="meta">&gt;</span> cat /sys/class/gpio/gpio88/value</span><br><span class="line"><span class="meta">&gt;</span> sleep 2</span><br><span class="line"><span class="meta">&gt;</span> done</span><br></pre></td></tr></table></figure><p></p><p>其中<code>do</code>和<code>done</code>中间为要循环执行的命令，<code>sleep 2</code>表示休眠2s。</p><h3 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h3><p>使用<code>objdump</code>工具反汇编生成的<code>vmlinux</code>文件，将反汇编的结果输出给<code>vmlinux.log</code>。<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ../prebuilts/gcc/linux-x86/arm/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-objdump -d -l -f -g -S vmlinux &gt; vmlinux.log</span><br></pre></td></tr></table></figure><p></p><h3 id="复制大文件"><a href="#复制大文件" class="headerlink" title="复制大文件"></a>复制大文件</h3><p>当要大量复制（或移动）文件时<code>cp ./*.patch patch/</code>，有时会提示如下错误<code>-bash: /bin/cp: 参数列表过长</code>，解决办法：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> find . -name "*.patch" -exec cp &#123;&#125; ./patch/ \;</span><br></pre></td></tr></table></figure><p></p><p>提示：在使用<code>-exec</code>参数时，必须以<code>\;</code>结尾，而且之前要有一个空格，否则，系统会提示<code>find遗漏-exec参数，命令将无法执行</code>。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> ubuntu工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vi常用命令</title>
      <link href="/5e60c079/"/>
      <url>/5e60c079/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><h3 id="在vi编辑器中使用sudo命令"><a href="#在vi编辑器中使用sudo命令" class="headerlink" title="在vi编辑器中使用sudo命令"></a>在vi编辑器中使用sudo命令</h3><p><code>:w !sudo tee %</code><br>命令<code>:w !{cmd}</code>，让<code>vim</code>执行一个外部命令<code>{cmd}</code>，然后把当前缓冲区的内容从<code>stdin</code>传入。<code>tee</code>是一个把<code>stdin</code>保存到文件的小工具。 而<code>%</code>，是<code>vim</code>当中一个只读寄存器的名字，总保存着当前编辑文件的文件路径。 所以执行这个命令，就相当于从vim外部修改了当前编辑的文件。</p><h3 id="返回上次的位置"><a href="#返回上次的位置" class="headerlink" title="返回上次的位置"></a>返回上次的位置</h3><p><code>ctrl + o</code>: 返回上次光标位置；<br><code>ctrl + i</code>: 前进到光标的位置；</p><h3 id="排版对齐"><a href="#排版对齐" class="headerlink" title="排版对齐"></a>排版对齐</h3><p><code>ctrl +v</code>：选择需要对齐的行，之后按<code>=</code>即可对齐。</p><h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><p><code>:%s/aaaa/bbbb/g</code>:替换每一行中所有<code>aaaa</code>为<code>bbbb</code>，<a href="http://www.cnblogs.com/tovep/articles/2715803.html。" target="_blank" rel="noopener">http://www.cnblogs.com/tovep/articles/2715803.html。</a></p><h3 id="快速选中单词"><a href="#快速选中单词" class="headerlink" title="快速选中单词"></a>快速选中单词</h3><p>光标移动到要选中的单词开头，按<code>v</code>按<code>e</code>。</p><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><p><code>u</code>: 撤销；<br><code>ctrl + r</code>: 取消撤销；</p><a id="more"></a><h3 id="16进制显示"><a href="#16进制显示" class="headerlink" title="16进制显示"></a>16进制显示</h3><p><code>:%!xxd</code></p><h3 id="16进制修改"><a href="#16进制修改" class="headerlink" title="16进制修改"></a>16进制修改</h3><p><code>:%!xxd -r</code>可以反向写入，以下内容为测试验证过程：<br>使用下面的<code>dd</code>语句，可以将<code>/dev/zero</code>产生的八进制<code>\000</code>(0x0)转换为八进制<code>\377</code>(0xff)并写入<code>temp</code>文件中，如下：<br><code>dd if=/dev/zero bs=1 count=4 | tr &quot;\000&quot; &quot;\377&quot; &gt; temp</code></p><p>vi查看<code>temp</code>文件得到:<code>ÿÿÿÿ</code>，总共4个字节，<code>[noeol]</code>不包含<code>EOL</code>。<br>使用16进制<code>%!xxd</code>查看得到如下，可以看到最后多了一个字节<code>0a</code>表示<code>EOL</code>。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000000: ffff ffff 0a                             .....</span><br></pre></td></tr></table></figure><p></p><p>比如说我要将这里修改成<code>a0a1 a2a3</code>，可以直接用vi编辑。然后<code>:%!xxd -r</code>反向写入再<code>:x</code>保存退出。但是查看大小变为5个字节了，莫名其妙多出1个字节，如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-rw-r-- 1 victor victor    5 11月  2 09:52 temp</span><br></pre></td></tr></table></figure><p></p><p>具体原因详见：<a href="https://superuser.com/questions/745111/why-is-vim-adding-a-newline-is-this-a-convention" target="_blank" rel="noopener">https://superuser.com/questions/745111/why-is-vim-adding-a-newline-is-this-a-convention</a><br>要解决这个问题，就是在反向写入后保存前执行<code>:set binary</code> 和 <code>:set noeol</code>。</p><h3 id="高亮所匹配的单词"><a href="#高亮所匹配的单词" class="headerlink" title="高亮所匹配的单词"></a>高亮所匹配的单词</h3><p><code>:set hlsearch</code></p><h3 id="光标所处单词查找"><a href="#光标所处单词查找" class="headerlink" title="光标所处单词查找"></a>光标所处单词查找</h3><p><code>g + d</code>: 快速选中光标所在单词，按<code>n</code>可查找。</p><h3 id="快速跳到下个单词"><a href="#快速跳到下个单词" class="headerlink" title="快速跳到下个单词"></a>快速跳到下个单词</h3><p><code>w</code></p><h3 id="删除光标所在单词"><a href="#删除光标所在单词" class="headerlink" title="删除光标所在单词"></a>删除光标所在单词</h3><p><code>c + w</code></p><h3 id="快速跳转到文件尾"><a href="#快速跳转到文件尾" class="headerlink" title="快速跳转到文件尾"></a>快速跳转到文件尾</h3><p><code>G</code>: 大写的<code>G</code>，通常情况下，在kernel中，很多初始化动作都是在文件尾做的，该命令可以快速跳转到文件尾。</p><h3 id="匹配括号"><a href="#匹配括号" class="headerlink" title="匹配括号"></a>匹配括号</h3><p><code>%</code>: 比如一个很长的<code>if</code>语句，里面有多个括号，可以使用<code>%</code>找到与之相匹配的括号，当然也包括<code>#ifdef</code>和<code>#endif</code>。</p><h3 id="列替换一个字符"><a href="#列替换一个字符" class="headerlink" title="列替换一个字符"></a>列替换一个字符</h3><p><code>ctrl + v</code>: 选中需要替换的列，按<code>r</code> + 输入你想要替换的一个字符即可。</p><h3 id="列替换多个字符"><a href="#列替换多个字符" class="headerlink" title="列替换多个字符"></a>列替换多个字符</h3><p><code>ctrl + v</code>: 选中需要替换的列，按大写<code>I</code>，插入你想要的多个字符，按<code>q</code>回到正常模式，按回车即可。</p><h3 id="删除包含特定字符的行"><a href="#删除包含特定字符的行" class="headerlink" title="删除包含特定字符的行"></a>删除包含特定字符的行</h3><p><code>:g/pattern/d</code></p><h3 id="删除不包含指定字符的行"><a href="#删除不包含指定字符的行" class="headerlink" title="删除不包含指定字符的行"></a>删除不包含指定字符的行</h3><p><code>:v/pattern/d</code>或<code>:g!/pattern/d</code></p><h3 id="定义跳转"><a href="#定义跳转" class="headerlink" title="定义跳转"></a>定义跳转</h3><p><code>ctrl + ]</code>来跳转到变量或者函数定义的地方。<code>ctrl + t</code>返回到跳转前的位置;</p><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><p>在vim的insert模式下，可以使用<code>ctrl + n</code>来实现自动补全，使用上下键进行切换;</p><h3 id="设置高亮"><a href="#设置高亮" class="headerlink" title="设置高亮"></a>设置高亮</h3><p>vi配置<code>:set hlsearch</code>高亮所有匹配的字符串;</p><h3 id="立即生效"><a href="#立即生效" class="headerlink" title="立即生效"></a>立即生效</h3><p>修改了配置文件<code>.vimrc</code>并保存后，如果希望不重启vim而让配置立即生效，可以在打开的vim中执行<code>:source ~HOME/.vimrc</code>;</p><h3 id="切换窗口"><a href="#切换窗口" class="headerlink" title="切换窗口"></a>切换窗口</h3><p>在<code>taglist</code>中，按<code>ctrl + ww</code>（2次w），可以切换到函数列表区，移动到函数名称行后按ENTER即可查看函数代码。再次按<code>ctrl + ww</code>可回到编辑区；</p><h3 id="选择单词"><a href="#选择单词" class="headerlink" title="选择单词"></a>选择单词</h3><p>vi选中单词并查找：<code>g + d</code>高亮显示光标所属单词，<code>n</code>查找;</p><h3 id="删除单词"><a href="#删除单词" class="headerlink" title="删除单词"></a>删除单词</h3><p>vi 快速删除当前光标所在的单词：<code>c + w</code>;</p><h3 id="复制单词"><a href="#复制单词" class="headerlink" title="复制单词"></a>复制单词</h3><p><code>yaw</code>可以快速复制当前的单词；</p><h3 id="快速跳转下一个单词"><a href="#快速跳转下一个单词" class="headerlink" title="快速跳转下一个单词"></a>快速跳转下一个单词</h3><p>vi 快速跳转到下个单词<code>w</code>;</p><h3 id="重新加载原文件"><a href="#重新加载原文件" class="headerlink" title="重新加载原文件"></a>重新加载原文件</h3><p><code>:e!</code>命令可以重新装载原来的文件；</p><h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><p><code>:help {主题}</code>命令可以获得特定主题的帮助；</p><h3 id="代码块匹配"><a href="#代码块匹配" class="headerlink" title="代码块匹配"></a>代码块匹配</h3><p>命令行模式下：<code>%</code>命令的作用是跳到匹配处，比如括号之间，C的宏指令#if #else #endif之间；</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> ubuntu工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu工作环境搭建</title>
      <link href="/cae6ff88/"/>
      <url>/cae6ff88/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>以下内容记录着从安装VirtualBox到安装Ubuntu系统以及常用的工具和配置等流程。本文将持续更新。<a id="more"></a></p><hr><h1 id="安装VirtualBox"><a href="#安装VirtualBox" class="headerlink" title="安装VirtualBox"></a>安装VirtualBox</h1><p>VirtualBox一路安装到底，后面具体的细节具体分析。</p><hr><h1 id="安装Ubuntu16-04-5"><a href="#安装Ubuntu16-04-5" class="headerlink" title="安装Ubuntu16.04.5"></a>安装Ubuntu16.04.5</h1><p>Ubuntu各个版本的镜像可通过Ubuntu各个版本的镜像下载地址这个网站下载到。以16.04的版本为例：<a href="http://mirrors.melbourne.co.uk/ubuntu-releases/" target="_blank" rel="noopener">http://mirrors.melbourne.co.uk/ubuntu-releases/</a><br><img src="https://pic.superbed.cn/item/5c84d2d53a213b04179b60a0" alt="图1"></p><p>这里面包含desktop（桌面）版本、server（服务器）版本，每个版本中包含amd64（64位系统）和i386（32位系统）。</p><p>注：<br><code>i386</code>就是32位的Ubuntu，<code>amd64</code>就是64位的Ubuntu。<br>不要以为<code>i386</code>只能用于intel的cpu，amd64只能用于<code>amd</code>的cpu，别被字面意思所迷惑。</p><hr><h1 id="创建root账号密码"><a href="#创建root账号密码" class="headerlink" title="创建root账号密码"></a>创建root账号密码</h1><p>使用<code>sudo passwd</code>命令，如下<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">victor@ubuntu:~$ sudo passwd </span><br><span class="line">Enter new UNIX password: </span><br><span class="line">Retype new UNIX password: </span><br><span class="line">passwd: password updated successfully</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="VirtualBox安装增强功能"><a href="#VirtualBox安装增强功能" class="headerlink" title="VirtualBox安装增强功能"></a>VirtualBox安装增强功能</h1><p>为了实现<code>全屏功能</code>、<code>共享粘贴</code>、<code>共享文件</code>等功能，需要安装<code>增强功能</code>。<br><img src="https://pic.superbed.cn/item/5c84d2d53a213b04179b60a2" alt="图2"></p><p>理论上，安装完毕之后重启VirtualBox之后这些功能就有了。但是我手贱，启动之后又去点击了一次，好像就变成卸载了，全屏功能神奇的消失了。后面当我想要操作一遍，给我的提示为无法挂载，但是在侧边栏可以看到光驱的，只是点不开，尝试手动挂载也不行。<br>尝试手动挂在提示如下错误：</p><blockquote><p>mount unknown type iso9600</p></blockquote><p>后面根据<a href="https://www.linuxquestions.org/questions/linux-software-2/can%27t-mount-cd-unknown-filesystem-type-%27iso9660%27-766608/" target="_blank" rel="noopener">Can’t mount CD: “unknown filesystem type ‘iso9660’”</a>的说明，发现没有加载对应iso文件系统。以下为解决办法：</p><ul><li><p>查看驱动是否加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-linux:~$ cat /boot/config-4.15.0-29-generic | grep 9660</span><br><span class="line">CONFIG_ISO9660_FS=m</span><br></pre></td></tr></table></figure></li><li><p>查找驱动路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-linux:~$ find /lib/modules/ -iname &quot;isofs.ko&quot;</span><br><span class="line">/lib/modules/4.15.0-29-generic/kernel/fs/isofs/isofs.ko</span><br></pre></td></tr></table></figure></li><li><p>加载驱动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-linux:~$ sudo insmod /lib/modules/4.15.0-29-generic/kernel/fs/isofs/isofs.ko</span><br></pre></td></tr></table></figure></li><li><p>再次手动挂载后就可以成功了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-linux:~$ mkdir ~/temp</span><br><span class="line">victor@victor-linux:~$ sudo mount -t auto /dev/dvd ~/temp/</span><br></pre></td></tr></table></figure></li><li><p>进入<code>~/temp/</code>目录安装工具执行<code>sudo ./VBoxLinuxAdditions.run</code>安装就可以了。</p></li></ul><hr><h1 id="VirtualBox安装增强功能设置共享文件夹"><a href="#VirtualBox安装增强功能设置共享文件夹" class="headerlink" title="VirtualBox安装增强功能设置共享文件夹"></a>VirtualBox安装增强功能设置共享文件夹</h1><ul><li><p>VirtuabBox软件配置共享文件夹<br><img src="https://pic.superbed.cn/item/5c84d2d53a213b04179b60a7" alt="图3"></p></li><li><p>ubuntu挂载共享目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-linux:~$ mkdir vb_share</span><br><span class="line">victor@victor-linux:~$ sudo mount -t vboxsf vb_share ~/vb_share</span><br><span class="line">victor@victor-linux:~/vb_share$ ll</span><br><span class="line">总用量 10</span><br><span class="line">drwxrwxrwx  1 root   root   4096 10月 21 16:02 ./</span><br><span class="line">drwxr-xr-x 21 victor victor 4096 10月 21 16:05 ../</span><br><span class="line">-rwxrwxrwx  1 root   root     23 10月 21 15:57 aaa.txt*</span><br><span class="line">-rwxrwxrwx  1 root   root    804 10月 21 16:02 .bash_history*</span><br><span class="line">drwxrwxrwx  1 root   root      0 10月 21 16:02 .cache/</span><br><span class="line">drwxrwxrwx  1 root   root      0 10月 21 16:02 .compiz/</span><br><span class="line">drwxrwxrwx  1 root   root      0 10月 21 15:56 .config/</span><br><span class="line">-rwxrwxrwx  1 root   root      0 10月 21 15:51 .sudo_as_admin_successful*</span><br><span class="line">-rwxrwxrwx  1 root   root      5 10月 21 16:02 .vboxclient-seamless.pid*</span><br></pre></td></tr></table></figure></li><li><p>ubuntu设置开机自动挂载共享目录<br><code>sudo vi /etc/rc.local</code>修改<code>/etc/rc.local</code>文件，新增如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;start mount vbox share floder&quot;</span><br><span class="line">sudo mount -t vboxsf vb_share /home/victor/vb_share</span><br></pre></td></tr></table></figure></li></ul><p>设置之后，Windows的共享目录为<code>D:\virtualbox_victor_ubuntu\vb_share</code>，ubuntu下的共享目录为<code>/home/victor/vb_share/</code>。<br>自动启动相关的可以参照：<a href="https://blog.csdn.net/qq_14989227/article/details/79227283" target="_blank" rel="noopener">https://blog.csdn.net/qq_14989227/article/details/79227283</a></p><hr><h1 id="VirtualBox安装USB控制器驱动"><a href="#VirtualBox安装USB控制器驱动" class="headerlink" title="VirtualBox安装USB控制器驱动"></a>VirtualBox安装USB控制器驱动</h1><p>参考自：<a href="https://blog.csdn.net/wf19930209/article/details/73195055" target="_blank" rel="noopener">https://blog.csdn.net/wf19930209/article/details/73195055</a></p><ul><li><p>关闭虚拟机，去 <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">https://www.virtualbox.org/wiki/Downloads</a> 的网站下载<code>Oracle VM VirtualBox Extension Pack</code>，注意，一定要下载与自己VirtualBox版本匹配的扩展包，否则会出现如下的错误：<br><img src="https://pic.superbed.cn/item/5c84d2d53a213b04179b60ae" alt="图6"></p></li><li><p>开启虚拟机，设置分组<code>sudo gedit /etc/group</code>中添加<code>vboxusers:x:123:victor</code>内容，然后关闭虚拟机。</p></li><li>VirtualBox中设置如下：<br><img src="https://pic.superbed.cn/item/5c84d37e3a213b04179b69b8" alt="图7"></li><li>重启ubuntu后，插上U盘，就可以被虚拟机识别到了。<br><img src="https://pic.superbed.cn/item/5c84d37e3a213b04179b69bc" alt="图8"></li></ul><p>以上基本上都是关于VirtualBox的配置了，接下来主要说明Ubuntu工作环境搭建。</p><hr><h1 id="更新ubuntu源"><a href="#更新ubuntu源" class="headerlink" title="更新ubuntu源"></a>更新ubuntu源</h1><p>ubuntu如果要安装程序，必须先更新国内的源，否则使用<code>sudo apt-get install</code>安装某些程序的时候，会提示包找不到。<br>最新的源可以参照：<a href="http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8</a></p><h2 id="备份源"><a href="#备份源" class="headerlink" title="备份源"></a>备份源</h2><p><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></p><h2 id="添加清华源和阿里源到source-list中"><a href="#添加清华源和阿里源到source-list中" class="headerlink" title="添加清华源和阿里源到source.list中"></a>添加清华源和阿里源到source.list中</h2><p><code>sudo gedit /etc/apt/sources.list</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br></pre></td></tr></table></figure><p>其中的<code>xenial</code>代表当前使用的是ubuntu 16.04的版本。具体的对应关系如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">16.04       xenial</span><br><span class="line">15.10       willy</span><br><span class="line">14.04       trusty</span><br><span class="line">12.04       precise</span><br></pre></td></tr></table></figure><p></p><h2 id="刷新源列表"><a href="#刷新源列表" class="headerlink" title="刷新源列表"></a>刷新源列表</h2><p><code>sudo apt-get updata</code></p><hr><h1 id="ubuntu设置终端参数"><a href="#ubuntu设置终端参数" class="headerlink" title="ubuntu设置终端参数"></a>ubuntu设置终端参数</h1><ul><li>使用<code>Ctl + Alt + t</code>按键打开终端；</li><li><code>编辑(E)</code> –&gt; <code>配置文件首选项(P)</code>设置回滚限制到最大，如下：<br><img src="https://pic.superbed.cn/item/5c84d37e3a213b04179b69c6" alt="图11"></li><li>终端的快捷键设置如下：<br><img src="https://pic.superbed.cn/item/5c84d3e83a213b04179b6f5b" alt="图12"></li></ul><hr><h1 id="安装openssh"><a href="#安装openssh" class="headerlink" title="安装openssh"></a>安装openssh</h1><p>参照自：<a href="https://blog.csdn.net/changhenshui1990/article/details/72896548" target="_blank" rel="noopener">https://blog.csdn.net/changhenshui1990/article/details/72896548</a><br><a href="https://blog.csdn.net/yucicheung/article/details/79427578" target="_blank" rel="noopener">https://blog.csdn.net/yucicheung/article/details/79427578</a><br>执行<code>sudo apt-get install openssh-server</code> 和 <code>sudo /etc/init.d/ssh start</code>命令。<br><code>openssh</code>安装完成之后，还无法使用<code>xshell</code> ssh登录，因为虚拟机中的网卡只有一个，如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-linux:~$ ifconfig</span><br><span class="line">enp0s3    Link encap:以太网  硬件地址 08:00:27:87:50:c4  </span><br><span class="line">          inet 地址:10.0.2.15  广播:10.0.2.255  掩码:255.255.255.0</span><br><span class="line">          inet6 地址: fe80::2b6:ad4e:c1b6:896/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  跃点数:1</span><br><span class="line">          接收数据包:9 错误:0 丢弃:0 过载:0 帧数:0</span><br><span class="line">          发送数据包:211 错误:0 丢弃:0 过载:0 载波:0</span><br><span class="line">          碰撞:0 发送队列长度:1000 </span><br><span class="line">          接收字节:1183 (1.1 KB)  发送字节:20658 (20.6 KB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:本地环回  </span><br><span class="line">          inet 地址:127.0.0.1  掩码:255.0.0.0</span><br><span class="line">          inet6 地址: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  跃点数:1</span><br><span class="line">          接收数据包:56 错误:0 丢弃:0 过载:0 帧数:0</span><br><span class="line">          发送数据包:56 错误:0 丢弃:0 过载:0 载波:0</span><br><span class="line">          碰撞:0 发送队列长度:1000 </span><br><span class="line">          接收字节:6446 (6.4 KB)  发送字节:6446 (6.4 KB)</span><br></pre></td></tr></table></figure><p></p><p>因此，必须给虚拟机新增一块网卡。因此在VirtualBox中进行如下设置：<br><img src="https://pic.superbed.cn/item/5c84d37e3a213b04179b69bf" alt="图9"></p><p>做完之后，ubuntu中执行<code>ifconfig</code>就可以看到新增一个<code>enp0s8</code>的网卡，ip地址为<code>192.168.56.101</code>，<code>xshell</code>就可以通过这个ip地址远程登录ubuntu了。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-linux:~$ ifconfig</span><br><span class="line">enp0s3    Link encap:以太网  硬件地址 08:00:27:87:50:c4  </span><br><span class="line">          inet 地址:10.0.2.15  广播:10.0.2.255  掩码:255.255.255.0</span><br><span class="line">          inet6 地址: fe80::2b6:ad4e:c1b6:896/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  跃点数:1</span><br><span class="line">          接收数据包:9 错误:0 丢弃:0 过载:0 帧数:0</span><br><span class="line">          发送数据包:211 错误:0 丢弃:0 过载:0 载波:0</span><br><span class="line">          碰撞:0 发送队列长度:1000 </span><br><span class="line">          接收字节:1183 (1.1 KB)  发送字节:20658 (20.6 KB)</span><br><span class="line"></span><br><span class="line">enp0s8    Link encap:以太网  硬件地址 08:00:27:d1:3a:f3  </span><br><span class="line">          inet 地址:192.168.56.101  广播:192.168.56.255  掩码:255.255.255.0</span><br><span class="line">          inet6 地址: fe80::fcfe:5d73:eae3:3976/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  跃点数:1</span><br><span class="line">          接收数据包:582 错误:0 丢弃:0 过载:0 帧数:0</span><br><span class="line">          发送数据包:618 错误:0 丢弃:0 过载:0 载波:0</span><br><span class="line">          碰撞:0 发送队列长度:1000 </span><br><span class="line">          接收字节:52502 (52.5 KB)  发送字节:128099 (128.0 KB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:本地环回  </span><br><span class="line">          inet 地址:127.0.0.1  掩码:255.0.0.0</span><br><span class="line">          inet6 地址: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  跃点数:1</span><br><span class="line">          接收数据包:56 错误:0 丢弃:0 过载:0 帧数:0</span><br><span class="line">          发送数据包:56 错误:0 丢弃:0 过载:0 载波:0</span><br><span class="line">          碰撞:0 发送队列长度:1000 </span><br><span class="line">          接收字节:6446 (6.4 KB)  发送字节:6446 (6.4 KB)</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h1><p>由于安装完默认的Ubuntu-16.04这个版本是使用的<code>vi-tiny</code>，这个编辑器的删除键和方向键都不管用，只能使用在命令行模式下用<code>x</code>，<code>hjkl</code>键，于是重新选择安装<code>vim</code>。<br>先执行<code>sudo apt-get remove vim-common</code>命令卸载vim，再执行<code>sudo apt-get install vim</code>命令安装vim。</p><hr><h1 id="安装配置git"><a href="#安装配置git" class="headerlink" title="安装配置git"></a>安装配置git</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br><span class="line">git config --global user.name &quot;VictorHuang&quot;</span><br><span class="line">git config --global user.email &quot;example@email.com&quot;</span><br><span class="line">git config --global core.editor &quot;vim&quot;</span><br><span class="line">git config --global core.autocrlf input</span><br><span class="line">git config --global core.safecrlf true</span><br><span class="line">git config --global color.ui true</span><br></pre></td></tr></table></figure><p>查看git配置<code>git config --list</code><br><a href="http://onetracy.com/2016/12/25/tigrc/" target="_blank" rel="noopener">http://onetracy.com/2016/12/25/tigrc/</a></p><hr><h1 id="安装tig"><a href="#安装tig" class="headerlink" title="安装tig"></a>安装tig</h1><p><code>tig</code>是<code>git</code>的一个插件，相对于<code>git log</code>来说显示日志记录比较漂亮、直观和方便<code>tig</code>。<br>官方网站为：<a href="https://jonas.github.io/tig/" target="_blank" rel="noopener">https://jonas.github.io/tig/</a></p><p>在<code>git</code>仓库下，执行<code>tig</code>命令，就可以查看提交履历信息，随便从<a href="https://git.kernel.org/" target="_blank" rel="noopener">https://git.kernel.org/</a> clone一下<code>mmc-utils</code>的仓库做测试，如下：<br><img src="https://pic.superbed.cn/item/5c84d37e3a213b04179b69c4" alt="图10"></p><hr><h1 id="配置vimrc"><a href="#配置vimrc" class="headerlink" title="配置vimrc"></a>配置vimrc</h1><p><a href="https://wenzhiquan.github.io/2018/06/30/2018-06-30-vim-introduction/#more" target="_blank" rel="noopener">Vim 简明教程</a>，一篇干货满满的文章。</p><hr><h1 id="配置bashrc"><a href="#配置bashrc" class="headerlink" title="配置bashrc"></a>配置bashrc</h1><hr><h1 id="安装常用工具"><a href="#安装常用工具" class="headerlink" title="安装常用工具"></a>安装常用工具</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$sudo apt-get install git-core gnupg flex bison gperf build-essential doxygen \</span><br><span class="line">  zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev dpkg-dev \</span><br><span class="line">  libx11-dev libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-glx:i386 \</span><br><span class="line">  libgl1-mesa-dev tofrodos dos2unix gitk meld \</span><br><span class="line">  python-markdown python-m2crypto python-lxml libxml2-utils xsltproc zlib1g-dev zlib1g-dev:i386 \</span><br><span class="line">  u-boot-tools openssh-client libswitch-perl \</span><br><span class="line">  cksfv uuid-dev:i386 liblzo2-dev:i386 lzop ccache</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> ubuntu工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华硕笔记本FL5900U装Win10专业版记录</title>
      <link href="/2f0f5041/"/>
      <url>/2f0f5041/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>以下内容纯属记录备忘，没有啥技术含量，可直接跳过。<a id="more"></a></p><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>原先电脑买过来的时候默认装机Win10 家庭版，用了一段时间后，感觉不太习惯，想装双系统，一个跑Win7，一个跑Win10。尝试装Win7旗舰版的系统，发现装完之后，USB无法使用，后面网上找了一番知道这电脑没有Win7系统USB驱动。<br>没办法，将就用吧，不过用着用着感觉系统越来越慢，有时候CPU占用率非常的高。每次开机都要自动更新，关都关不掉。但是每次让它更新总是更新失败，总之各种问题。后面实在忍无可忍，决定安装Win10专业版系统。</p><hr><h1 id="尝试使用硬盘安装—失败"><a href="#尝试使用硬盘安装—失败" class="headerlink" title="尝试使用硬盘安装—失败"></a>尝试使用硬盘安装—失败</h1><p>首先去<a href="http://www.xitongzhijia.net/win10/" target="_blank" rel="noopener">系统之家</a>下载装机版的iso和ghost软件。或者是<a href="http://www.xitongcheng.com/win10/" target="_blank" rel="noopener">系统城</a><br>但是，使用这种办法，启动按<code>Esc</code>选择启动项的时候会报告启动错误。如下：<br><img src="https://pic.superbed.cn/item/5c84d6b93a213b04179b962d" alt="图1"><br><img src="https://pic.superbed.cn/item/5c84d6b93a213b04179b962f" alt="图2"><br><img src="https://pic.superbed.cn/item/5c84d6b93a213b04179b9637" alt="图3"></p><p>总之，使用了好几个镜像都是卡在启动失败上，因此，这种方式不行。</p><hr><h1 id="U盘启动盘制作"><a href="#U盘启动盘制作" class="headerlink" title="U盘启动盘制作"></a>U盘启动盘制作</h1><ul><li>使用<a href="http://www.dabaicaipe.cn/" target="_blank" rel="noopener">大白菜U盘启动盘制作工具</a>，下载<code>UEFI</code>版本，按照<a href="http://www.dabaicaipe.cn/UEFIbqdzz.html" target="_blank" rel="noopener">UEFI教程</a>进行启动盘制作。</li><li>制作好之后，从<code>itellyour</code>下载Win10专业版iso镜像，将ISO镜像包复制到U盘的ISO文件夹，进入WINPE时会自动弹出一键安装程序。</li></ul><p>但是在拷贝的时候提示文件太大。因为U盘使用的是<code>FAT32</code>系统，最大支持单个文件4G大小，因此要将其改为<code>NTFS</code>格式。解决方法参照：<br><a href="http://www.dabaicai.org/help/upcs/2419.html" target="_blank" rel="noopener">使用u盘拷贝文件时提示对于目标文件系统文件过大怎么办</a>.</p><hr><h1 id="BIOS设置"><a href="#BIOS设置" class="headerlink" title="BIOS设置"></a>BIOS设置</h1><p>开机按<code>F2</code>进入BIOS，得到<code>BIOS</code>的界面如下：<br><img src="https://pic.superbed.cn/item/5c84d6b93a213b04179b963c" alt="图4"></p><p>需要在<code>BIOS</code>中做如下设置：</p><ul><li>Secure Boot 设置为Disabled【禁用启动安全检查，这个最重要】</li><li>OS Optimized设置为Others或Disabled【系统类型设置】</li><li>CSM(Compatibility Support Module) Support设置为Yes或Enabled</li><li>UEFI/Legacy Boot选项选择成Both</li><li>UEFI/Legacy Boot Priority选择成UEFI First</li></ul><hr><h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><p>在<code>BIOS</code>中选择U盘启动，但是启动后的画面如下：<br><img src="https://pic.superbed.cn/item/5c84d6ba3a213b04179b9641" alt="图5"></p><p>百度搜索之后，参照<a href="https://zhidao.baidu.com/question/304572249759156644.html?qbl=relate_question_0&amp;word=%C3%BF%B4%CE%BF%AA%BB%FA%BD%F8%C8%EBgrbu4dos" target="_blank" rel="noopener">每次开机进入grub4dos,无法启动windows</a><br>输入下面3条指令，如图：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grub&gt; find --<span class="built_in">set</span>-root /bootmgr</span><br><span class="line">grub&gt; chainloader /bootmgr</span><br><span class="line">grub&gt; boot</span><br></pre></td></tr></table></figure><p></p><p><img src="https://pic.superbed.cn/item/5c84d7063a213b04179b9ce0" alt="图6"></p><p>重启后就可以进入PE系统了，然后按照大白菜官网的指导一步步安装系统即可。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 备忘记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备忘记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iozone的使用</title>
      <link href="/b871283/"/>
      <url>/b871283/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>本文详细讲述使用<code>iozone</code>进行io读写的测试，包括<code>iozone</code>的交叉编译以及参数设置和结果的解析。<a id="more"></a></p><hr><h1 id="iozone简介"><a href="#iozone简介" class="headerlink" title="iozone简介"></a>iozone简介</h1><p><code>iozone</code>是一个文件系统的benchmark工具，可以测试不同的操作系统中文件系统的读写性能。 可以测试 Read, write, re-read,re-write, read backwards, read strided, fread, fwrite, random read, pread, mmap, aio_read, aio_write 等等不同的模式下的硬盘的性能。<br>也就是说，这个工具专门用来测试文件系统的读写性能。</p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>官方网站：<a href="http://www.iozone.org/" target="_blank" rel="noopener">http://www.iozone.org/</a></li><li>官方文档：<a href="http://www.iozone.org/docs/IOzone_msword_98.pdf" target="_blank" rel="noopener">http://www.iozone.org/docs/IOzone_msword_98.pdf</a></li><li>参考资料：<br><a href="https://blog.csdn.net/a624731186/article/details/41307387" target="_blank" rel="noopener">https://blog.csdn.net/a624731186/article/details/41307387</a><br><a href="https://www.thegeekstuff.com/2011/05/iozone-examples" target="_blank" rel="noopener">https://www.thegeekstuff.com/2011/05/iozone-examples</a></li></ul><hr><h1 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h1><p>因为我是使用ARCH arm64的，在提供的官方源码中没有arm64的编译选项，因此需要进行交叉编译。指定<code>CC</code>和<code>GCC</code>参数为自己的交叉工具链<code>gcc</code>即可，<br>编译命令如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~/victor/xxx_project/iozone3_482/src/current$ make CC=~/victor/xxx_project/prebuilt/toolchains/aarch64-imx6-linux/bin/aarch64-poky-linux-gcc \</span><br><span class="line">GCC=~/victor/xxx_project/prebuilt/toolchains/aarch64-imx6-linux/bin/aarch64-poky-linux-gcc linux-arm</span><br></pre></td></tr></table></figure><p></p><p>编译过程如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~/victor/xxx_project/iozone3_482/src/current$ make CC=~/victor/xxx_project/prebuilt/toolchains/aarch64-imx6-linux/bin/aarch64-poky-linux-gcc GCC=~/victor/xxx_project/prebuilt/toolchains/aarch64-imx6-linux/bin/aarch64-poky-linux-gcc linux-arm</span><br><span class="line"></span><br><span class="line">Building iozone <span class="keyword">for</span> Linux-arm</span><br><span class="line"></span><br><span class="line">~/victor/xxx_project/prebuilt/toolchains/aarch64-imx6-linux/bin/aarch64-poky-linux-gcc -c -O3 -Dunix -DHAVE_ANSIC_C -DASYNC_IO -DHAVE_PREAD \</span><br><span class="line">-DNAME='"linux-arm"' -DLINUX_ARM -DSHARED_MEM \</span><br><span class="line">-Dlinux -D_LARGEFILE64_SOURCE  iozone.c \</span><br><span class="line">-o iozone_linux-arm.o</span><br><span class="line">~/victor/xxx_project/prebuilt/toolchains/aarch64-imx6-linux/bin/aarch64-poky-linux-gcc -c -O3 -Dunix -DHAVE_ANSIC_C -DASYNC_IO -D_LARGEFILE64_SOURCE \</span><br><span class="line">-DSHARED_MEM -Dlinux  libbif.c -o libbif.o</span><br><span class="line">~/victor/xxx_project/prebuilt/toolchains/aarch64-imx6-linux/bin/aarch64-poky-linux-gcc -c -O3 -Dunix -Dlinux -DHAVE_ANSIC_C -DASYNC_IO \</span><br><span class="line">-D_LARGEFILE64_SOURCE  libasync.c  -o libasync.o</span><br><span class="line"></span><br><span class="line">Building fileop <span class="keyword">for</span> Linux-arm</span><br><span class="line"></span><br><span class="line">~/victor/xxx_project/prebuilt/toolchains/aarch64-imx6-linux/bin/aarch64-poky-linux-gcc -Wall -c -O3  fileop.c -o fileop_linux-arm.o</span><br><span class="line"></span><br><span class="line">Building the pit_server</span><br><span class="line"></span><br><span class="line">~/victor/xxx_project/prebuilt/toolchains/aarch64-imx6-linux/bin/aarch64-poky-linux-gcc -c   pit_server.c  -o pit_server.o </span><br><span class="line">~/victor/xxx_project/prebuilt/toolchains/aarch64-imx6-linux/bin/aarch64-poky-linux-gcc -O3  iozone_linux-arm.o libbif.o libasync.o \</span><br><span class="line">-lrt -lpthread -o iozone</span><br><span class="line">~/victor/xxx_project/prebuilt/toolchains/aarch64-imx6-linux/bin/aarch64-poky-linux-gcc -O3 -Dlinux fileop_linux-arm.o -o fileop</span><br><span class="line">~/victor/xxx_project/prebuilt/toolchains/aarch64-imx6-linux/bin/aarch64-poky-linux-gcc -O3 -Dlinux pit_server.o -o pit_server</span><br><span class="line"></span><br><span class="line">###<span class="meta"># make completed successfully (6 seconds) ####</span></span><br></pre></td></tr></table></figure><p></p><p>查看文件类型可以看到是arch arm64的格式了，可以将交叉编译出来的应用程序<code>iozone</code>拷贝到板子上运行。<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~/victor/xxx_project/iozone3_482/src/current$ file iozone</span><br><span class="line">iozone: ELF 64-bit LSB  executable, ARM aarch64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 3.14.0, BuildID[sha1]=e3c5bd74f79e76a96d80bc417caf52551a3e8136, not stripped</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="iozone的使用"><a href="#iozone的使用" class="headerlink" title="iozone的使用"></a>iozone的使用</h1><p>测试命令如下：<code>./iozone -azecI -+n -L64 -S32 -r2m -s128m -i0 -i2 -+b 400000,30000 -w -f testfile -Rb /var/test/emmc_test.xls</code><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># ./iozone -azecI -+n -L64 -S32 -r2m -s128m -i0 -i2 -+b <span class="number">400000</span>,<span class="number">30000</span> -w -f testfile -Rb /var/test/emmc_test.xls</span><br><span class="line">        Iozone: Performance Test of File I/O</span><br><span class="line">                Version $Revision: <span class="number">3.482</span> $</span><br><span class="line">                Compiled <span class="keyword">for</span> <span class="number">64</span> bit mode.</span><br><span class="line">                Build: linux-arm </span><br><span class="line"></span><br><span class="line">        Contributors:William Norcott, Don Capps, Isom Crawford, Kirby Collins</span><br><span class="line">                     Al Slater, Scott Rhine, Mike Wisner, Ken Goss</span><br><span class="line">                     Steve Landherr, Brad Smith, Mark Kelly, Dr. Alain CYR,</span><br><span class="line">                     Randy Dunlap, Mark Montague, Dan Million, Gavin Brebner,</span><br><span class="line">                     Jean-Marc Zucconi, Jeff Blomberg, Benny Halevy, Dave Boone,</span><br><span class="line">              [   <span class="number">62.083472</span>] random: crng init done</span><br><span class="line">       Erik Habbinga, Kris Strecker, Walter Wong, Joshua Root,</span><br><span class="line">                     Fabrice Bacchella, Zhenghua Xue, Qin Li, Darren Sawyer,</span><br><span class="line">                     Vangel Bojaxhi, Ben England, Vikentsi Lapa,</span><br><span class="line">                     Alexey Skidanov, Sudhir Kumar.</span><br><span class="line"></span><br><span class="line">        Run began: Thu Jan  <span class="number">1</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">02</span> <span class="number">1970</span></span><br><span class="line"></span><br><span class="line">        Auto Mode</span><br><span class="line">        Cross over of record size disabled.</span><br><span class="line">        Include fsync in write timing</span><br><span class="line">        Include close in write timing</span><br><span class="line">        O_DIRECT feature enabled</span><br><span class="line">        No retest option selected</span><br><span class="line">        Record Size <span class="number">2048</span> kB</span><br><span class="line">        File size <span class="built_in">set</span> to <span class="number">131072</span> kB</span><br><span class="line">        Setting no_unlink</span><br><span class="line">        Command line used: ./iozone -azecI -+n -L64 -S32 -r2m -s128m -i0 -i2 -+b <span class="number">400000</span>,<span class="number">30000</span> -w -f testfile</span><br><span class="line">        Output is in kBytes/sec</span><br><span class="line">        Time Resolution = <span class="number">0.000001</span> seconds.</span><br><span class="line">        Processor cache size <span class="built_in">set</span> to <span class="number">32</span> kBytes.</span><br><span class="line">        Processor cache line size <span class="built_in">set</span> to <span class="number">64</span> bytes.</span><br><span class="line">        File stride size <span class="built_in">set</span> to <span class="number">17</span> * record size.</span><br><span class="line">        Burst size <span class="built_in">set</span> to <span class="number">400000</span> Kbytes.</span><br><span class="line">        Burst sleep duration <span class="built_in">set</span> to <span class="number">30000</span> msec</span><br><span class="line">                                                              random    random     bkwd    record    stride                             </span><br><span class="line">       </span><br><span class="line">              kB  reclen    write  rewrite    read    reread    read     write     read   rewrite      read   fwrite frewrite    fread  </span><br><span class="line">freread</span><br><span class="line">          <span class="number">131072</span>    <span class="number">2048</span>    <span class="number">10680</span>        <span class="number">0</span>                      <span class="number">79625</span>    <span class="number">10938</span></span><br></pre></td></tr></table></figure><p></p><p>根据测试结果我们知道，随机写128MBytes的传输速度为10MB/s，随机读的传输速度约为80MB/s。读的性能与datasheet上提供的<code>Sequential read</code>的差不多的，但是写的性能与<code>Sequential write</code>还是有一定的差距。</p><p>各个参数定义如下：</p><ul><li><code>a</code>: Auto mode</li><li><code>z</code>: Used in conjunction with -a to test all possible record sizes</li><li><code>e</code>: Include flush (fsync,fflush) in the timing calculations</li><li><code>c</code>: Include close in the timing calculations</li><li><code>I</code>: Use VxFS VX_DIRECT, O_DIRECT,or O_DIRECTIO for all file operations</li><li><code>-+n</code>: No retests selected</li><li><code>L64</code>: Set processor cache line size to 64 Bytes</li><li><code>S32</code>: Set processor cache size to 32KBytes</li><li><code>r2m</code>: record size 2M</li><li><code>s128m</code>: file size 128M</li><li><code>i0</code>: Test to run write/rewrite</li><li><code>i2</code>: Test to run random-read/write</li><li><code>-+b 400000,30000</code>: burst size 400000KBytes,sleep between burst 30000ms</li><li><code>w</code>: Do not unlink temporary file</li><li><code>f</code>: set testfile filename to use</li><li><code>R</code>: Generate Excel report</li><li><code>b</code>: Filename Create Excel worksheet file,emmc_test.xls</li></ul><hr><h1 id="iozone用法帮助"><a href="#iozone用法帮助" class="headerlink" title="iozone用法帮助"></a>iozone用法帮助</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"># ./iozone -h                                               </span><br><span class="line">iozone: help mode</span><br><span class="line"></span><br><span class="line">    Usage: iozone [-s filesize_kB] [-r record_size_kB] [-f [path]filename] [-h]</span><br><span class="line">                  [-i test] [-E] [-p] [-a] [-A] [-z] [-Z] [-m] [-M] [-t children]</span><br><span class="line">                  [-l min_number_procs] [-u max_number_procs] [-v] [-R] [-x] [-o]</span><br><span class="line">                  [-d microseconds] [-F path1 path2...] [-V pattern] [-j stride]</span><br><span class="line">                  [-T] [-C] [-B] [-D] [-G] [-I] [-H depth] [-k depth] [-U mount_point]</span><br><span class="line">                  [-S cache_size] [-O] [-L cacheline_size] [-K] [-g maxfilesize_kB]</span><br><span class="line">                  [-n minfilesize_kB] [-N] [-Q] [-P start_cpu] [-e] [-c] [-b Excel.xls]</span><br><span class="line">                  [-J milliseconds] [-X write_telemetry_filename] [-w] [-W]</span><br><span class="line">                  [-Y read_telemetry_filename] [-y minrecsize_kB] [-q maxrecsize_kB]</span><br><span class="line">                  [-+u] [-+m cluster_filename] [-+d] [-+x multiplier] [-+p # ]</span><br><span class="line">                  [-+r] [-+t] [-+X] [-+Z] [-+w percent dedupable] [-+y percent_interior_dedup]</span><br><span class="line">                  [-+C percent_dedup_within] [-+a zero_pct]  [-+Q dedup granule size]</span><br><span class="line">                  [-+M dedup+compress flag ]</span><br><span class="line"> </span><br><span class="line">           -a  Auto mode</span><br><span class="line">           -A  Auto2 mode</span><br><span class="line">           -b Filename  Create Excel worksheet file</span><br><span class="line">           -<span class="function">B  Use <span class="title">mmap</span><span class="params">()</span> files</span></span><br><span class="line">           -c  Include close in the timing calculations</span><br><span class="line">           -C  Show bytes transferred by each child in throughput testing</span><br><span class="line">           -d #  Microsecond delay out of barrier</span><br><span class="line">           -<span class="function">D  Use <span class="title">msync</span><span class="params">(MS_ASYNC)</span> on mmap files</span></span><br><span class="line">           -e  Include flush (fsync,fflush) in the timing calculations</span><br><span class="line">           -E  Run extension tests</span><br><span class="line">           -f filename  to use</span><br><span class="line">           -F filenames  <span class="keyword">for</span> each process/thread in throughput test</span><br><span class="line">           -g #  <span class="function">Set maximum file <span class="title">size</span> <span class="params">(in kBytes)</span> <span class="keyword">for</span> <span class="keyword">auto</span> <span class="title">mode</span> <span class="params">(<span class="keyword">or</span> #m <span class="keyword">or</span> #g)</span></span></span><br><span class="line">           -G  Use msync(MS_SYNC) on mmap files</span><br><span class="line">           -h  help</span><br><span class="line">           -H #  Use POSIX async I/O with <span class="meta"># async operations</span></span><br><span class="line">           -i #  <span class="function">Test to <span class="title">run</span> <span class="params">(<span class="number">0</span>=write/rewrite, <span class="number">1</span>=read/re-read, <span class="number">2</span>=random-read/write</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="number">3</span>=Read-backwards, <span class="number">4</span>=Re-write-record, <span class="number">5</span>=stride-read, <span class="number">6</span>=fwrite/re-fwrite</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="number">7</span>=fread/Re-fread, <span class="number">8</span>=random_mix, <span class="number">9</span>=pwrite/Re-pwrite, <span class="number">10</span>=pread/Re-pread</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="number">11</span>=pwritev/Re-pwritev, <span class="number">12</span>=preadv/Re-preadv)</span></span></span><br><span class="line">           -I  Use VxFS VX_DIRECT, O_DIRECT,or O_DIRECTIO for all file operations</span><br><span class="line">           -j #  <span class="function">Set stride of file accesses <span class="title">to</span> <span class="params">(# * record size)</span></span></span><br><span class="line">           -J #  milliseconds of compute cycle before each I/O operation</span><br><span class="line">           -k #  Use POSIX async I/O (no bcopy) with <span class="meta"># async operations</span></span><br><span class="line">           -K  Create jitter in the access pattern <span class="keyword">for</span> readers</span><br><span class="line">           -l #  Lower limit on number of processes to run</span><br><span class="line">           -L #  <span class="function">Set processor cache line size to <span class="title">value</span> <span class="params">(in bytes)</span></span></span><br><span class="line">           -m  Use multiple buffers</span><br><span class="line">           -M  Report uname -a output</span><br><span class="line">           -n #  <span class="function">Set minimum file <span class="title">size</span> <span class="params">(in kBytes)</span> <span class="keyword">for</span> <span class="keyword">auto</span> <span class="title">mode</span> <span class="params">(<span class="keyword">or</span> #m <span class="keyword">or</span> #g)</span></span></span><br><span class="line">           -N  Report results in microseconds per operation</span><br><span class="line">           -<span class="function">o  Writes are <span class="title">synch</span> <span class="params">(O_SYNC)</span></span></span><br><span class="line">           -O  Give results in ops/sec.</span><br><span class="line">           -p  Purge on</span><br><span class="line">           -P #  Bind processes/threads to processors, starting with <span class="keyword">this</span> cpu</span><br><span class="line">           -q #  <span class="function">Set maximum record <span class="title">size</span> <span class="params">(in kBytes)</span> <span class="keyword">for</span> <span class="keyword">auto</span> <span class="title">mode</span> <span class="params">(<span class="keyword">or</span> #m <span class="keyword">or</span> #g)</span></span></span><br><span class="line">           -Q  Create offset/latency files</span><br><span class="line">           -r <span class="meta">#  record size in Kb</span></span><br><span class="line">              <span class="keyword">or</span> -r <span class="meta">#k .. size in kB</span></span><br><span class="line">              <span class="keyword">or</span> -r <span class="meta">#m .. size in MB</span></span><br><span class="line">              <span class="keyword">or</span> -r <span class="meta">#g .. size in GB</span></span><br><span class="line">           -R  Generate Excel report</span><br><span class="line">           -s <span class="meta">#  file size in Kb</span></span><br><span class="line">              <span class="keyword">or</span> -s <span class="meta">#k .. size in kB</span></span><br><span class="line">              <span class="keyword">or</span> -s <span class="meta">#m .. size in MB</span></span><br><span class="line">              <span class="keyword">or</span> -s <span class="meta">#g .. size in GB</span></span><br><span class="line">           -S #  <span class="function">Set processor cache size to <span class="title">value</span> <span class="params">(in kBytes)</span></span></span><br><span class="line">           -t #  Number of threads or processes to use in throughput test</span><br><span class="line">           -T  Use POSIX pthreads <span class="keyword">for</span> throughput tests</span><br><span class="line">           -u #  Upper limit on number of processes to run</span><br><span class="line">           -U  Mount point to remount between tests</span><br><span class="line">           -v  version information</span><br><span class="line">           -V #  Verify data pattern write/read</span><br><span class="line">           -w  Do <span class="keyword">not</span> unlink temporary file</span><br><span class="line">           -W  Lock file when reading <span class="keyword">or</span> writing</span><br><span class="line">           -x  Turn off stone-walling</span><br><span class="line">           -X filename  Write telemetry file. <span class="function">Contains lines <span class="title">with</span> <span class="params">(offset reclen compute_time)</span> in ascii</span></span><br><span class="line">           -y #  Set minimum record size (in kBytes) for auto mode (or #m or #g)</span><br><span class="line">           -Y filename  Read  telemetry file. <span class="function">Contains lines <span class="title">with</span> <span class="params">(offset reclen compute_time)</span> in ascii</span></span><br><span class="line">           -z  Used in conjunction with -a to test all possible record sizes</span><br><span class="line">           -Z  Enable mixing of mmap I/O <span class="keyword">and</span> file I/O</span><br><span class="line">           -+b #,<span class="meta">#  burst size (KB),sleep between burst (mili-second)</span></span><br><span class="line">           -+E Use existing non-Iozone file <span class="keyword">for</span> read-only testing</span><br><span class="line">           -+F Truncate file before write in thread_mix_test</span><br><span class="line">           -+<span class="function">J Include think <span class="title">time</span> <span class="params">(-j #)</span> in throughput calculation</span></span><br><span class="line">           -+K Sony special. Manual control of test 8.</span><br><span class="line">           -+m  Cluster_filename   Enable Cluster testing</span><br><span class="line">           -+d  File I/O diagnostic mode. (To troubleshoot a broken file I/O subsystem)</span><br><span class="line">           -+<span class="function">u  Enable CPU utilization <span class="title">output</span> <span class="params">(Experimental)</span></span></span><br><span class="line">           -+x # Multiplier to use for incrementing file and record sizes</span><br><span class="line">           -+p # Percentage of mix to be reads</span><br><span class="line">           -+r Enable O_RSYNC|O_SYNC <span class="keyword">for</span> all testing.</span><br><span class="line">           -+t Enable network performance test. Requires -+m </span><br><span class="line">           -+n No retests selected.</span><br><span class="line">           -+k Use constant aggregate data <span class="built_in">set</span> size.</span><br><span class="line">           -+q Delay in seconds between tests.</span><br><span class="line">           -+l Enable record locking mode.</span><br><span class="line">           -+L Enable record locking mode, with shared file.</span><br><span class="line">           -+B Sequential mixed workload.</span><br><span class="line">           -+D Enable O_DSYNC mode.</span><br><span class="line">           -+A #  Enable madvise. <span class="number">0</span> = normal, <span class="number">1</span>=random, <span class="number">2</span>=sequential</span><br><span class="line">                                  <span class="number">3</span>=dontneed, <span class="number">4</span>=willneed</span><br><span class="line">           -+N Do <span class="keyword">not</span> truncate existing files on sequential writes.</span><br><span class="line">           -+S # Dedup-able data is limited to sharing within each numerically</span><br><span class="line">                 identified file <span class="built_in">set</span>.</span><br><span class="line">           -+W # Add <span class="keyword">this</span> value to the child thread ID, so that additional files</span><br><span class="line">                 can be added <span class="keyword">while</span> maintaining the proper dedupability with previously</span><br><span class="line">                 existing files that are within the same seed group (-+S).</span><br><span class="line">           -+V Enable shared file. No locking.</span><br><span class="line">           -+X Enable <span class="keyword">short</span> circuit mode <span class="keyword">for</span> filesystem testing ONLY</span><br><span class="line">               ALL Results are NOT valid in <span class="keyword">this</span> mode.</span><br><span class="line">           -+Z Enable old data <span class="built_in">set</span> compatibility mode. WARNING.. Published</span><br><span class="line">               hacks may invalidate these results <span class="keyword">and</span> generate bogus, high</span><br><span class="line">               values <span class="keyword">for</span> results.</span><br><span class="line">           -+w ## Percent of dedup-able data in buffers.</span><br><span class="line">           -+y ## Percent of dedup-able within &amp; across files in buffers.</span><br><span class="line">           -+C ## Percent of dedup-able within &amp; <span class="keyword">not</span> across files in buffers.</span><br><span class="line">           -+a ## Percent of data that is compressible.</span><br><span class="line">           -+Q ## Dedup granule size.</span><br><span class="line">           -+H Hostname    Hostname of the PIT server.</span><br><span class="line">           -+P Service     Service  of the PIT server.</span><br><span class="line">           -+z Enable latency histogram logging.</span><br><span class="line">           -+M Enable Dedup+compress option. (Experimental).</span><br><span class="line">           -+R enable iozone to take filenames from a file.</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的网站记录</title>
      <link href="/21d2626b/"/>
      <url>/21d2626b/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>本文持续收录开发过程中有意思、有意义的网站链接：</p><h1 id="Hexo博客相关"><a href="#Hexo博客相关" class="headerlink" title="Hexo博客相关"></a>Hexo博客相关</h1><ul><li><a href="https://github.com/iissnan/hexo-theme-next/" target="_blank" rel="noopener">hexo-next github官网</a></li><li><a href="https://yfzhou.coding.me/categories/Hexo/" target="_blank" rel="noopener">hexo-next优化</a></li><li><a href="https://yfzhou.coding.me/2018/08/27/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD%EF%BC%89/" target="_blank" rel="noopener">Hexo-Next搭建个人博客（代码块复制功能）</a></li><li><a href="https://github.com/iissnan/hexo-theme-next/issues/119" target="_blank" rel="noopener">使用hexo-next的有意思的博客记录</a></li><li><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">theme-next官网</a></li><li><a href="http://theme-next.iissnan.com/tag-plugins.html" target="_blank" rel="noopener">内置标签使用</a></li><li><a href="https://asdfv1929.github.io/categories/GitBlog/" target="_blank" rel="noopener">hexo-next优化</a></li><li><a href="http://www.aline2013.com/article/blog-inhance_deep.html" target="_blank" rel="noopener">博客深度改造之踩坑记</a> ：该博客中的颜色搭配比较清新</li><li><a href="https://neveryu.github.io/tags/Hexo/" target="_blank" rel="noopener">Hexo-NexT搭建个人博客</a> ：包含基础的博客搭建内容</li><li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html#fn:2" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化</a> ：有意思的博客，包括SEO优化</li><li><a href="https://reuixiy.github.io/" target="_blank" rel="noopener">https://reuixiy.github.io/</a> ：这人的博客非常美观，内容也很有意思</li></ul><hr><h1 id="Linux-Kernel"><a href="#Linux-Kernel" class="headerlink" title="Linux Kernel"></a>Linux Kernel</h1><ul><li><a href="http://linuxperf.com/" target="_blank" rel="noopener">Linux Performance 性能优化</a></li></ul><hr><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><ul><li><a href="http://www.lining0806.com/homepage/" target="_blank" rel="noopener">Python数据挖掘方向</a></li><li><a href="https://ask.julyedu.com/article/323" target="_blank" rel="noopener">Python爬虫开源项目</a></li><li><a href="https://gitbook.cn/books/59b541bb3d49c37f032b67f1/index.html" target="_blank" rel="noopener">网络爬虫</a></li><li><a href="http://cuijiahua.com/collections.html" target="_blank" rel="noopener">神经网络很牛逼的博客</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 网站记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu和Windows查看内存型号</title>
      <link href="/cba4fd4e/"/>
      <url>/cba4fd4e/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>有时候为了新增内存条，需要查看电脑使用的内存条型号。本文记录了如何在Ubuntu和Windows系统下不安装第三方工具查看内存条型号。<a id="more"></a></p><hr><h1 id="Ubuntu系统下查看内存条型号"><a href="#Ubuntu系统下查看内存条型号" class="headerlink" title="Ubuntu系统下查看内存条型号"></a>Ubuntu系统下查看内存条型号</h1><p>使用<code>sudo dmidecode -t memory</code>命令，可以看到当前主板上支持4个卡槽，DIM1和DIM2分别插上了Micron的8GB DDR。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~$ sudo dmidecode -t memory</span><br><span class="line">[sudo] password <span class="keyword">for</span> victor: </span><br><span class="line"><span class="meta"># dmidecode 2.12</span></span><br><span class="line">SMBIOS <span class="number">2.7</span> present.</span><br><span class="line"></span><br><span class="line">Handle <span class="number">0x0005</span>, DMI type <span class="number">16</span>, <span class="number">23</span> bytes</span><br><span class="line">Physical Memory Array</span><br><span class="line">Location: System Board Or Motherboard</span><br><span class="line">Use: System Memory</span><br><span class="line">Error Correction Type: None</span><br><span class="line">Maximum Capacity: <span class="number">64</span> GB</span><br><span class="line">Error Information Handle: Not Provided</span><br><span class="line">Number Of Devices: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">Handle <span class="number">0x003C</span>, DMI type <span class="number">17</span>, <span class="number">40</span> bytes</span><br><span class="line">Memory Device</span><br><span class="line">Array Handle: <span class="number">0x0005</span></span><br><span class="line">Error Information Handle: Not Provided</span><br><span class="line">Total Width: <span class="number">64</span> bits</span><br><span class="line">Data Width: <span class="number">64</span> bits</span><br><span class="line">Size: <span class="number">8192</span> MB</span><br><span class="line">Form Factor: DIMM</span><br><span class="line">Set: None</span><br><span class="line">Locator: DIMM1</span><br><span class="line">Bank Locator: ChannelB</span><br><span class="line">Type: &lt;OUT OF SPEC&gt;</span><br><span class="line">Type Detail: <span class="function">Synchronous <span class="title">Unbuffered</span> <span class="params">(Unregistered)</span></span></span><br><span class="line">Speed: 2133 MHz</span><br><span class="line">Manufacturer: Micron</span><br><span class="line">Serial Number: <span class="number">583E7394</span></span><br><span class="line">Asset Tag:  </span><br><span class="line">Part Number: <span class="number">8</span>ATF1G64AZ<span class="number">-2</span>G3H1    </span><br><span class="line">Rank: <span class="number">1</span></span><br><span class="line">Configured Clock Speed: <span class="number">2133</span> MHz</span><br><span class="line">Minimum voltage:  Unknown</span><br><span class="line">Maximum voltage:  Unknown</span><br><span class="line">Configured voltage:  <span class="number">1.200</span> V</span><br><span class="line"></span><br><span class="line">Handle <span class="number">0x0009</span>, DMI type <span class="number">17</span>, <span class="number">40</span> bytes</span><br><span class="line">Memory Device</span><br><span class="line">Array Handle: <span class="number">0x0005</span></span><br><span class="line">Error Information Handle: Not Provided</span><br><span class="line">Total Width: <span class="number">64</span> bits</span><br><span class="line">Data Width: <span class="number">64</span> bits</span><br><span class="line">Size: <span class="number">8192</span> MB</span><br><span class="line">Form Factor: DIMM</span><br><span class="line">Set: None</span><br><span class="line">Locator: DIMM2</span><br><span class="line">Bank Locator: ChannelB</span><br><span class="line">Type: &lt;OUT OF SPEC&gt;</span><br><span class="line">Type Detail: <span class="function">Synchronous <span class="title">Unbuffered</span> <span class="params">(Unregistered)</span></span></span><br><span class="line">Speed: 2133 MHz</span><br><span class="line">Manufacturer: Micron</span><br><span class="line">Serial Number: B0850A71</span><br><span class="line">Asset Tag:  </span><br><span class="line">Part Number: <span class="number">8</span>ATF1G64AZ<span class="number">-2</span>G3B1    </span><br><span class="line">Rank: <span class="number">1</span></span><br><span class="line">Configured Clock Speed: <span class="number">2133</span> MHz</span><br><span class="line">Minimum voltage:  Unknown</span><br><span class="line">Maximum voltage:  Unknown</span><br><span class="line">Configured voltage:  <span class="number">1.200</span> V</span><br><span class="line"></span><br><span class="line">Handle <span class="number">0x0008</span>, DMI type <span class="number">17</span>, <span class="number">40</span> bytes</span><br><span class="line">Memory Device</span><br><span class="line">Array Handle: <span class="number">0x0005</span></span><br><span class="line">Error Information Handle: Not Provided</span><br><span class="line">Total Width: Unknown</span><br><span class="line">Data Width: Unknown</span><br><span class="line">Size: No Module Installed</span><br><span class="line">Form Factor: Other</span><br><span class="line">Set: None</span><br><span class="line">Locator: DIMM3</span><br><span class="line">Bank Locator: ChannelA</span><br><span class="line">Type: Unknown</span><br><span class="line">Type Detail: None</span><br><span class="line">Speed: Unknown</span><br><span class="line">Manufacturer: Not Specified</span><br><span class="line">Serial Number: Not Specified</span><br><span class="line">Asset Tag: Not Specified</span><br><span class="line">Part Number: Not Specified</span><br><span class="line">Rank: Unknown</span><br><span class="line">Configured Clock Speed: Unknown</span><br><span class="line">Minimum voltage:  Unknown</span><br><span class="line">Maximum voltage:  Unknown</span><br><span class="line">Configured voltage:  Unknown</span><br><span class="line"></span><br><span class="line">Handle <span class="number">0x0007</span>, DMI type <span class="number">17</span>, <span class="number">40</span> bytes</span><br><span class="line">Memory Device</span><br><span class="line">Array Handle: <span class="number">0x0005</span></span><br><span class="line">Error Information Handle: Not Provided</span><br><span class="line">Total Width: Unknown</span><br><span class="line">Data Width: Unknown</span><br><span class="line">Size: No Module Installed</span><br><span class="line">Form Factor: Other</span><br><span class="line">Set: None</span><br><span class="line">Locator: DIMM4</span><br><span class="line">Bank Locator: ChannelA</span><br><span class="line">Type: Unknown</span><br><span class="line">Type Detail: None</span><br><span class="line">Speed: Unknown</span><br><span class="line">Manufacturer: Not Specified</span><br><span class="line">Serial Number: Not Specified</span><br><span class="line">Asset Tag: Not Specified</span><br><span class="line">Part Number: Not Specified</span><br><span class="line">Rank: Unknown</span><br><span class="line">Configured Clock Speed: Unknown</span><br><span class="line">Minimum voltage:  Unknown</span><br><span class="line">Maximum voltage:  Unknown</span><br><span class="line">Configured voltage:  Unknown</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="Windows系统下查看内存条型号"><a href="#Windows系统下查看内存条型号" class="headerlink" title="Windows系统下查看内存条型号"></a>Windows系统下查看内存条型号</h1><p><code>ctrl + R</code>调出运行窗口，输入<code>cmd</code>进入命令行窗口，在命令行窗口输入<code>wmic</code>和<code>memorychip</code>就可以查看当前插上内存条的情况。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> ubuntu工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu切换python版本</title>
      <link href="/4d51f2a2/"/>
      <url>/4d51f2a2/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>在ubuntu下经常编译软件需要用到python版本，有些软件需要的python版本并不固定。于是，在系统里装了好几个python版本，有时候需要用python2.7编译，有时候需要用到python3.5编译。<br>因此就涉及到了python版本切换的问题。本文就是针对这个问题整理出一种简单的切换python版本的方法，当然，切换gcc、java的版本也适用此方法。<a id="more"></a></p><hr><h1 id="查看本地电脑python安装情况"><a href="#查看本地电脑python安装情况" class="headerlink" title="查看本地电脑python安装情况"></a>查看本地电脑python安装情况</h1><p>如下是我本地已安装的python版本情况：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~$ python</span><br><span class="line">python      python2     python2<span class="number">.7</span>   python3     python3<span class="number">.4</span>   python3<span class="number">.4</span>m  python3<span class="number">.5</span>   python3<span class="number">.5</span>m  python3m    pythontex   pythontex3</span><br><span class="line">victor@victor-HP:~$ python</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="查看python是否加入到update-alternatives"><a href="#查看python是否加入到update-alternatives" class="headerlink" title="查看python是否加入到update-alternatives"></a>查看python是否加入到update-alternatives</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~$ update-alternatives --display python</span><br><span class="line">python - 自动模式</span><br><span class="line"> 链接目前指向 /usr/bin/python3<span class="number">.5</span></span><br><span class="line">/usr/bin/python2<span class="number">.7</span> - 优先级 <span class="number">1</span></span><br><span class="line">/usr/bin/python3<span class="number">.4</span> - 优先级 <span class="number">2</span></span><br><span class="line">/usr/bin/python3<span class="number">.5</span> - 优先级 <span class="number">3</span></span><br><span class="line">目前“最佳”的版本为 /usr/bin/python3<span class="number">.5</span>。</span><br></pre></td></tr></table></figure><p>这个结果是我之前已经加入到 update-alternatives 中了，如果没有加入到，会有下面的提示：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-alternatives: error: no alternatives <span class="keyword">for</span> python</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="添加到替换组中"><a href="#添加到替换组中" class="headerlink" title="添加到替换组中"></a>添加到替换组中</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python2<span class="number">.7</span> <span class="number">1</span></span><br><span class="line">victor@victor-HP:~$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3<span class="number">.4</span> <span class="number">2</span></span><br><span class="line">victor@victor-HP:~$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3<span class="number">.5</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>各个参数的含义如下：</p><ul><li><code>--install</code>: 添加到替换组中；</li><li><code>/usr/bin/python</code>: 链接；</li><li><code>python</code>：名称；</li><li><code>/usr/bin/python2.7</code>: 实际的程序路径；</li><li><code>1 2 3</code>: 最后一个参数表示优先级，数字越高，表示优先级越高；</li></ul><ul><li>&lt;链接&gt; 是指向 /etc/alternatives/&lt;名称&gt; 的符号链接。(如 /usr/bin/python)</li><li>&lt;名称&gt; 是该链接替换组的主控名。(如 python)</li><li>&lt;路径&gt; 是候选项目标文件的位置。(如 /usr/bin/python2.7)</li><li>&lt;优先级&gt; 是一个整数，在自动模式下，这个数字越高的选项，其优先级也就越高。</li></ul><hr><h1 id="选择python替换版本"><a href="#选择python替换版本" class="headerlink" title="选择python替换版本"></a>选择python替换版本</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~$ sudo update-alternatives --config python</span><br><span class="line">有 <span class="number">3</span> 个候选项可用于替换 python (提供 /usr/bin/python)。</span><br><span class="line"></span><br><span class="line">  选择       路径              优先级  状态</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">* <span class="number">0</span>            /usr/bin/python3<span class="number">.5</span>   <span class="number">3</span>         自动模式</span><br><span class="line">  <span class="number">1</span>            /usr/bin/python2<span class="number">.7</span>   <span class="number">1</span>         手动模式</span><br><span class="line">  <span class="number">2</span>            /usr/bin/python3<span class="number">.4</span>   <span class="number">2</span>         手动模式</span><br><span class="line">  <span class="number">3</span>            /usr/bin/python3<span class="number">.5</span>   <span class="number">3</span>         手动模式</span><br><span class="line"></span><br><span class="line">要维持当前值[*]请按回车键，或者键入选择的编号：</span><br></pre></td></tr></table></figure><hr><h1 id="update-alternatives的用法"><a href="#update-alternatives的用法" class="headerlink" title="update-alternatives的用法"></a>update-alternatives的用法</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">victor@victor-HP:~$ update-alternatives --help</span><br><span class="line">用法：update-alternatives [&lt;选项&gt; ...] &lt;命令&gt;</span><br><span class="line"></span><br><span class="line">命令：</span><br><span class="line">  --install &lt;链接&gt; &lt;名称&gt; &lt;路径&gt; &lt;优先级&gt;</span><br><span class="line">    [--slave &lt;链接&gt; &lt;名称&gt; &lt;路径&gt;] ...</span><br><span class="line">                           在系统中加入一组候选项。</span><br><span class="line">  --remove &lt;名称&gt; &lt;路径&gt;   从 &lt;名称&gt; 替换组中去除 &lt;路径&gt; 项。</span><br><span class="line">  --remove-all &lt;名称&gt;      从替换系统中删除 &lt;名称&gt; 替换组。</span><br><span class="line">  --<span class="keyword">auto</span> &lt;名称&gt;            将 &lt;名称&gt; 的主链接切换到自动模式。</span><br><span class="line">  --display &lt;名称&gt;         显示关于 &lt;名称&gt; 替换组的信息。</span><br><span class="line">  --query &lt;名称&gt;           机器可读版的 --display &lt;名称&gt;.</span><br><span class="line">  --<span class="built_in">list</span> &lt;名称&gt;            列出 &lt;名称&gt; 替换组中所有的可用候选项。</span><br><span class="line">  --get-selections         列出主要候选项名称以及它们的状态。</span><br><span class="line">  --<span class="built_in">set</span>-selections         从标准输入中读入候选项的状态。</span><br><span class="line">  --config &lt;名称&gt;          列出 &lt;名称&gt; 替换组中的可选项，并就使用其中</span><br><span class="line">                           哪一个，征询用户的意见。</span><br><span class="line">  --<span class="built_in">set</span> &lt;名称&gt; &lt;路径&gt;      将 &lt;路径&gt; 设置为 &lt;名称&gt; 的候选项。</span><br><span class="line">  --all                    对所有可选项一一调用 --config 命令。</span><br><span class="line"></span><br><span class="line">&lt;链接&gt; 是指向 /etc/alternatives/&lt;名称&gt; 的符号链接。</span><br><span class="line">    (如 /usr/bin/pager)</span><br><span class="line">&lt;名称&gt; 是该链接替换组的主控名。</span><br><span class="line">    (如 pager)</span><br><span class="line">&lt;路径&gt; 是候选项目标文件的位置。</span><br><span class="line">    (如 /usr/bin/less)</span><br><span class="line">&lt;优先级&gt; 是一个整数，在自动模式下，这个数字越高的选项，其优先级也就越高。</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">  --altdir &lt;目录&gt;          改变候选项目录。</span><br><span class="line">  --admindir &lt;目录&gt;        设置 statoverride 文件的目录。</span><br><span class="line">  --<span class="built_in">log</span> &lt;文件&gt;             改变日志文件。</span><br><span class="line">  --force                  就算没有通过自检，也强制执行操作。</span><br><span class="line">  --skip-<span class="keyword">auto</span>              在自动模式中跳过设置正确候选项的提示</span><br><span class="line">                           (只与 --config 有关)</span><br><span class="line">  --verbose                启用详细输出。</span><br><span class="line">  --quiet                  安静模式，输出尽可能少的信息。不显示输出信息。</span><br><span class="line">  --help                   显示本帮助信息。</span><br><span class="line">  --version                显示版本信息。</span><br><span class="line">victor@victor-HP:~$</span><br></pre></td></tr></table></figure><p>可以用<code>man update-alternatives</code>查看更详细的信息。</p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.csdn.net/u013894834/article/details/75305752" target="_blank" rel="noopener">ubuntu 16.04下切换python版本小结</a><br><a href="https://linux.die.net/man/8/update-alternatives" target="_blank" rel="noopener">update-alternatives(8) - Linux man page</a><br><a href="http://persevere.iteye.com/blog/1479524" target="_blank" rel="noopener">在Ubuntu中通过update-alternatives切换软件版本</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> ubuntu工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux eMMC信息读取</title>
      <link href="/33268c93/"/>
      <url>/33268c93/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>某一天，领导安排一个任务，要画一份某个项目的eMMC的layout，将分区信息表示出来，哪个分区的起始地址和结束地址，占用了多大等等信息。在此，整理了相关的内容，通过这几个常用的命令可以大致了解这块eMMC的分区情况。<a id="more"></a></p><hr><h1 id="mount查看分区挂载情况"><a href="#mount查看分区挂载情况" class="headerlink" title="mount查看分区挂载情况"></a>mount查看分区挂载情况</h1><p>执行mount命令，可以查看分区挂载的情况。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@xxx:/ <span class="meta"># mount</span></span><br><span class="line">rootfs on / <span class="function">type <span class="title">rootfs</span> <span class="params">(ro,size=<span class="number">1272540</span>k,nr_inodes=<span class="number">318135</span>)</span></span></span><br><span class="line">proc on /proc type proc (rw,relatime)</span><br><span class="line">sysfs on /<span class="function">sys type <span class="title">sysfs</span> <span class="params">(rw,relatime)</span></span></span><br><span class="line">tmpfs on /dev type tmpfs (rw,relatime,mode=755)</span><br><span class="line">/dev/block/mmcblk0p1 on /<span class="function">system type <span class="title">ext4</span> <span class="params">(ro,relatime,journal_checksum,data=ordered)</span></span></span><br><span class="line">tmpfs on /tmp type tmpfs (rw,relatime)</span><br><span class="line">/dev/block/mmcblk0p2 on /<span class="function">data type <span class="title">ext4</span> <span class="params">(rw,nosuid,nodev,noatime,nodelalloc,journal_checksum,data=ordered)</span></span></span><br></pre></td></tr></table></figure><p></p><p>可以知道，<code>mmcblk0p1</code>挂载到<code>/system</code>分区，<code>mmcblk0p2</code>挂载到<code>/data</code>分区。</p><hr><h1 id="查看eMMC分区情况"><a href="#查看eMMC分区情况" class="headerlink" title="查看eMMC分区情况"></a>查看eMMC分区情况</h1><p>在 <code>/sys/class/block/</code> 目录下可以查看当前系统的分区情况：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">total <span class="number">0</span></span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">34</span> loop0 -&gt; ../../devices/<span class="keyword">virtual</span>/block/loop0</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">34</span> loop1 -&gt; ../../devices/<span class="keyword">virtual</span>/block/loop1</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">34</span> loop2 -&gt; ../../devices/<span class="keyword">virtual</span>/block/loop2</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">34</span> loop3 -&gt; ../../devices/<span class="keyword">virtual</span>/block/loop3</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">34</span> loop4 -&gt; ../../devices/<span class="keyword">virtual</span>/block/loop4</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">34</span> mmcblk0 -&gt; ../../devices/platform/<span class="number">6b</span>030000.esdhc/mmc_host/mmc0/mmc0:<span class="number">0001</span>/block/mmcblk0</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">34</span> mmcblk0boot0 -&gt; ../../devices/platform/<span class="number">6b</span>030000.esdhc/mmc_host/mmc0/mmc0:<span class="number">0001</span>/block/mmcblk0/mmcblk0boot0</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">34</span> mmcblk0boot1 -&gt; ../../devices/platform/<span class="number">6b</span>030000.esdhc/mmc_host/mmc0/mmc0:<span class="number">0001</span>/block/mmcblk0/mmcblk0boot1</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">34</span> mmcblk0p1 -&gt; ../../devices/platform/<span class="number">6b</span>030000.esdhc/mmc_host/mmc0/mmc0:<span class="number">0001</span>/block/mmcblk0/mmcblk0p1</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">34</span> mmcblk0p2 -&gt; ../../devices/platform/<span class="number">6b</span>030000.esdhc/mmc_host/mmc0/mmc0:<span class="number">0001</span>/block/mmcblk0/mmcblk0p2</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">34</span> mmcblk0rpmb -&gt; ../../devices/platform/<span class="number">6b</span>030000.esdhc/mmc_host/mmc0/mmc0:<span class="number">0001</span>/block/mmcblk0/mmcblk0rpmb</span><br></pre></td></tr></table></figure><p></p><p>从上面的信息可以知道：</p><ul><li>这个eMMC上总共共有5个分区，boot0/boot1/p1/p2/rpmb分区；</li><li>这个eMMC用到的控制器为6b030000.esdhc；</li><li>我们可以到<code>../../devices/platform/6b030000.esdhc/mmc_host/mmc0/mmc0:0001/block/mmcblk0/</code>目录下查看更具体的信息；<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@xxx:/sys/devices/platform/<span class="number">6b</span>030000.esdhc/mmc_host/mmc0/mmc0:<span class="number">0001</span>/block/mmcblk0 <span class="meta"># ll</span></span><br><span class="line">total <span class="number">0</span></span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> alignment_offset</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> badblocks</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> bdi -&gt; ../../../../../../../<span class="keyword">virtual</span>/bdi/<span class="number">179</span>:<span class="number">0</span></span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> capability</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> dev</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> device -&gt; ../../../mmc0:<span class="number">0001</span></span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> discard_alignment</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> ext_range</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> force_ro</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> holders</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> inflight</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> integrity</span><br><span class="line">drwxr-xr-x <span class="number">7</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> mmcblk0boot0</span><br><span class="line">drwxr-xr-x <span class="number">7</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> mmcblk0boot1</span><br><span class="line">drwxr-xr-x <span class="number">4</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> mmcblk0p1</span><br><span class="line">drwxr-xr-x <span class="number">4</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> mmcblk0p2</span><br><span class="line">drwxr-xr-x <span class="number">7</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> mmcblk0rpmb</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> power</span><br><span class="line">drwxr-xr-x <span class="number">3</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> <span class="built_in">queue</span></span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> range</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> removable</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> ro</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> size</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> slaves</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> stat</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">35</span> subsystem -&gt; ../../../../../../../../<span class="class"><span class="keyword">class</span>/<span class="title">block</span></span></span><br><span class="line"><span class="class">-<span class="title">rw</span>-<span class="title">r</span>--<span class="title">r</span>-- 1 <span class="title">root</span> <span class="title">root</span> 4096 1970-01-01 00:</span><span class="number">00</span> uevent</span><br><span class="line">@xxx:/sys/devices/platform/<span class="number">6b</span>030000.esdhc/mmc_host/mmc0/mmc0:<span class="number">0001</span>/block/mmcblk0 #</span><br></pre></td></tr></table></figure></li></ul><p>关于这些参数的意义，可以参照：<br><a href="https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-block" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-block</a><br><a href="https://www.kernel.org/doc/Documentation/block/stat.txt" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/block/stat.txt</a></p><hr><h1 id="查看各个分区的大小"><a href="#查看各个分区的大小" class="headerlink" title="查看各个分区的大小"></a>查看各个分区的大小</h1><p>在<code>/sys/devices/platform/6b030000.esdhc/mmc_host/mmc0/mmc0:0001/block/</code>目录下，有几个以<code>mmcblk0</code>开头的目录名，这里面包含了分区的起始和结束的block地址。比如说，<code>mmcblk0p2</code>挂载出来的<code>/data</code>分区。</p><ul><li>获取分区的大小：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># cat mmcblk0p2/size</span></span><br><span class="line"><span class="number">524288</span></span><br></pre></td></tr></table></figure></li></ul><p>读取到分区的size为524288 block大小，<font color="red">1个block为512字节</font>，那么这个<code>/data</code>分区的大小为：<code>524288 block * 512Bytes/block = 268435456Bytes = 256MB</code></p><ul><li>获取到分区的起始地址：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># cat mmcblk0p2/start</span></span><br><span class="line"><span class="number">1423360</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="读取eMMC控制器的相关寄存器"><a href="#读取eMMC控制器的相关寄存器" class="headerlink" title="读取eMMC控制器的相关寄存器"></a>读取eMMC控制器的相关寄存器</h1><p>eMMC控制器厂商会提供一个寄存器概要信息，比如说美光家的eMMC的spec，详见：<a href="http://www.chinaflashmarket.com/Uploads/file/2015/12/25/Micron_emmc_v50.pdf" target="_blank" rel="noopener">http://www.chinaflashmarket.com/Uploads/file/2015/12/25/Micron_emmc_v50.pdf</a><br>如果想要更进一步了解每个寄存器各个bit的详细信息，需要参考<code>JEDEC</code>提供的<code>JESD84-B50-1</code>文档。</p><p>在<code>/sys/devices/platform/6b030000.esdhc/mmc_host/mmc0/mmc0:0001/</code>目录下可以读取到<code>cid</code>、<code>csd</code>、<code>dsr</code>、<code>ocr</code>、寄存器的值，如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@xxx:/sys/devices/platform/<span class="number">6b</span>030000.esdhc/mmc_host/mmc0/mmc0:<span class="number">0001</span> <span class="meta"># ll</span></span><br><span class="line">total <span class="number">0</span></span><br><span class="line">drwxr-xr-x <span class="number">3</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> block</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> cid</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> cmdq_en</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> csd</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> date</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> driver -&gt; ../../../../../../bus/mmc/drivers/mmcblk</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> dsr</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> enhanced_area_offset</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> enhanced_area_size</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> erase_size</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> ffu_capable</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> fwrev</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> hwrev</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> life_time</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> manfid</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> name</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> ocr</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> oemid</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> power</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> pre_eol_info</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> preferred_erase_size</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> prv</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> raw_rpmb_size_mult</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> rel_sectors</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> serial</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root    <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> subsystem -&gt; ../../../../../../bus/mmc</span><br><span class="line">-r--r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">01</span>:<span class="number">49</span> type</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">4096</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> uevent</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="读取ext-csd寄存器"><a href="#读取ext-csd寄存器" class="headerlink" title="读取ext_csd寄存器"></a>读取ext_csd寄存器</h1><p>这个寄存器属于<code>csd</code>扩展出来的，需要将<code>debugfs</code>挂载出来才能读取到。首先执行：<code>mount -t debugfs none /sys/kernel/debug/</code>，<br>在<code>/sys/kernel/debug/mmc0</code>目录下，<code>cat ios</code>可以查看这个eMMC控制器的工作频率和位宽基本信息。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@xxx:/sys/kernel/debug/mmc0 <span class="meta"># cat ios</span></span><br><span class="line">clock:          <span class="number">52000000</span> Hz</span><br><span class="line">actual clock:   <span class="number">41666666</span> Hz</span><br><span class="line">vdd:            <span class="number">21</span> (<span class="number">3.3</span> ~ <span class="number">3.4</span> V)</span><br><span class="line">bus mode:       <span class="number">2</span> (push-pull)</span><br><span class="line">chip select:    <span class="number">0</span> (don't care)</span><br><span class="line">power mode:     <span class="number">2</span> (on)</span><br><span class="line">bus width:      <span class="number">3</span> (<span class="number">8</span> bits)</span><br><span class="line">timing spec:    <span class="number">8</span> (mmc DDR52)</span><br><span class="line">signal voltage: <span class="number">1</span> (<span class="number">1.80</span> V)</span><br><span class="line">driver type:    <span class="number">0</span> (driver type B)</span><br></pre></td></tr></table></figure><p></p><p>然后在<code>/sys/kernel/debug/mmc0/mmc0\:0001/</code>目录下就可以看到<code>ext_csd</code>寄存器了。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@xxx:/sys/kernel/debug/mmc0/mmc0:<span class="number">0001</span> <span class="meta"># ll</span></span><br><span class="line">total <span class="number">0</span></span><br><span class="line">-r-------- <span class="number">1</span> root root <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> ext_csd</span><br><span class="line">-r-------- <span class="number">1</span> root root <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> state</span><br><span class="line">-r-------- <span class="number">1</span> root root <span class="number">0</span> <span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span> status</span><br></pre></td></tr></table></figure><p></p><p><code>cat ext_csd</code>可以得到一个512字节大小的数据，如下<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@xxx:/sys/kernel/debug/mmc0/mmc0:<span class="number">0001</span> <span class="meta"># cat ext_csd</span></span><br><span class="line"><span class="number">00000000000000000000000000000000390300</span>c0470700c04707000000000000000101000000000000000000000000000000000000000000000000000a000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000900e00070100000000151f20000000000000000000000000000000010100090000000008000200571f0a0aeeee8888001e0f460f78140100c0470710140a0a090201320808400007fdfb550100640aeeeeee99011e0200000000320a00100000ee01000000000000000000012020010100000000000000000000000000000000000000000000000000000000000000000000000000001f0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ffffffff00000103007f0003013f3f01010100000000000000</span><br></pre></td></tr></table></figure><p></p><p>当然这样看很难看，无法很快的确认寄存器中某些位的值。因此，网上就有个小哥写了个python脚本来解析这512字节的数据，以常人可以理解的格式进行解析。详见：<a href="https://blog.kylemanna.com/linux/parse-emmc-extended-csd-ecsd-registers-with-python/" target="_blank" rel="noopener">https://blog.kylemanna.com/linux/parse-emmc-extended-csd-ecsd-registers-with-python/</a><br>输出的格式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">victor @victor-HP:~/ work2/cal_time$ python analysis_ext_csd.py </span><br><span class="line"><span class="number">0000</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0016</span>:<span class="number">39</span> <span class="number">03</span> <span class="number">00</span> c0   <span class="number">47</span> <span class="number">07</span> <span class="number">00</span> c0   <span class="number">47</span> <span class="number">07</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0032</span>:<span class="number">00</span> <span class="number">01</span> <span class="number">01</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0048</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">0</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">01</span></span><br><span class="line"><span class="number">0064</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0080</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0096</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0112</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0128</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0144</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">90</span> <span class="number">0</span>e <span class="number">00</span></span><br><span class="line"><span class="number">0160</span>:<span class="number">07</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">15</span> <span class="number">1f</span>   <span class="number">20</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0176</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">01</span> <span class="number">01</span> <span class="number">00</span> <span class="number">09</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0192</span>:<span class="number">08</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span>   <span class="number">57</span> <span class="number">1f</span> <span class="number">0</span>a <span class="number">0</span>a   ee ee <span class="number">88</span> <span class="number">88</span>   <span class="number">00</span> <span class="number">1</span>e <span class="number">0f</span> <span class="number">46</span></span><br><span class="line"><span class="number">0208</span>:<span class="number">0f</span> <span class="number">78</span> <span class="number">14</span> <span class="number">01</span>   <span class="number">00</span> c0 <span class="number">47</span> <span class="number">07</span>   <span class="number">10</span> <span class="number">14</span> <span class="number">0</span>a <span class="number">0</span>a   <span class="number">09</span> <span class="number">02</span> <span class="number">01</span> <span class="number">32</span></span><br><span class="line"><span class="number">0224</span>:<span class="number">08</span> <span class="number">08</span> <span class="number">40</span> <span class="number">00</span>   <span class="number">07</span> fd fb <span class="number">55</span>   <span class="number">01</span> <span class="number">00</span> <span class="number">64</span> <span class="number">0</span>a   ee ee ee <span class="number">99</span></span><br><span class="line"><span class="number">0240</span>:<span class="number">01</span> <span class="number">1</span>e <span class="number">02</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">32</span>   <span class="number">0</span>a <span class="number">00</span> <span class="number">10</span> <span class="number">00</span>   <span class="number">00</span> ee <span class="number">01</span> <span class="number">00</span></span><br><span class="line"><span class="number">0256</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">01</span> <span class="number">20</span> <span class="number">20</span> <span class="number">01</span>   <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0272</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0288</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0304</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">1f</span>   <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0320</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0336</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0352</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0368</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0384</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0400</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0416</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0432</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0448</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0464</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">0480</span>:<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> ff   ff ff ff <span class="number">00</span>   <span class="number">00</span> <span class="number">01</span> <span class="number">03</span> <span class="number">00</span></span><br><span class="line"><span class="number">0496</span>:<span class="number">7f</span> <span class="number">00</span> <span class="number">03</span> <span class="number">01</span>   <span class="number">3f</span> <span class="number">3f</span> <span class="number">01</span> <span class="number">01</span>   <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>   <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">BOOT_SIZE_MULTI[<span class="number">226</span>] = <span class="number">0x20</span></span><br></pre></td></tr></table></figure><p>Python的内容如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Author: Kyle Manna &lt;kyle@kylemanna.com&gt;</span></span><br><span class="line"><span class="string">Blog: https://blog.kylemanna.com</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2bytearray</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(s) % <span class="number">2</span>:</span><br><span class="line">        s = <span class="string">'0'</span> + s</span><br><span class="line"></span><br><span class="line">    reorder = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">if</span> reorder:</span><br><span class="line">        r = []</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= len(s):</span><br><span class="line">            r.append(s[len(s) - i - <span class="number">1</span>])</span><br><span class="line">            r.append(s[len(s) - i])</span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">        s = <span class="string">''</span>.join(r)</span><br><span class="line"></span><br><span class="line">    out = binascii.unhexlify(s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    ecsd_str = <span class="string">'00000000000000000000000000000000390300c0470700c04707000000000000000101000000000000000000000000000000000000000000000000000a000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000900e00070100000000151f20000000000000000000000000000000010100090000000008000200571f0a0aeeee8888001e0f460f78140100c0470710140a0a090201320808400007fdfb550100640aeeeeee99011e0200000000320a00100000ee01000000000000000000012020010100000000000000000000000000000000000000000000000000000000000000000000000000001f0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ffffffff00000103007f0003013f3f01010100000000000000'</span></span><br><span class="line">    <span class="comment">#ecsd_str = '320100'</span></span><br><span class="line">    ecsd = str2bytearray(ecsd_str)</span><br><span class="line">    csd_len = len(ecsd)</span><br><span class="line"></span><br><span class="line">    line_len = <span class="number">16</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; len(ecsd):</span><br><span class="line">        sys.stdout.write(<span class="string">"&#123;0:04d&#125;:\t"</span>.format(i))</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(line_len):</span><br><span class="line">            <span class="keyword">if</span> (i &lt; csd_len):</span><br><span class="line">                sys.stdout.write(<span class="string">"&#123;0:=02x&#125;"</span>.format(ord(ecsd[csd_len-i<span class="number">-1</span>])))</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (j == (line_len - <span class="number">1</span>)): <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">elif</span> (i % <span class="number">4</span>): sys.stdout.write(<span class="string">" "</span>)</span><br><span class="line">            <span class="keyword">else</span>: sys.stdout.write(<span class="string">"   "</span>)</span><br><span class="line"></span><br><span class="line">        sys.stdout.write(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"BOOT_SIZE_MULTI[226] = 0x&#123;:x&#125;"</span>.format(ord(ecsd[csd_len<span class="number">-168</span><span class="number">-1</span>]))</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux driver </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux driver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux USB Test Mode</title>
      <link href="/488cc6d0/"/>
      <url>/488cc6d0/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>在USB2.0 spec的<code>7.1.20</code>章节规定了USB必须支持以下几种模式的Test Mode。本文将结合USB2.0 spec来实现Linux下的Test Mode做USB认证使用。<a id="more"></a></p><hr><h1 id="7-1-20-Test-Mode-Support"><a href="#7-1-20-Test-Mode-Support" class="headerlink" title="7.1.20 Test Mode Support"></a>7.1.20 Test Mode Support</h1><p>为了便于符合性测试，主机控制器，集线器和高速功能必须支持以下测试模式：</p><ul><li><p>Test_SE0_NAK</p><blockquote><p>Test mode Test_SE0_NAK: Upon command, a port transceiver must enter the high-speed receive modeand remain in that mode until the exit action is taken. This enables the testing of output impedance, lowlevel output voltage, and loading characteristics.<br>In addition, while in this mode, upstream facing ports (andonly upstream facing ports) must respond to any IN token packet with a NAK handshake (only if the packet CRC is determined to be correct) within the normal allowed device response time. This enables testing ofthe device squelch level circuitry and, additionally, provides a general purpose stimulus/response test for basic functional testing.</p></blockquote></li><li><p>Test_J</p><blockquote><p>Test mode Test_J: Upon command, a port’s transceiver must enter the high-speed J state and remain in thatstate until the exit action is taken. This enables the testing of the high output drive level on the D+ line.</p></blockquote></li><li><p>Test_K</p><blockquote><p>Test mode Test_K: Upon command, a port’s transceiver must enter the high-speed K state and remain inthat state until the exit action is taken. This enables the testing of the high output drive level on the D- line.</p></blockquote></li><li><p>Test_Packet</p><blockquote><p>Test mode Test_Packet: Upon command, a port must repetitively transmit the following test packet untilthe exit action is taken. This enables the testing of rise and fall times, eye patterns, jitter, and any other dynamic waveform specifications.</p></blockquote></li><li><p>Test_Force_Enable</p><blockquote><p>Test mode Test_Force_Enable: Upon command, downstream facing hub ports (and only downstreamfacing hub ports) must be enabled in high-speed mode, even if there is no device attached. Packets arriving at the hub’s upstream facing port must be repeated on the port which is in this test mode.<br>This enablestesting of the hub’s disconnect detection; the disconnect detect bit can be polled while varying the loadingon the port, allowing the disconnect detection threshold voltage to be measured.</p></blockquote></li></ul><hr><h1 id="Test-Mode的进入和退出"><a href="#Test-Mode的进入和退出" class="headerlink" title="Test Mode的进入和退出"></a>Test Mode的进入和退出</h1><p>使用设备标准请求<code>SetFeature(TEST_MODE)</code>，向上端口，该定义在<code>9.4.9</code>章节或者使用hub类请求<code>SetPortFeature(PORT_TEST)</code>，向下端口，该定义在<code>11.24.2.13</code>章节。</p><hr><h1 id="SetPortFeature-PORT-TEST"><a href="#SetPortFeature-PORT-TEST" class="headerlink" title="SetPortFeature(PORT_TEST)"></a>SetPortFeature(PORT_TEST)</h1><p>在<code>11.24.2.13 Set Port Feature</code>章节详细讲述了通过<code>Set Port Feature</code>进入Test Mode的方法，现摘录如下：<br><img src="https://pic.superbed.cn/item/5c84d8bf3a213b04179bb14f" alt="linux usb test mode-1"><br><img src="https://pic.superbed.cn/item/5c84d8bf3a213b04179bb151" alt="linux usb test mode-2"><br><img src="https://pic.superbed.cn/item/5c84d8bf3a213b04179bb153" alt="linux usb test mode-3"></p><hr><h1 id="Linux-USB-Test-Mode测试接口"><a href="#Linux-USB-Test-Mode测试接口" class="headerlink" title="Linux USB Test Mode测试接口"></a>Linux USB Test Mode测试接口</h1><p>将下面的代码添加到<code>&lt;Kernel_Dir&gt;/drivers/usb/core/sysfs.c</code>文件中，在sysfs中新增一个<code>port_testmode</code>节点用于Test Mode使用。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"usb.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* use a short timeout for hub/port status fetches */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USB_STS_TIMEOUT     1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> USB_STS_RETRIES     5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * USB 2.0 spec Section 11.24.2.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">clear_port_feature</span><span class="params">(struct usb_device *hdev, <span class="keyword">int</span> port1, <span class="keyword">int</span> feature)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> usb_control_msg(hdev, usb_sndctrlpipe(hdev, <span class="number">0</span>),</span><br><span class="line">        USB_REQ_CLEAR_FEATURE, USB_RT_PORT, feature, port1,</span><br><span class="line">        <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * USB 2.0 spec Section 11.24.2.13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">set_port_feature</span><span class="params">(struct usb_device *hdev, <span class="keyword">int</span> port1, <span class="keyword">int</span> feature)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> usb_control_msg(hdev, usb_sndctrlpipe(hdev, <span class="number">0</span>),</span><br><span class="line">        USB_REQ_SET_FEATURE, USB_RT_PORT, feature, port1,</span><br><span class="line">        <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * USB 2.0 spec Section 11.24.2.7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get_port_status</span><span class="params">(struct usb_device *hdev, <span class="keyword">int</span> port1,</span></span></span><br><span class="line"><span class="function"><span class="params">        struct usb_port_status *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, status = -ETIMEDOUT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; USB_STS_RETRIES &amp;&amp; status == -ETIMEDOUT; i++) &#123;</span><br><span class="line">        status = usb_control_msg(hdev, usb_rcvctrlpipe(hdev, <span class="number">0</span>),</span><br><span class="line">            USB_REQ_GET_STATUS, USB_DIR_IN | USB_RT_PORT, <span class="number">0</span>, port1,</span><br><span class="line">            data, <span class="keyword">sizeof</span>(*data), USB_STS_TIMEOUT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output Format: PortNum USBTest</span></span><br><span class="line"><span class="comment">   PortNum:  1~maxchild</span></span><br><span class="line"><span class="comment">   USBTest:  0 = This port is not in the Port Test Mode.</span></span><br><span class="line"><span class="comment">             1 = This port is in Port Test Mode.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ssize_t</span></span><br><span class="line">show_port_usbtest(struct device *dev, struct device_attribute *attr, <span class="keyword">char</span> *buf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">usb_device</span> *<span class="title">udev</span> = <span class="title">to_usb_device</span>(<span class="title">dev</span>);</span></span><br><span class="line">    <span class="keyword">int</span> i, len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    usb_lock_device(udev);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= udev-&gt;maxchild; ++i) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">usb_port_status</span> <span class="title">ps</span>;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">sizeof</span>(ps) == get_port_status(udev, i, &amp;ps)) &#123;</span><br><span class="line">            len += <span class="built_in">sprintf</span>(buf + len, <span class="string">"%d %d\n"</span>, i, (le16_to_cpu(ps.wPortStatus) &amp; <span class="number">0x800</span>) ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    usb_unlock_device(udev);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Input Format: PortNum USBTest</span></span><br><span class="line"><span class="comment">   PortNum:  1~maxchild</span></span><br><span class="line"><span class="comment">   USBTest:  0 - Disable Test Mode</span></span><br><span class="line"><span class="comment">             1 - Test_J</span></span><br><span class="line"><span class="comment">             2 - Test_K</span></span><br><span class="line"><span class="comment">             3 - Test_SE0_NAK</span></span><br><span class="line"><span class="comment">             4 - Test_Packet</span></span><br><span class="line"><span class="comment">             5 - Test_Force_Enable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ssize_t</span></span><br><span class="line">set_port_usbtest(struct device *dev, struct device_attribute *attr,</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *buf, <span class="keyword">size_t</span> count)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">usb_device</span> *<span class="title">udev</span> = <span class="title">to_usb_device</span>(<span class="title">dev</span>);</span></span><br><span class="line">    <span class="keyword">int</span> port, value;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sscanf</span>(buf, <span class="string">"%d %d"</span>, &amp;port, &amp;value) != <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (port &lt; <span class="number">1</span> || port &gt; udev-&gt;maxchild || value &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">    usb_lock_device(udev);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Disable usb device autosuspend function */</span></span><br><span class="line">    ret = usb_autoresume_device(udev);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (udev-&gt;parent)&#123;</span><br><span class="line">        ret = usb_reset_device(udev);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">goto</span> end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">        <span class="comment">/* Suspend all downstream ports */</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= udev-&gt;maxchild; ++i) &#123;</span><br><span class="line">            ret = set_port_feature(udev, i, USB_PORT_FEAT_SUSPEND);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">goto</span> end2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        ret = set_port_feature(udev, (value &lt;&lt; <span class="number">8</span>) | port, USB_PORT_FEAT_TEST);</span><br><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">goto</span> end2;</span><br><span class="line">        &#125;</span><br><span class="line">        ret = count;</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret = count;</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">end:</span><br><span class="line">    usb_unlock_device(udev);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">end2:</span><br><span class="line">    <span class="comment">/* Resume all downstream ports */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= udev-&gt;maxchild; ++i) &#123;</span><br><span class="line">        clear_port_feature(udev, i, USB_PORT_FEAT_SUSPEND);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">DEVICE_ATTR</span><span class="params">(port_usbtest, S_IRUGO | S_IWUSR, show_port_usbtest, set_port_usbtest)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add_port_usbtest_attributes</span><span class="params">(struct device *dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rc = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_usb_device(dev)) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">usb_device</span> *<span class="title">udev</span> = <span class="title">to_usb_device</span>(<span class="title">dev</span>);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Presently only support hub downstream ports' testmode */</span></span><br><span class="line">        <span class="keyword">if</span> (udev-&gt;descriptor.bDeviceClass == USB_CLASS_HUB)</span><br><span class="line">            rc = sysfs_create_file(&amp;dev-&gt;kobj,</span><br><span class="line">                    &amp;dev_attr_port_usbtest.attr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove_port_usbtest_attributes</span><span class="params">(struct device *dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sysfs_remove_file(&amp;dev-&gt;kobj,</span><br><span class="line">            &amp;dev_attr_port_usbtest.attr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">usb_create_sysfs_dev_files</span><span class="params">(struct usb_device *udev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> = &amp;<span class="title">udev</span>-&gt;<span class="title">dev</span>;</span></span><br><span class="line">    <span class="keyword">int</span> retval;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">    retval = add_port_usbtest_attributes(dev);</span><br><span class="line">    <span class="keyword">if</span> (retval)</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">error:</span><br><span class="line">    usb_remove_sysfs_dev_files(udev);</span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usb_remove_sysfs_dev_files</span><span class="params">(struct usb_device *udev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span> = &amp;<span class="title">udev</span>-&gt;<span class="title">dev</span>;</span></span><br><span class="line"></span><br><span class="line">    remove_port_usbtest_attributes(dev);</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>NXP提供了i.MX6DQ的USB Test Mode代码，在<a href="https://community.nxp.com/docs/DOC-94460" target="_blank" rel="noopener">https://community.nxp.com/docs/DOC-94460</a> 网站上有详细的记录。里面的patch可以参考一下，整合到自己的项目中。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux USB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux USB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USB2.0理论传输速度和实际传输速度</title>
      <link href="/69b1c932/"/>
      <url>/69b1c932/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>我是专门负责USB模块这部分的，有时候需要连接各种USB设备，比如说USB NET、USB Audio、USB Storage等。比如说最近碰到的一个通过USB NET将手机的地图画面传递给车机，车机上滑动地图的体验非常的差。然后客户就说测出来实际上USB的传输速度只有十几M，High-speed的理论速度有480M，肯定是我们车机的USB控制器有问题，有可能是我们的车机将手机识别成全速设备了。<br>很明显，要说服客户，必须给出强有力的数据，也需要解释关于USB的传输速度是怎么一回事，要怎么来衡量。USB2.0包括Full-speed和Low-speed。这里为了描述方便，将USB2.0与High-speed等价起来。<br>本文只是简单的解释了一下为什么USB的实际传输速度比USB Spec中说的理论传输速度差异那么大，具体等知道得更多的话再做补充。<a id="more"></a></p><hr><h1 id="USB理论传输速度"><a href="#USB理论传输速度" class="headerlink" title="USB理论传输速度"></a>USB理论传输速度</h1><ul><li>Low-speed：1.5 Mb/s = <font color="red">1.5Mbps</font> = 0.1875MB/s = 0.1875MBps</li><li>Full-speed：12 Mb/s = <font color="red">12Mbps</font> = 1.5MB/s = 1.5MBps</li><li>High-speed：480 Mb/s = <font color="red">480Mbps</font> = 60MB/s = 60MBps</li></ul><p>速度单位有小b和大B的区分，<font color="red">小b为bits，大B为Bytes。</font>如果没有将小b和大B区分清楚，就去谈论传输速度都是瞎扯。红色部分是USB Spec宣传的理论速度。<br>我们使用<code>ipref</code>工具测试了USB NET的<code>TCP的传输速度</code>和<code>UDP的丢包率</code>。得到<code>TCP传输速度</code>平均为112Mbits/s = 14Mbytes/s，这个速度是符合苹果的CarPlay认证要求。</p><hr><h1 id="为什么USB2-0的实际传输速度远低于理论速度"><a href="#为什么USB2-0的实际传输速度远低于理论速度" class="headerlink" title="为什么USB2.0的实际传输速度远低于理论速度"></a>为什么USB2.0的实际传输速度远低于理论速度</h1><p>在<a href="http://wowothink.com/2018/05/17/Linux测试U盘读写速度/">Linux测试U盘读写速度</a>文章中，测试了USB2.0 U盘的读写速度，平均约为13MB/s。同样的，在Windwos上，我们拷贝USB2.0 U盘的内容，传输速度也才十几MB/s。这明显与USB2.0上写的480Mb/s = 60MB/s 有着很大的差距。关于为什么差距那么大，在 <a href="https://www.zhihu.com/question/20186057" target="_blank" rel="noopener">https://www.zhihu.com/question/20186057</a> 的文章已经写得很清楚了，在此进行了整理学习。</p><p>对于USB2.0，480Mbps是指总线的频率，也就说，总线信号每秒最多能传输这么多bit，这些信号包括控制信号和数据信号。USB2.0规范里给了一个公式，算传输时间的（算法解释就太复杂了，见USB Spec<code>USB2.0 5.11.3 Calculating Bus Transaction Times</code>的章节）：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">High-speed (Input)：Non-<span class="function">Isochronous <span class="title">Transfer</span> <span class="params">(Handshake Included)</span> </span>= (<span class="number">55</span> * <span class="number">8</span> * <span class="number">2.083</span>) + (<span class="number">2.083</span> * Floor(<span class="number">3.167</span> + BitStuffTime(Data_bc))) + Host_DelayBitStuffTime(Data_bc)</span><br></pre></td></tr></table></figure><p></p><p>这部分就是数据传输需要的时间，算起来麻烦，但是看到前面有一个2.083就能看出来，传输一个bit基本上需要2.083倍的时间，所以，简单的把480Mbps除以2.083，再转换成字节大概是：28.8MB/s，也就是说，最多就这么快，再刨除bulk-only模式里的那一堆堆的多余指令：一个包需要16个字节左右，Windows一次请求是4KB（可能是为了页对齐），再浪费掉1%左右的时间，以及host delay，也就是主机的校验延迟，那么实际速度就20多MB/s，不管是读还是写。</p><p>在<a href="https://superuser.com/questions/317217/whats-the-maximum-typical-speed-possible-with-a-usb2-0-drive" target="_blank" rel="noopener">https://superuser.com/questions/317217/whats-the-maximum-typical-speed-possible-with-a-usb2-0-drive</a> 中也解释了为啥USB的实际传输速度慢。</p><blockquote><p>Full-speed每1ms会传输一个SOF，也就是微帧；<br>High-speed每125us会传输一个SOF，相当于1ms传输8个微帧；<br>Bulk传输最大的包是512Bytes，理论上每个SOF可以传输13个包，那么理论上最大的传输速率为：<br>512Bytes <em>13微帧</em>8微帧/ms * 1000ms/s= 53248000Bytes/s = 53MB/s<br>USB控制器每个微帧仅允许8个或10个数据包，相当常见，分别产生41MB/s或33MB/s的峰值。</p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux USB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux USB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Makefile中添加打印语句</title>
      <link href="/6376cec7/"/>
      <url>/6376cec7/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>在makefile中添加打印信息的方法：</p><ul><li><p>打印字符串：<br><code>$(warning &quot;xxxxx&quot;)</code>或者<code>$(error &quot;xxxxx&quot;)</code></p></li><li><p>打印变量：<br><code>$(warning $(XXX))</code></p></li></ul><p>这个和<code>$(wildcard)</code>一样的。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 调试工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调试工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Kernel中有意思的函数命名</title>
      <link href="/b1216421/"/>
      <url>/b1216421/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>在Linux Kernel中某些特定含义的函数命令有自己的规律，比如这里将简单的介绍一下函数名前双下划线<code>__</code>和<code>devm_xxx</code>函数的意思。<a id="more"></a></p><h1 id="函数名称前的双下划线"><a href="#函数名称前的双下划线" class="headerlink" title="函数名称前的双下划线__"></a>函数名称前的双下划线<code>__</code></h1><ul><li><p>标记需要加锁：<br>在内核中，有很多函数，有的是需要调用者自己加锁保护的，有些是不需要加锁保护的。对于这些场景，linux kernel采取了统一的策略：基本函数名字是一样的，只不过需要调用者自己加锁保护的那个函数需要增加<code>__</code>的前缀，例如内核有有下面两个函数：<code>setup_irq()</code>和<code>__setup_irq()</code>。<br>两个函数在<code>kernel/irq/manage.c</code>中定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *setup_irq - setup an interrupt</span></span><br><span class="line"><span class="comment"> *@irq: Interrupt line to setup</span></span><br><span class="line"><span class="comment"> *@act: irqaction for the interrupt</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Used to statically setup interrupts in the early boot process.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setup_irq</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> irq, struct irqaction *act)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> retval;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">irq_desc</span> *<span class="title">desc</span> = <span class="title">irq_to_desc</span>(<span class="title">irq</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (WARN_ON(irq_settings_is_per_cpu_devid(desc)))</span><br><span class="line"><span class="keyword">return</span> -EINVAL;</span><br><span class="line">chip_bus_lock(desc);</span><br><span class="line">retval = __setup_irq(irq, desc, act);</span><br><span class="line">chip_bus_sync_unlock(desc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(setup_irq);</span><br></pre></td></tr></table></figure></li><li><p>标记更接近底层的调用<br>一般双下划线也用于标记更接近底层的调用，如<code>kernel/irq/manage.c</code>中的<code>__disable_irq_nosync()</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * disable_irq_nosync - disable an irq without waiting </span></span><br><span class="line"><span class="comment">* @irq: Interrupt to disable </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* Disable the selected interrupt line. Disables and Enables are </span></span><br><span class="line"><span class="comment">* nested. </span></span><br><span class="line"><span class="comment">* Unlike disable_irq(), this function does not ensure existing </span></span><br><span class="line"><span class="comment">* instances of the IRQ handler have completed before returning. </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* This function may be called from IRQ context. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disable_irq_nosync</span><span class="params">(unsignedint irq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">__disable_irq_nosync(irq);</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(disable_irq_nosync);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* disable_irq - disable an irq and wait for completion </span></span><br><span class="line"><span class="comment">* @irq: Interrupt to disable </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* Disable the selected interrupt line. Enables and Disables are </span></span><br><span class="line"><span class="comment">* nested. </span></span><br><span class="line"><span class="comment">* This function waits for any pending IRQ handlers for this interrupt </span></span><br><span class="line"><span class="comment">* to complete before returning. If you use this function while </span></span><br><span class="line"><span class="comment">* holding a resource the IRQ handler may need you will deadlock. </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* This function may be called - with care - from IRQ context. </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disable_irq</span><span class="params">(unsignedint irq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!__disable_irq_nosync(irq)) synchronize_irq(irq);</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(disable_irq);</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="devm-xxx-函数"><a href="#devm-xxx-函数" class="headerlink" title="devm_xxx 函数"></a>devm_xxx 函数</h1><p>下面列举一些常用的资源申请接口，它们由各个framework（如clock、regulator、gpio等等）基于<code>device resource management</code>实现。使用时，直接忽略<code>devm_</code>的前缀，后面剩下的部分，driver工程师都很熟悉。只需记住一点，driver可以只申请，不释放，设备模型会帮忙释放。不过如果为了严谨，在driver remove时，可以主动释放（也有相应的接口，这里没有列出）。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">externvoid*<span class="title">devm_kzalloc</span><span class="params">(struct device *dev,<span class="keyword">size_t</span> size, <span class="keyword">gfp_t</span> gfp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __<span class="function">iomem *<span class="title">devm_ioremap_resource</span><span class="params">(struct device *dev,struct resource *res)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __<span class="function">iomem *<span class="title">devm_ioremap</span><span class="params">(struct device *dev, <span class="keyword">resource_size_t</span> offset,unsignedlong size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">struct clk *<span class="title">devm_clk_get</span><span class="params">(struct device *dev,constchar*id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">devm_gpio_request</span><span class="params">(struct device *dev,<span class="keyword">unsigned</span> gpio,constchar*label)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> struct pinctrl * <span class="title">devm_pinctrl_get_select</span><span class="params">(struct device *dev,constchar*name)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> struct pwm_device *<span class="title">devm_pwm_get</span><span class="params">(struct device *dev,constchar*consumer)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">struct regulator *<span class="title">devm_regulator_get</span><span class="params">(struct device *dev,constchar*id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">devm_request_irq</span><span class="params">(struct device *dev,unsignedint irq, <span class="keyword">irq_handler_t</span> handler,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   unsignedlong irqflags,constchar*devname,<span class="keyword">void</span>*dev_id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">struct reset_control *<span class="title">devm_reset_control_get</span><span class="params">(struct device *dev,constchar*id)</span></span>;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux Kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>service一直无法启动原因</title>
      <link href="/c06c62b/"/>
      <url>/c06c62b/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>本文讲述在系统启动后，出现某个service一直启动失败，<code>init: process &#39;xxxservice&#39; killing any children in process group</code> log持续输出的问题。<a id="more"></a></p><hr><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>这几天在做启动分区挂载失败的话进行修复的对策。手动去破坏了<code>/data</code>分区，看看如果挂载失败，能否会通过<code>e2fsck</code>或者<code>mke2fs</code>进行修复。<br>在某一次debug的时候，发现串口每5s就输出尝试启动<code>xxxservice</code>但失败的log，类似的如下：<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[   56.260533] (!!) init: starting 'xxxservice'</span><br><span class="line">[   56.265197] (EE) init: cannot execve('system/sbin/xxxservice'): Permission denied</span><br><span class="line">[   <span class="number">56.272789</span>] (!!) init: waitpid returned pid <span class="number">1202</span>, status = <span class="number">00007f</span>00</span><br><span class="line">[   56.279094] (!!) init: process 'xxxservice', pid 1202 exited</span><br><span class="line">[   56.284598] (!!) init: process 'xxxservice' killing any children in process group</span><br></pre></td></tr></table></figure><p></p><p>那会儿就纳闷为啥这个<code>xxxservice</code>老是启动不起来。后面才知道这个service在<code>init.rc</code>是按照这种方式启动的：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service klogd /system/usr/bin/xxxservice -s /data/xxx_log</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">main</span></span></span><br><span class="line"><span class="class">    <span class="title">user</span> <span class="title">root</span></span></span><br><span class="line"><span class="class">    <span class="title">group</span> <span class="title">root</span></span></span><br></pre></td></tr></table></figure><p></p><p>在<code>xxxservice</code>里面会去尝试打开<code>/data/xxx_log</code>文件，但是<code>/data</code>分区已经被我破坏了没修复，所以打开<code>/data/xxx_log</code>文件会失败，进而导致整个service启动失败。<br>由于在<code>init.rc</code>中不是以<code>oneshot</code>选项启动的，所以<code>xxxservice</code>会一直尝试启动。根据上述的内容，写了以下程序进行验证。</p><hr><h1 id="验证程序"><a href="#验证程序" class="headerlink" title="验证程序"></a>验证程序</h1><p><code>testservice</code>测试程序如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>init.rc</code>启动<code>testservice</code>内容如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service testservice /system/sbin/testservice</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">main</span></span></span><br><span class="line"><span class="class">    <span class="title">user</span> <span class="title">root</span></span></span><br><span class="line"><span class="class">    <span class="title">group</span> <span class="title">root</span></span></span><br></pre></td></tr></table></figure><p></p><p>按照上述的测试程序，启动后串口会一直打印如下内容：<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@xxx_project:/ # [   66.333603] (!!) init: starting 'testservice'</span><br><span class="line">[   <span class="number">66.343070</span>] (!!) init: waitpid returned pid <span class="number">1210</span>, status = <span class="number">0000f</span>f00</span><br><span class="line">[   66.349405] (!!) init: process 'testservice', pid 1210 exited</span><br><span class="line">[   66.354909] (!!) init: process 'testservice' killing any children in process group</span><br><span class="line"></span><br><span class="line">@xxx_project:/ # [   71.367372] (!!) init: starting 'testservice'</span><br><span class="line">[   <span class="number">71.373704</span>] (!!) init: waitpid returned pid <span class="number">1212</span>, status = <span class="number">0000f</span>f00</span><br><span class="line">[   71.380018] (!!) init: process 'testservice', pid 1212 exited</span><br><span class="line">[   71.385532] (!!) init: process 'testservice' killing any children in process group</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>最最根本的解决办法是修改service的内容，保证service能够正常的启动。另外，需要修改<code>init.rc</code>，以<code>oneshot</code>的方式进行启动。因为如果其中的某个service一直无法正常启动，那么会一直尝试启动，导致它后面的service都无法启动到。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 碰到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碰到的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Kernel裁剪--ksize的使用</title>
      <link href="/42532517/"/>
      <url>/42532517/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>在<a href="http://wowothink.com/2018/05/02/Linux%20Kernel%E8%A3%81%E5%89%AA--menuconfig%E7%9A%84%E4%BD%BF%E7%94%A8/">Linux Kernel裁剪–menuconfig的使用</a>文章中我们讲了使用menuconfig来做Kernel的裁剪。<br>在yocto项目中提供了一个<code>ksize.py</code>的脚本，可以输出当前编译中所有模块的大小，通过这些大小信息，我们可以决定裁剪哪个模块。<a id="more"></a></p><hr><h1 id="ksize-py介绍"><a href="#ksize-py介绍" class="headerlink" title="ksize.py介绍"></a>ksize.py介绍</h1><p>在yocto项目中的<code>sources/poky/scripts/tiny/</code>目录下有<code>ksize.py</code>和<code>dirsize.py</code>两个文件。功能分别如下：</p><ul><li><code>ksize.py</code>：Display details of the kernel build size, broken up by built-in.o. Sort the objects by size. Run from the top level kernel build directory.</li><li><code>dirsize.py</code>：Display details of the root filesystem size, broken up by directory.Allows for limiting by size to focus on the larger files.</li></ul><hr><h1 id="ksize-py使用"><a href="#ksize-py使用" class="headerlink" title="ksize.py使用"></a>ksize.py使用</h1><p>使用在kernel目录下执行<code>#python ksize.py</code>，可以获得如下降序的输出，根据这些内容，我们可以知道当前系统编译了哪些模块。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line">Linux Kernel                          total |       text       data        bss</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">vmlinux                             <span class="number">9907245</span> |    <span class="number">7075717</span>    <span class="number">2558244</span>     <span class="number">273284</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">drivers/built-in.o                  <span class="number">3663728</span> |    <span class="number">3381077</span>     <span class="number">239019</span>      <span class="number">43632</span></span><br><span class="line">net/built-in.o                      <span class="number">1353193</span> |    <span class="number">1220555</span>      <span class="number">76062</span>      <span class="number">56576</span></span><br><span class="line">fs/built-in.o                       <span class="number">1221940</span> |    <span class="number">1185451</span>      <span class="number">13489</span>      <span class="number">23000</span></span><br><span class="line">kernel/built-in.o                   <span class="number">1007639</span> |     <span class="number">844380</span>      <span class="number">85751</span>      <span class="number">77508</span></span><br><span class="line">mm/built-in.o                        <span class="number">614522</span> |     <span class="number">540485</span>      <span class="number">43449</span>      <span class="number">30588</span></span><br><span class="line">sound/built-in.o                     <span class="number">230541</span> |     <span class="number">224237</span>       <span class="number">3080</span>       <span class="number">3224</span></span><br><span class="line">block/built-in.o                     <span class="number">216496</span> |     <span class="number">207289</span>       <span class="number">6295</span>       <span class="number">2912</span></span><br><span class="line">lib/built-in.o                       <span class="number">166456</span> |     <span class="number">163392</span>        <span class="number">656</span>       <span class="number">2408</span></span><br><span class="line">crypto/built-in.o                    <span class="number">121022</span> |     <span class="number">101636</span>       <span class="number">7994</span>      <span class="number">11392</span></span><br><span class="line">security/built-in.o                   <span class="number">70354</span> |      <span class="number">64343</span>       <span class="number">5395</span>        <span class="number">616</span></span><br><span class="line">ipc/built-in.o                        <span class="number">60459</span> |      <span class="number">58445</span>       <span class="number">1990</span>         <span class="number">24</span></span><br><span class="line">init/built-in.o                       <span class="number">44249</span> |      <span class="number">14768</span>      <span class="number">29329</span>        <span class="number">152</span></span><br><span class="line">usr/built-in.o                          <span class="number">142</span> |        <span class="number">142</span>          <span class="number">0</span>          <span class="number">0</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">sum                                 <span class="number">8770741</span> |    <span class="number">8006200</span>     <span class="number">512509</span>     <span class="number">252032</span></span><br><span class="line">delta                               <span class="number">1136504</span> |    <span class="number">-930483</span>    <span class="number">2045735</span>      <span class="number">21252</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">drivers                               total |       text       data        bss</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">drivers/built-in.o                  <span class="number">3663728</span> |    <span class="number">3381077</span>     <span class="number">239019</span>      <span class="number">43632</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">drivers/gpu/built-in.o               <span class="number">500404</span> |     <span class="number">494182</span>       <span class="number">5922</span>        <span class="number">300</span></span><br><span class="line">drivers/usb/built-in.o               <span class="number">432817</span> |     <span class="number">397803</span>      <span class="number">32054</span>       <span class="number">2960</span></span><br><span class="line">drivers/mxc/built-in.o               <span class="number">361344</span> |     <span class="number">268907</span>      <span class="number">80141</span>      <span class="number">12296</span></span><br><span class="line">drivers/media/built-in.o             <span class="number">279867</span> |     <span class="number">270194</span>       <span class="number">7329</span>       <span class="number">2344</span></span><br><span class="line">drivers/base/built-in.o              <span class="number">210668</span> |     <span class="number">201892</span>       <span class="number">7864</span>        <span class="number">912</span></span><br><span class="line">drivers/scsi/built-in.o              <span class="number">183594</span> |     <span class="number">167352</span>      <span class="number">15434</span>        <span class="number">808</span></span><br><span class="line">drivers/mmc/built-in.o               <span class="number">172884</span> |     <span class="number">169155</span>       <span class="number">3577</span>        <span class="number">152</span></span><br><span class="line">drivers/clk/built-in.o               <span class="number">155525</span> |     <span class="number">141697</span>       <span class="number">3316</span>      <span class="number">10512</span></span><br><span class="line">drivers/tty/built-in.o               <span class="number">111335</span> |     <span class="number">108328</span>       <span class="number">2287</span>        <span class="number">720</span></span><br><span class="line">drivers/video/built-in.o             <span class="number">105953</span> |      <span class="number">92697</span>      <span class="number">13112</span>        <span class="number">144</span></span><br><span class="line">drivers/mtd/built-in.o                <span class="number">79980</span> |      <span class="number">76361</span>       <span class="number">2587</span>       <span class="number">1032</span></span><br><span class="line">drivers/staging/built-in.o            <span class="number">77356</span> |      <span class="number">75824</span>       <span class="number">1452</span>         <span class="number">80</span></span><br><span class="line">drivers/cpufreq/built-in.o            <span class="number">68940</span> |      <span class="number">63435</span>       <span class="number">4761</span>        <span class="number">744</span></span><br><span class="line">drivers/net/built-in.o                <span class="number">62838</span> |      <span class="number">60347</span>       <span class="number">2426</span>         <span class="number">65</span></span><br><span class="line">drivers/i2c/built-in.o                <span class="number">59472</span> |      <span class="number">56958</span>       <span class="number">2402</span>        <span class="number">112</span></span><br><span class="line">drivers/pinctrl/built-in.o            <span class="number">58007</span> |      <span class="number">56414</span>       <span class="number">1521</span>         <span class="number">72</span></span><br><span class="line">drivers/regulator/built-in.o          <span class="number">51426</span> |      <span class="number">48498</span>       <span class="number">2400</span>        <span class="number">528</span></span><br><span class="line">drivers/of/built-in.o                 <span class="number">48692</span> |      <span class="number">47133</span>        <span class="number">587</span>        <span class="number">972</span></span><br><span class="line">drivers/android/built-in.o            <span class="number">47364</span> |      <span class="number">44240</span>        <span class="number">276</span>       <span class="number">2848</span></span><br><span class="line">drivers/gpio/built-in.o               <span class="number">46591</span> |      <span class="number">45139</span>       <span class="number">1376</span>         <span class="number">76</span></span><br><span class="line">drivers/iommu/built-in.o              <span class="number">42756</span> |      <span class="number">41484</span>       <span class="number">1152</span>        <span class="number">120</span></span><br><span class="line">drivers/thermal/built-in.o            <span class="number">40615</span> |      <span class="number">38166</span>       <span class="number">2241</span>        <span class="number">208</span></span><br><span class="line">drivers/spi/built-in.o                <span class="number">39915</span> |      <span class="number">36670</span>       <span class="number">3221</span>         <span class="number">24</span></span><br><span class="line">drivers/input/built-in.o              <span class="number">38894</span> |      <span class="number">37246</span>       <span class="number">1584</span>         <span class="number">64</span></span><br><span class="line">drivers/irqchip/built-in.o            <span class="number">30444</span> |      <span class="number">25846</span>       <span class="number">4270</span>        <span class="number">328</span></span><br><span class="line">drivers/dma/built-in.o                <span class="number">28445</span> |      <span class="number">27411</span>        <span class="number">858</span>        <span class="number">176</span></span><br><span class="line">drivers/rpmsg/built-in.o              <span class="number">26968</span> |      <span class="number">13559</span>      <span class="number">13393</span>         <span class="number">16</span></span><br><span class="line">drivers/phy/built-in.o                <span class="number">25168</span> |      <span class="number">24163</span>        <span class="number">940</span>         <span class="number">65</span></span><br><span class="line">drivers/<span class="keyword">char</span>/built-in.o               <span class="number">24712</span> |      <span class="number">22176</span>       <span class="number">1736</span>        <span class="number">800</span></span><br><span class="line">drivers/soc/built-in.o                <span class="number">22102</span> |      <span class="number">19109</span>        <span class="number">568</span>       <span class="number">2425</span></span><br><span class="line">drivers/dma-buf/built-in.o            <span class="number">21025</span> |      <span class="number">20909</span>         <span class="number">44</span>         <span class="number">72</span></span><br><span class="line">drivers/rtc/built-in.o                <span class="number">19366</span> |      <span class="number">18614</span>        <span class="number">624</span>        <span class="number">128</span></span><br><span class="line">drivers/block/built-in.o              <span class="number">15040</span> |      <span class="number">14118</span>        <span class="number">818</span>        <span class="number">104</span></span><br><span class="line">drivers/cpuidle/built-in.o            <span class="number">13908</span> |      <span class="number">11523</span>       <span class="number">2345</span>         <span class="number">40</span></span><br><span class="line">drivers/extcon/built-in.o             <span class="number">13586</span> |      <span class="number">12130</span>       <span class="number">1440</span>         <span class="number">16</span></span><br><span class="line">drivers/power/built-in.o              <span class="number">13141</span> |      <span class="number">10037</span>       <span class="number">2504</span>        <span class="number">600</span></span><br><span class="line">drivers/watchdog/built-in.o           <span class="number">12937</span> |      <span class="number">12379</span>        <span class="number">477</span>         <span class="number">81</span></span><br><span class="line">drivers/virtio/built-in.o             <span class="number">12490</span> |      <span class="number">12049</span>        <span class="number">393</span>         <span class="number">48</span></span><br><span class="line">drivers/perf/built-in.o               <span class="number">12364</span> |      <span class="number">10090</span>       <span class="number">2218</span>         <span class="number">56</span></span><br><span class="line">drivers/pwm/built-in.o                <span class="number">12183</span> |      <span class="number">11103</span>        <span class="number">952</span>        <span class="number">128</span></span><br><span class="line">drivers/firmware/built-in.o           <span class="number">10940</span> |      <span class="number">10251</span>        <span class="number">601</span>         <span class="number">88</span></span><br><span class="line">drivers/clocksource/built-in.o         <span class="number">9421</span> |       <span class="number">8462</span>        <span class="number">839</span>        <span class="number">120</span></span><br><span class="line">drivers/hwmon/built-in.o               <span class="number">9066</span> |       <span class="number">8498</span>        <span class="number">520</span>         <span class="number">48</span></span><br><span class="line">drivers/nvmem/built-in.o               <span class="number">8857</span> |       <span class="number">7881</span>        <span class="number">928</span>         <span class="number">48</span></span><br><span class="line">drivers/amba/built-in.o                <span class="number">5628</span> |       <span class="number">5124</span>        <span class="number">504</span>          <span class="number">0</span></span><br><span class="line">drivers/reset/built-in.o               <span class="number">4647</span> |       <span class="number">3967</span>        <span class="number">680</span>          <span class="number">0</span></span><br><span class="line">drivers/mailbox/built-in.o             <span class="number">4551</span> |       <span class="number">4295</span>        <span class="number">256</span>          <span class="number">0</span></span><br><span class="line">drivers/spmi/built-in.o                <span class="number">4299</span> |       <span class="number">4082</span>        <span class="number">168</span>         <span class="number">49</span></span><br><span class="line">drivers/misc/built-in.o                <span class="number">3333</span> |       <span class="number">3149</span>        <span class="number">184</span>          <span class="number">0</span></span><br><span class="line">drivers/mfd/built-in.o                 <span class="number">2122</span> |       <span class="number">1910</span>        <span class="number">208</span>          <span class="number">4</span></span><br><span class="line">drivers/ras/built-in.o                  <span class="number">608</span> |        <span class="number">584</span>          <span class="number">8</span>         <span class="number">16</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">sum                                 <span class="number">3655144</span> |    <span class="number">3373641</span>     <span class="number">237930</span>      <span class="number">43573</span></span><br><span class="line">delta                                  <span class="number">8584</span> |       <span class="number">7436</span>       <span class="number">1089</span>         <span class="number">59</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net                                   total |       text       data        bss</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">net/built-in.o                      <span class="number">1353193</span> |    <span class="number">1220555</span>      <span class="number">76062</span>      <span class="number">56576</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">net/ipv4/built-in.o                  <span class="number">469015</span> |     <span class="number">417817</span>      <span class="number">26198</span>      <span class="number">25000</span></span><br><span class="line">net/ipv6/built-in.o                  <span class="number">316158</span> |     <span class="number">279174</span>      <span class="number">15700</span>      <span class="number">21284</span></span><br><span class="line">net/core/built-in.o                  <span class="number">304912</span> |     <span class="number">284889</span>      <span class="number">16287</span>       <span class="number">3736</span></span><br><span class="line">net/llc/built-in.o                    <span class="number">63390</span> |      <span class="number">50366</span>      <span class="number">12000</span>       <span class="number">1024</span></span><br><span class="line">net/xfrm/built-in.o                   <span class="number">53804</span> |      <span class="number">52100</span>        <span class="number">880</span>        <span class="number">824</span></span><br><span class="line">net<span class="comment">/*.o                               38792 |      37932        756        104</span></span><br><span class="line"><span class="comment">net/netlink/built-in.o                31723 |      30596        827        300</span></span><br><span class="line"><span class="comment">net/packet/built-in.o                 29162 |      28633        529          0</span></span><br><span class="line"><span class="comment">net/unix/built-in.o                   27576 |      22811        640       4125</span></span><br><span class="line"><span class="comment">net/sched/built-in.o                   9863 |       8326       1537          0</span></span><br><span class="line"><span class="comment">net/dns_resolver/built-in.o            3734 |       3574        144         16</span></span><br><span class="line"><span class="comment">net/ethernet/built-in.o                2806 |       2726         80          0</span></span><br><span class="line"><span class="comment">net/802/built-in.o                     1484 |       1384         88         12</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">sum                                 1352419 |    1220328      75666      56425</span></span><br><span class="line"><span class="comment">delta                                   774 |        227        396        151</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">fs                                    total |       text       data        bss</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">fs/built-in.o                       1221940 |    1185451      13489      23000</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">fs/*.o                               458917 |     436661       5680      16576</span></span><br><span class="line"><span class="comment">fs/ext4/built-in.o                   333360 |     330151       2089       1120</span></span><br><span class="line"><span class="comment">fs/proc/built-in.o                   100347 |      99489        698        160</span></span><br><span class="line"><span class="comment">fs/fat/built-in.o                     56932 |      56692        184         56</span></span><br><span class="line"><span class="comment">fs/jbd2/built-in.o                    55802 |      55581        101        120</span></span><br><span class="line"><span class="comment">fs/ext2/built-in.o                    46214 |      46126         80          8</span></span><br><span class="line"><span class="comment">fs/quota/built-in.o                   32170 |      30297       1489        384</span></span><br><span class="line"><span class="comment">fs/kernfs/built-in.o                  24769 |      20450        191       4128</span></span><br><span class="line"><span class="comment">fs/notify/built-in.o                  24246 |      23522        516        208</span></span><br><span class="line"><span class="comment">fs/debugfs/built-in.o                 22506 |      22186        304         16</span></span><br><span class="line"><span class="comment">fs/configfs/built-in.o                21240 |      20759        449         32</span></span><br><span class="line"><span class="comment">fs/nls/built-in.o                     14765 |      14529        232          4</span></span><br><span class="line"><span class="comment">fs/hugetlbfs/built-in.o               10352 |      10243         65         44</span></span><br><span class="line"><span class="comment">fs/sysfs/built-in.o                    9026 |       8943         59         24</span></span><br><span class="line"><span class="comment">fs/devpts/built-in.o                   4126 |       3489        629          8</span></span><br><span class="line"><span class="comment">fs/ramfs/built-in.o                    2648 |       2576         64          8</span></span><br><span class="line"><span class="comment">fs/exportfs/built-in.o                 2576 |       2575          1          0</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">sum                                 1219996 |    1184269      12831      22896</span></span><br><span class="line"><span class="comment">delta                                  1944 |       1182        658        104</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">kernel                                total |       text       data        bss</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">kernel/built-in.o                   1007639 |     844380      85751      77508</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">kernel/*.o                           478489 |     403442      40281      34766</span></span><br><span class="line"><span class="comment">kernel/sched/built-in.o              142040 |     123170      16198       2672</span></span><br><span class="line"><span class="comment">kernel/time/built-in.o               112568 |      90159      15113       7296</span></span><br><span class="line"><span class="comment">kernel/events/built-in.o              76317 |      72106       3615        596</span></span><br><span class="line"><span class="comment">kernel/irq/built-in.o                 56272 |      52350       1782       2140</span></span><br><span class="line"><span class="comment">kernel/printk/built-in.o              49827 |      20187        416      29224</span></span><br><span class="line"><span class="comment">kernel/rcu/built-in.o                 40706 |      34826       5834         46</span></span><br><span class="line"><span class="comment">kernel/locking/built-in.o             21259 |      21226         29          4</span></span><br><span class="line"><span class="comment">kernel/power/built-in.o               17474 |      15685       1573        216</span></span><br><span class="line"><span class="comment">kernel/bpf/built-in.o                 11262 |      10786        108        368</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">sum                                 1006214 |     843937      84949      77328</span></span><br><span class="line"><span class="comment">delta                                  1425 |        443        802        180</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">sound                                 total |       text       data        bss</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">sound/built-in.o                     230541 |     224237       3080       3224</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">sound/core/built-in.o                132362 |     127598       1788       2976</span></span><br><span class="line"><span class="comment">sound/soc/built-in.o                  97681 |      96177       1264        240</span></span><br><span class="line"><span class="comment">sound/*.o                               774 |        718         40         16</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">sum                                  230817 |     224493       3092       3232</span></span><br><span class="line"><span class="comment">delta                                  -276 |       -256        -12         -8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">block                                 total |       text       data        bss</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">block/built-in.o                     216496 |     207289       6295       2912</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">block/*.o                            208934 |     199767       6263       2904</span></span><br><span class="line"><span class="comment">block/partitions/built-in.o            7370 |       7338         28          4</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">sum                                  216304 |     207105       6291       2908</span></span><br><span class="line"><span class="comment">delta                                   192 |        184          4          4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">lib                                   total |       text       data        bss</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">lib/built-in.o                       166456 |     163392        656       2408</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">lib/*.o                              217281 |     215730       1397        154</span></span><br><span class="line"><span class="comment">lib/zlib_deflate/built-in.o           17683 |      15299         96       2288</span></span><br><span class="line"><span class="comment">lib/zlib_inflate/built-in.o           12196 |      12196          0          0</span></span><br><span class="line"><span class="comment">lib/lzo/built-in.o                     3259 |       3259          0          0</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">sum                                  250419 |     246484       1493       2442</span></span><br><span class="line"><span class="comment">delta                                -83963 |     -83092       -837        -34</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">security                              total |       text       data        bss</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">security/built-in.o                   70354 |      64343       5395        616</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">security/keys/built-in.o              36035 |      33971       1480        584</span></span><br><span class="line"><span class="comment">security/*.o                          33076 |      29165       3899         12</span></span><br><span class="line"><span class="comment">security/integrity/built-in.o          1207 |       1175         16         16</span></span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">sum                                   70318 |      64311       5395        612</span></span><br><span class="line"><span class="comment">delta                                    36 |         32          0          4</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux Kernel优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用wifi连接adb</title>
      <link href="/45d0a602/"/>
      <url>/45d0a602/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p><strong>背景</strong>：<br>客户有个TBox需要与我们的车机相连，通过USB将TBox的画面投到车机，车机枚举TBox为<code>cdc ncm</code>的网卡设备。为了测试网络带宽，需要在车机和TBox上安装<code>iperf</code>工具。然后分别做<code>server</code>和<code>client</code>启动<code>iperf</code>。但是只有一个USB口没法同时做adb和<code>cdc ncm</code>网卡设备，所以想到使用wifi连接adb。下文以一台vivo的Android手机进行测试，步骤如下：<a id="more"></a></p><hr><h1 id="使用USB线连接adb"><a href="#使用USB线连接adb" class="headerlink" title="使用USB线连接adb"></a>使用USB线连接adb</h1><p><code>adb devices</code>显示的结果如下。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\asus&gt;adb devices</span><br><span class="line">List of devices attached</span><br><span class="line"><span class="number">9318</span>ca5d        device</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\asus&gt;</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="设置端口号为5555"><a href="#设置端口号为5555" class="headerlink" title="设置端口号为5555"></a>设置端口号为5555</h1><p>使用<code>adb tcpip 5555</code>命令。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\asus&gt;adb tcpip <span class="number">5555</span></span><br><span class="line">restarting in TCP mode port: <span class="number">5555</span></span><br><span class="line"></span><br><span class="line">C:\Users\asus&gt;</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="获取ip地址"><a href="#获取ip地址" class="headerlink" title="获取ip地址"></a>获取ip地址</h1><p>前提条件是将手机通过wifi连接到与电脑的同一网络，之后通过<code>adb shell netcfg</code>获取<code>wlan0</code>的ip地址。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\asus&gt;adb shell netcfg</span><br><span class="line">rmnet_data6 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">rmnet_data5 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">rmnet_data7 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">rmnet_data0 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">rmnet_data1 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">rmnet_data3 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">rmnet_data2 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">rmnet_data4 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">rmnet3   DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00001002</span> <span class="number">2</span>e:f8:<span class="number">06</span>:<span class="number">3f</span>:<span class="number">97</span>:<span class="number">26</span></span><br><span class="line">rmnet2   DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00001002</span> de:<span class="number">4</span>a:a3:<span class="number">36</span>:<span class="number">67</span>:<span class="number">30</span></span><br><span class="line">rmnet4   DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00001002</span> <span class="number">82</span>:<span class="number">7f</span>:<span class="number">6</span>d:<span class="number">5</span>d:<span class="number">7</span>a:<span class="number">50</span></span><br><span class="line">rmnet6   DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00001002</span> <span class="number">2</span>a:<span class="number">5b</span>:<span class="number">7b</span>:b6:<span class="number">26</span>:<span class="number">3</span>d</span><br><span class="line">rmnet5   DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00001002</span> <span class="number">92</span>:fd:ed:cd:d6:<span class="number">11</span></span><br><span class="line">rmnet7   DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00001002</span> ca:<span class="number">6</span>c:e9:e6:<span class="number">9</span>a:d8</span><br><span class="line">rmnet0   UP                                     <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000041</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">rmnet1   DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00001002</span> aa:d6:<span class="number">58</span>:<span class="number">44</span>:db:<span class="number">1</span>c</span><br><span class="line">r_rmnet_data6 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">r_rmnet_data5 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">r_rmnet_data7 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">r_rmnet_data8 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">r_rmnet_data0 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">r_rmnet_data2 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">r_rmnet_data1 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">r_rmnet_data3 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">r_rmnet_data4 DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000000</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">dummy0   DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000082</span> <span class="number">7</span>a:<span class="number">79</span>:<span class="number">02</span>:<span class="number">17</span>:df:<span class="number">77</span></span><br><span class="line">sit0     DOWN                                   <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00000080</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">p2p0     UP                                     <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">0</span>   <span class="number">0x00001003</span> c6:<span class="number">66</span>:<span class="number">99</span>:d8:<span class="number">29</span>:<span class="number">65</span></span><br><span class="line">lo       UP                                   <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">8</span>   <span class="number">0x00000049</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">wlan0    UP                                <span class="number">192.168</span><span class="number">.1</span><span class="number">.14</span>/<span class="number">24</span>  <span class="number">0x00001043</span> c4:<span class="number">66</span>:<span class="number">99</span>:d8:<span class="number">29</span>:<span class="number">65</span></span><br><span class="line"></span><br><span class="line">C:\Users\asus&gt;</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="断开USB连接"><a href="#断开USB连接" class="headerlink" title="断开USB连接"></a>断开USB连接</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\asus&gt;adb devices</span><br><span class="line">List of devices attached</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\asus&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="通过wifi连接adb"><a href="#通过wifi连接adb" class="headerlink" title="通过wifi连接adb"></a>通过wifi连接adb</h1><p>使用<code>adb connect ip_addr:port</code>命令通过wifi连接adb，这里使用如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\asus&gt;adb connect <span class="number">192.168</span><span class="number">.1</span><span class="number">.14</span>:<span class="number">5555</span></span><br><span class="line">connected to <span class="number">192.168</span><span class="number">.1</span><span class="number">.14</span>:<span class="number">5555</span></span><br><span class="line"></span><br><span class="line">C:\Users\asus&gt;</span><br></pre></td></tr></table></figure><p></p><p>之后<code>adb devices</code>就可以看到使用wifi连接adb的连接情况了，后面就可以使用adb常见的命令了。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\asus&gt;adb devices</span><br><span class="line">List of devices attached</span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.14</span>:<span class="number">5555</span>       device</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\asus&gt;</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="断开wifi连接adb"><a href="#断开wifi连接adb" class="headerlink" title="断开wifi连接adb"></a>断开wifi连接adb</h1><p>使用<code>adb disconnect ip_addr</code>命令断开已连接adb。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\asus&gt;adb disconnect <span class="number">192.168</span><span class="number">.1</span><span class="number">.14</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\asus&gt;</span><br><span class="line">C:\Users\asus&gt;adb devices</span><br><span class="line">List of devices attached</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\asus&gt;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 调试工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调试工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux驱动中配置支持特定USB HUB</title>
      <link href="/68203a0/"/>
      <url>/68203a0/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>本文主要讲述在Linux中配置打开或关闭USB HUB功能。<a id="more"></a></p><hr><h1 id="支持特定的USB-HUB"><a href="#支持特定的USB-HUB" class="headerlink" title="支持特定的USB HUB"></a>支持特定的USB HUB</h1><p>在<code>&lt;kernel_dir&gt;/drivers/usb/core/hub.c</code>中的<code>hub_probe()</code>函数添加以下代码：<br>主要是通过pid和vid来进行过滤判断。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (hdev-&gt;parent) &#123;</span><br><span class="line">        printk(<span class="string">"busnum = %d, level = %d, vid = 0x%x, pid = 0x%x"</span>, </span><br><span class="line">            hdev-&gt;bus-&gt;busnum, hdev-&gt;level, hdev-&gt;descriptor.idVendor, hdev-&gt;descriptor.idProduct);</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">2</span> == hdev-&gt;bus-&gt;busnum) &amp;&amp; (<span class="number">1</span> == hdev-&gt;level)</span><br><span class="line">            &amp;&amp; ((<span class="number">0x214b</span> == hdev-&gt;descriptor.idVendor)</span><br><span class="line">            &amp;&amp; (<span class="number">0x7000</span> == hdev-&gt;descriptor.idProduct))) &#123;</span><br><span class="line">            printk(<span class="string">"USB bus%d support level%d port%d external usb hub\n"</span>,</span><br><span class="line">                    hdev-&gt;bus-&gt;busnum, hdev-&gt;level, hdev-&gt;portnum);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            printk(<span class="string">"USB bus%d ignore level%d port%d external hub\n"</span>,</span><br><span class="line">                hdev-&gt;bus-&gt;busnum, hdev-&gt;level, hdev-&gt;portnum);</span><br><span class="line">            <span class="keyword">return</span> -ENODEV;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>插入特定的USB HUB，打印的log如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[   <span class="number">13.913019</span>] usb <span class="number">2</span><span class="number">-1</span>: <span class="keyword">new</span> high-speed USB device number <span class="number">2</span> <span class="keyword">using</span> xxx-ehci</span><br><span class="line">[   <span class="number">14.050973</span>] busnum = <span class="number">2</span>, level = <span class="number">1</span>, vid = <span class="number">0x214b</span>, pid = <span class="number">0x7000</span>USB bus2 support level1 port1 external usb hub</span><br><span class="line">[   <span class="number">14.060826</span>] hub <span class="number">2</span><span class="number">-1</span>:<span class="number">1.0</span>: USB hub found</span><br><span class="line">[   <span class="number">14.069704</span>] hub <span class="number">2</span><span class="number">-1</span>:<span class="number">1.0</span>: <span class="number">4</span> ports detected</span><br></pre></td></tr></table></figure><p></p><p>插入其他的USB HUB，打印log如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[  <span class="number">326.481019</span>] usb <span class="number">2</span><span class="number">-1</span>: <span class="keyword">new</span> high-speed USB device number <span class="number">3</span> <span class="keyword">using</span> xxx-ehci</span><br><span class="line">[  <span class="number">326.635857</span>] busnum = <span class="number">2</span>, level = <span class="number">1</span>, vid = <span class="number">0xbda</span>, pid = <span class="number">0x5411</span>USB bus2 ignore level1 port1 external hub</span><br></pre></td></tr></table></figure><p></p><p>这里的<code>hdev</code>变量用<code>struct usb_device</code>来表示，说明USB HUB本身也是属于USB设备。</p><ul><li><code>hdev-&gt;parent</code>：该成员用来判断这个USB设备不是ROOT HUB；</li><li><code>hdev-&gt;bus-&gt;busnum</code>：表示当前处于哪个USB总线，更一般的说是哪个控制器控制的USB口；</li><li><code>hdev-&gt;level</code>：表示当前的设备处于哪一层。ROOT HUB为第0层；</li><li><code>hdev-&gt;descriptor.idVendor</code>：设备的VID；</li><li><code>hdev-&gt;descriptor.idProduct</code>：设备的PID；</li></ul><p>采用上面的方式是<font color="red">已正确完全枚举了一个USB HUB的USB设备，然后hub_probe()中将其他的USB HUB给过滤掉，使之不加载hub驱动。</font><br>我们接下来采用另外一种方式过滤USB HUB。</p><hr><h1 id="在枚举阶段过滤USB-HUB"><a href="#在枚举阶段过滤USB-HUB" class="headerlink" title="在枚举阶段过滤USB HUB"></a>在枚举阶段过滤USB HUB</h1><p>在枚举阶段中获取到设备描述符之后，我们就已经知道该USB设备的pid和vid了，此时就可以进行过滤。<br>在<code>&lt;kernel_dir&gt;/drivers/usb/core/hub.c</code>中的<code>usb_enumerate_device()</code>函数调用<code>usb_get_configuration()</code>之后添加以下代码：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">printk(<span class="string">"in %s, line = %d, level =%d, vid = 0x%x, pid = 0x%x, DeviceClass = 0x%x\n"</span>,</span><br><span class="line">    __FUNCTION__,__LINE__, udev-&gt;level, udev-&gt;descriptor.idVendor, </span><br><span class="line">udev-&gt;descriptor.idProduct, udev-&gt;descriptor.bDeviceClass);</span><br><span class="line">    <span class="keyword">if</span> ((USB_CLASS_HUB == udev-&gt;descriptor.bDeviceClass)</span><br><span class="line">        &amp;&amp; (<span class="number">0x214b</span> == udev-&gt;descriptor.idVendor)</span><br><span class="line">        &amp;&amp; (<span class="number">0x700</span> == udev-&gt;descriptor.idProduct)) &#123;</span><br><span class="line">        printk(<span class="string">"ignore this USB HUB\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> -ENOTSUPP;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>这个方法是当枚举到特定的USB设备，那么就返回出错，表示该设备不能正常枚举。因此，得到的log如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[   <span class="number">57.233188</span>] usb <span class="number">2</span><span class="number">-1</span>: <span class="keyword">new</span> high-speed USB device number <span class="number">3</span> <span class="keyword">using</span> xxx-ehci</span><br><span class="line">[   <span class="number">57.373818</span>] in usb_enumerate_device, line = <span class="number">2439</span>, level =<span class="number">1</span>, vid = <span class="number">0x214b</span>, pid = <span class="number">0x7000</span>, DeviceClass = <span class="number">0x9</span></span><br><span class="line">[   <span class="number">57.383445</span>] ignore <span class="keyword">this</span> USB HUB</span><br><span class="line">[   <span class="number">57.389030</span>] hub <span class="number">2</span><span class="number">-0</span>:<span class="number">1.0</span>: unable to enumerate USB device on port <span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><p>插入其他的USB HUB设备，得到的log如下，表示可以正常被枚举：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[  <span class="number">270.948984</span>] usb <span class="number">2</span><span class="number">-1</span>: <span class="keyword">new</span> high-speed USB device number <span class="number">4</span> <span class="keyword">using</span> xxx-ehci</span><br><span class="line">[  <span class="number">271.099910</span>] in usb_enumerate_device, line = <span class="number">2439</span>, level =<span class="number">1</span>, vid = <span class="number">0xbda</span>, pid = <span class="number">0x5411</span>, DeviceClass = <span class="number">0x9</span></span><br><span class="line">[  <span class="number">271.121961</span>] hub <span class="number">2</span><span class="number">-1</span>:<span class="number">1.0</span>: USB hub found</span><br><span class="line">[  <span class="number">271.127805</span>] hub <span class="number">2</span><span class="number">-1</span>:<span class="number">1.0</span>: <span class="number">4</span> ports detected</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="完全不开放USB-HUB功能"><a href="#完全不开放USB-HUB功能" class="headerlink" title="完全不开放USB HUB功能"></a>完全不开放USB HUB功能</h1><p>目前想到有两种方法实现：<br>(1)、<br>在<code>defconfig</code>文件中打开宏<code>CONFIG_USB_OTG_BLACKLIST_HUB</code>。因为在<code>hub_probe()</code>中有这么一句判断：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span>    CONFIG_USB_OTG_BLACKLIST_HUB</span></span><br><span class="line">    <span class="keyword">if</span> (hdev-&gt;parent) &#123;</span><br><span class="line">        dev_warn(&amp;intf-&gt;dev, <span class="string">"ignoring external hub\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> -ENODEV;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p></p><p>通过<code>hdev-&gt;parent</code>来判断这是一个<code>外接的USB HUB还是ROOT HUB</code>，如果是外接的USB HUB，那么直接返回出错，不加载hub驱动。以此达到完全不开发USB HUB的功能，但是这个USB设备还是能正常被枚举上。</p><p>(2)、<br>通过<code>struct usb_device</code>中的level成员来判断当前的USB设备处于USB总线拓扑的哪个层级。<code>USB ROOT HUB(level=0)</code>，第一个外接的USB设备的level=1，以此类推。<br>因此我们可以确定，当外接一个USB HUB，其level=1，在这个外接的USB HUB再接上USB设备，那么该USB设备的level=2。<br>此时可以在<code>usb_enumerate_device()</code>将连接在外接的USB HUB上的USB设备给屏蔽掉。<br>可以枚举到USB HUB，也正常加载了hub驱动，但是过滤掉这个USB HUB上的其他port口，不支持它的下一层级。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux USB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux USB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置USB Host和USB Device full-speed工作</title>
      <link href="/892013c5/"/>
      <url>/892013c5/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>在开发嵌入式产品的时候，有时因为干扰而遇到严重的USB兼容性问题时，我们需要将USB速度从high-speed降到full-speed，在保证数据的可靠性的前提下进行测试。<br>本文以i.MX6为例，讲述怎么配置使其USB Host Controller和USB Device Controller工作在full-speed。<a id="more"></a></p><hr><h1 id="PORTSC寄存器"><a href="#PORTSC寄存器" class="headerlink" title="PORTSC寄存器"></a>PORTSC寄存器</h1><p>关于<code>PORTSC</code>寄存器的定义，可以从<code>EHCI SPEC</code>上找到，也可以从芯片的datasheet上查找到。下面的定义主要是参照i.MX6。<br><img src="http://p6x2iir9l.bkt.clouddn.com/%E9%85%8D%E7%BD%AEUSB%20Host%E5%92%8CUSB%20Device%20full-speed%E5%B7%A5%E4%BD%9C-1.png" alt="寄存器定义"><br><img src="http://p6x2iir9l.bkt.clouddn.com/%E9%85%8D%E7%BD%AEUSB%20Host%E5%92%8CUSB%20Device%20full-speed%E5%B7%A5%E4%BD%9C-2.png" alt="寄存器定义"></p><p>其中<code>BIT24</code>的定义如下<br><img src="http://p6x2iir9l.bkt.clouddn.com/%E9%85%8D%E7%BD%AEUSB%20Host%E5%92%8CUSB%20Device%20full-speed%E5%B7%A5%E4%BD%9C-3.png" alt="BIT24"></p><p>将其设置为1，那么端口将强制运行在full-speed上。<br>另外，这个寄存器USB Host Controller和USB Device Controller都可以使用，并且该寄存器是标准的EHCI规定的。详见<code>ehci-specification-for-usb.pdf</code></p><hr><h1 id="配置USB-Host工作在full-speed"><a href="#配置USB-Host工作在full-speed" class="headerlink" title="配置USB Host工作在full-speed"></a>配置USB Host工作在full-speed</h1><p>有寄存器上的依据，接下来就可以配置USB Host工作在full-speed上了。<br></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/drivers/usb/host/ehci-hcd.c b/drivers/usb/host/ehci-hcd.c</span><br><span class="line">index 6e834b83..b81c84a 100644</span><br><span class="line"><span class="comment">--- a/drivers/usb/host/ehci-hcd.c</span></span><br><span class="line"><span class="comment">+++ b/drivers/usb/host/ehci-hcd.c</span></span><br><span class="line">@@ -586,6 +586,7 @@ static int ehci_run (struct usb_hcd *hcd)</span><br><span class="line">     struct ehci_hcd     *ehci = hcd_to_ehci (hcd);</span><br><span class="line">     u32         temp;</span><br><span class="line">     u32         hcc_params;</span><br><span class="line"><span class="addition">+    u32         port_status_control_value;</span></span><br><span class="line"></span><br><span class="line">     hcd-&gt;uses_new_polling = 1;</span><br><span class="line"></span><br><span class="line">@@ -656,6 +657,11 @@ static int ehci_run (struct usb_hcd *hcd)</span><br><span class="line">     ehci_writel(ehci, INTR_MASK,</span><br><span class="line">&amp;ehci-&gt;regs-&gt;intr_enable); /* Turn On Interrupts */</span><br><span class="line"></span><br><span class="line"><span class="addition">+#define PFSC (1&lt;&lt;24)</span></span><br><span class="line"><span class="addition">+    printk("[xxx-ehci] set USB EHCI work in full speed ========\n");</span></span><br><span class="line"><span class="addition">+    port_status_control_value = ehci_readl(ehci, &amp;ehci-&gt;regs-&gt;port_status[0]);  </span></span><br><span class="line"><span class="addition">+    ehci_writel(ehci, port_status_control_value | PFSC, &amp;ehci-&gt;regs-&gt;port_status[0]);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">     /* GRR this is run-once init(), being done every time the HC starts.</span><br><span class="line">      * So long as they're part of class devices, we can't do it init()</span><br><span class="line">      * since the class device isn't created that early.</span><br></pre></td></tr></table></figure><p></p><p><code>ehci_run()</code>函数会在<code>ehci-hcd驱动</code>加载的时候去执行，此时将<code>port_status</code>寄存器的<code>bit24</code>写入1，那么就可以将其端口设置在full-speed。至于有几个端口，可以读出<code>HCSPARAMS寄存器</code>中<code>N_PORTS</code>的值。<br><img src="http://p6x2iir9l.bkt.clouddn.com/%E9%85%8D%E7%BD%AEUSB%20Host%E5%92%8CUSB%20Device%20full-speed%E5%B7%A5%E4%BD%9C-4.png" alt="HCSPARAMS寄存器"></p><hr><h1 id="配置USB-Device工作在full-speed"><a href="#配置USB-Device工作在full-speed" class="headerlink" title="配置USB Device工作在full-speed"></a>配置USB Device工作在full-speed</h1><p>配置USB Device工作在full-speed下，也同样是要配置<code>PORTSC寄存器</code>。配置的地方在<code>udc控制器驱动</code>里面。比如i.MX6的配置在<code>drivers/usb/gadget/udc/fsl_udc_core.c</code>中的<code>.udc_start</code>或者<code>.pullup</code>所指定的函数。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_gadget_ops</span> <span class="title">fsl_gadget_ops</span> = &#123;</span></span><br><span class="line">    .get_frame = fsl_get_frame,</span><br><span class="line">    .wakeup = fsl_wakeup,</span><br><span class="line"><span class="comment">/*  .set_selfpowered = fsl_set_selfpowered, */</span> <span class="comment">/* Always selfpowered */</span></span><br><span class="line">    .vbus_session = fsl_vbus_session,</span><br><span class="line">    .vbus_draw = fsl_vbus_draw,</span><br><span class="line">    .pullup = fsl_pullup,</span><br><span class="line">    .udc_start = fsl_udc_start,</span><br><span class="line">    .udc_stop = fsl_udc_stop,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>修改后如下：<br></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/drivers/usb/gadget/udc/fsl_udc_core.c b/drivers/usb/gadget/udc/fsl_udc_core.c</span><br><span class="line">index 6f2f71c..94a3ae3 100644</span><br><span class="line"><span class="comment">--- a/drivers/usb/gadget/udc/fsl_udc_core.c</span></span><br><span class="line"><span class="comment">+++ b/drivers/usb/gadget/udc/fsl_udc_core.c</span></span><br><span class="line">@@ -1223,9 +1223,13 @@ static int fsl_pullup(struct usb_gadget *gadget, int is_on)</span><br><span class="line">         return -EOPNOTSUPP;</span><br><span class="line"></span><br><span class="line">     udc-&gt;softconnect = (is_on != 0);</span><br><span class="line"><span class="deletion">-    if (can_pullup(udc))</span></span><br><span class="line"><span class="addition">+    if (can_pullup(udc)) &#123;</span></span><br><span class="line">         fsl_writel((fsl_readl(&amp;dr_regs-&gt;usbcmd) | USB_CMD_RUN_STOP),</span><br><span class="line">&amp;dr_regs-&gt;usbcmd);</span><br><span class="line"><span class="addition">+        fsl_writel((fsl_readl(&amp;dr_regs-&gt;portsc1) | PORTSCX_PORT_FORCE_FULL_SPEED),</span></span><br><span class="line"><span class="addition">+                &amp;dr_regs-&gt;portsc1);</span></span><br><span class="line"><span class="addition">+        printk("[xxx-udc] set USB udc work in full speed ========")</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line">     else</span><br><span class="line">         fsl_writel((fsl_readl(&amp;dr_regs-&gt;usbcmd) &amp; ~USB_CMD_RUN_STOP),</span><br><span class="line">&amp;dr_regs-&gt;usbcmd);</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux USB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux USB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Cached high memory usage</title>
      <link href="/b257434e/"/>
      <url>/b257434e/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>本文主要解释<code>cached</code>占用内存高的原因，以及如何释放<code>cached</code>的内存占用。<a id="more"></a></p><hr><h1 id="cached占用内存高"><a href="#cached占用内存高" class="headerlink" title="cached占用内存高"></a>cached占用内存高</h1><p>在使用<code>procrank</code>做内存性能统计的时候，发现当播放USB video，会发现<code>cached</code>占用的内存越来越高。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># procrank</span></span><br><span class="line">RAM: <span class="number">317308</span>K total, <span class="number">2952</span>K <span class="built_in">free</span>, <span class="number">3796</span>K buffers, <span class="number">228188</span>K cached, <span class="number">360</span>K shmem, <span class="number">6492</span>K slab</span><br></pre></td></tr></table></figure><p></p><p>通过<code>free -m</code>查看内存的使用情况，发现剩余的可用内存只有3M。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># free -m                                           </span></span><br><span class="line">             total         used         <span class="built_in">free</span>       shared      buffers</span><br><span class="line">Mem:           <span class="number">309</span>          <span class="number">306</span>            <span class="number">3</span>            <span class="number">0</span>            <span class="number">4</span></span><br><span class="line">-/+ buffers:                <span class="number">302</span>            <span class="number">7</span></span><br><span class="line">Swap:            <span class="number">0</span>            <span class="number">0</span>            <span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p>由于我这里的busybox版本为v1.22.1，没有<code>-/+ buffers/cache</code>这一列，可以通过下面的路径下载特定版本特定体系结构的二进制文件。<br><a href="https://busybox.net/downloads/binaries/" target="_blank" rel="noopener">https://busybox.net/downloads/binaries/</a></p><p>上述的情况，通过<code>/proc/meminfo</code>得到的结果也是一致的：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#cat /proc/meminfo</span></span><br><span class="line">MemTotal:         <span class="number">317308</span> kB</span><br><span class="line">MemFree:            <span class="number">3576</span> kB</span><br><span class="line">MemAvailable:     <span class="number">214268</span> kB</span><br><span class="line">Buffers:            <span class="number">3796</span> kB</span><br><span class="line">Cached:           <span class="number">228124</span> kB</span><br><span class="line">SwapCached:            <span class="number">0</span> kB</span><br><span class="line">Active:           <span class="number">177288</span> kB</span><br><span class="line">Inactive:          <span class="number">99696</span> kB</span><br><span class="line">Active(anon):      <span class="number">61104</span> kB</span><br><span class="line">Inactive(anon):      <span class="number">348</span> kB</span><br><span class="line">Active(file):     <span class="number">116184</span> kB</span><br><span class="line">Inactive(file):    <span class="number">99348</span> kB</span><br><span class="line">Unevictable:       <span class="number">16020</span> kB</span><br><span class="line">Mlocked:               <span class="number">0</span> kB</span><br><span class="line">SwapTotal:             <span class="number">0</span> kB</span><br><span class="line">SwapFree:              <span class="number">0</span> kB</span><br><span class="line">Dirty:                <span class="number">28</span> kB</span><br><span class="line">Writeback:             <span class="number">0</span> kB</span><br><span class="line">AnonPages:         <span class="number">61092</span> kB</span><br><span class="line">Mapped:             <span class="number">9468</span> kB</span><br><span class="line">Shmem:               <span class="number">360</span> kB</span><br><span class="line">Slab:               <span class="number">6488</span> kB</span><br><span class="line">SReclaimable:       <span class="number">1564</span> kB</span><br><span class="line">SUnreclaim:         <span class="number">4924</span> kB</span><br><span class="line">KernelStack:        <span class="number">2968</span> kB</span><br><span class="line">PageTables:         <span class="number">2064</span> kB</span><br><span class="line">NFS_Unstable:          <span class="number">0</span> kB</span><br><span class="line">Bounce:                <span class="number">0</span> kB</span><br><span class="line">WritebackTmp:          <span class="number">0</span> kB</span><br><span class="line">CommitLimit:      <span class="number">158652</span> kB</span><br><span class="line">Committed_AS:    <span class="number">1696048</span> kB</span><br><span class="line">VmallocTotal:     <span class="number">696320</span> kB</span><br><span class="line">VmallocUsed:       <span class="number">45128</span> kB</span><br><span class="line">VmallocChunk:     <span class="number">607228</span> kB</span><br></pre></td></tr></table></figure><p></p><h1 id="Linux-ate-my-ram"><a href="#Linux-ate-my-ram" class="headerlink" title="Linux ate my ram!"></a>Linux ate my ram!</h1><p><a href="https://www.linuxatemyram.com/" target="_blank" rel="noopener">Linux ate my ram!</a>这篇文章详细的讲述了<code>cached</code>占用内存越来越高的情况，在此翻译如下：</p><p>(1)、 发生了啥？<br>Linux会借用不使用的内存用来做磁盘缓存。那样看起来像是memory变得非常的少，但并不是这样的，一切都是ok的。</p><p>(2)、 为什么这么做？<br>磁盘缓存使得系统更快，响应更快。除了会令新手困惑外，没有任何缺点。它不会以任何方式将应用程序从内存中分离出去！</p><p>(3)、 如果我要运行更多的应用程序要怎么办？<br>如果应用程序需要更多的内存，他们只回收磁盘缓存借用的块。磁盘缓存总是可以立即回馈给应用程序。内存并不低。</p><p>(4)、 我需要更多的交换分区吗？<br>不需要，磁盘缓存只会借用应用程序当前不使用的内存。不会使用到交换分区。如果应用程序需要更多的内存，他们只回收磁盘缓存借用的块。不会开始使用交换分区。</p><p>(5)、 怎样关闭磁盘缓存？<br>你不能关闭磁盘缓存。任何人想要禁用磁盘缓存的唯一原因是因为他们认为它将内存从应用程序中移走，而不是这样！ 磁盘缓存使应用程序加载速度更快，运行更流畅，但它永远不会将内存从它们移开！ 因此，绝对没有理由禁用它！</p><p>(6)、 为什么top和free会显示内存都被用了然而事实并不是那样的？<br>这只是术语上的差异。你和Linux都认为内存被应用程序使用的为<code>used</code>，不被任何内容使用的为<code>free</code>。<br>但是如何统计那些被用于<code>something</code>，但是又能被应用程序所使用的内存呢？<br>你也许会将内存用<code>free</code>和<code>available</code>用来进行统计。Linux将其统计为<code>used</code>，但也是<code>available</code>。</p><table><thead><tr><th style="text-align:center">内存的使用</th><th style="text-align:center">你称之为</th><th style="text-align:center">Linux称之为</th></tr></thead><tbody><tr><td style="text-align:center">被应用程序使用</td><td style="text-align:center">Used</td><td style="text-align:center">Used</td></tr><tr><td style="text-align:center">被使用，但可用</td><td style="text-align:center">Free (or Available)</td><td style="text-align:center">Used (and Available)</td></tr><tr><td style="text-align:center">不被任何使用</td><td style="text-align:center">Free</td><td style="text-align:center">Free</td></tr></tbody></table><p>上面的<code>something</code>大致是<code>top</code>和<code>free</code>中显示的<code>buffers</code>和<code>cached</code>。正是由于你和Linux的术语不同，你可能会认为你内存越来越少。</p><p>(7)、 我应该怎么去查看内存真正剩多少？<br>为了查看你应用程序不使用交换分区的话还剩多少内存，可用运行<code>free -m</code>来查看<code>available</code>这一列的内容。<br>(在2016年之前安装的，查看<code>-/+ buffers/cache</code>的<code>free</code>列来替代)。该命令会以<code>M</code>的来显示。<br>如果你只是天真地看待<code>free</code>和<code>used</code>，你会认为你的内存是99%，当它只有47%！有关Linux计算为<code>available</code>的更详细和技术性描述，请参阅<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773" target="_blank" rel="noopener">the commit that added the field</a>.</p><p>(8)、 什么情况下我才担心？<br>一个健康的的Linux系统，在运行一段时间后，有足够的内存，并且会显示以下预期和无害的行为：</p><ul><li><code>free</code>的memory接近与0；</li><li><code>used</code>的memory接近于<code>total</code>；</li><li><code>available</code>的memory(或者<code>free + buffers/cache</code>)有足够的空间(比方说，20%以上的<code>total</code>);</li><li><code>swap used</code>没有变化；</li></ul><p>可能想要了解的真正低内存情况的警告信号：</p><ul><li><code>available</code>的memory(或者<code>free + buffers/cache</code>)接近于0；</li><li><code>swap used</code>增加或波动；</li><li><code>dmesg | grep oom-killer</code>显示OutOfMemory-killer正在工作；</li></ul><p>(9)、 我要怎样确认上面所说的？<br>有关更多详细信息以及如何试用磁盘缓存以显示此处所述的效果，请参阅<a href="https://www.linuxatemyram.com/play.html" target="_blank" rel="noopener">此页面</a>。 很少有东西让你欣赏磁盘缓存，而不仅仅是在自己的硬件上测量数量级的加速！</p><hr><h1 id="验证磁盘缓存是否可回收"><a href="#验证磁盘缓存是否可回收" class="headerlink" title="验证磁盘缓存是否可回收"></a>验证磁盘缓存是否可回收</h1><p>在 <a href="https://www.linuxatemyram.com/play.html" target="_blank" rel="noopener">https://www.linuxatemyram.com/play.html</a> 中，使用多种方法来验证磁盘缓存的作用以及磁盘缓存的回收。</p><p>磁盘缓存的某些部分不能丢弃，甚至不能容纳新的应用程序。这包括已被某些应用程序<code>mlocked</code>的<code>mmap&#39;d</code>页面，尚未写入存储区的脏页以及存储在tmpfs中的数据（包括/ dev / shm，用于共享内存）。mmap’d，mlocked页面卡在页面缓存中。肮脏的页面大部分将很快写出来。如果可能的话，tmpfs中的数据将被换出。</p><hr><h1 id="drop-caches"><a href="#drop-caches" class="headerlink" title="drop_caches"></a>drop_caches</h1><p>关于这部分的解释，可以参照<code>&lt;Kernel_Dir&gt;/Documentation/sysctl/vm.txt</code>文件：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">==============================================================</span><br><span class="line"></span><br><span class="line">drop_caches</span><br><span class="line"></span><br><span class="line">Writing to <span class="keyword">this</span> will cause the kernel to drop clean caches, as well as</span><br><span class="line">reclaimable slab objects like dentries <span class="keyword">and</span> inodes.  Once dropped, their</span><br><span class="line">memory becomes <span class="built_in">free</span>.</span><br><span class="line"></span><br><span class="line">To <span class="built_in">free</span> pagecache:</span><br><span class="line">    echo <span class="number">1</span> &gt; /proc/sys/vm/drop_caches</span><br><span class="line">To <span class="built_in">free</span> reclaimable slab objects (includes dentries <span class="keyword">and</span> inodes):</span><br><span class="line">    echo <span class="number">2</span> &gt; /proc/sys/vm/drop_caches</span><br><span class="line">To <span class="built_in">free</span> slab objects <span class="keyword">and</span> pagecache:</span><br><span class="line">    echo <span class="number">3</span> &gt; /proc/sys/vm/drop_caches</span><br><span class="line"></span><br><span class="line">This is a non-destructive operation <span class="keyword">and</span> will <span class="keyword">not</span> <span class="built_in">free</span> any dirty objects.</span><br><span class="line">To increase the number of objects freed by <span class="keyword">this</span> operation, the user may run</span><br><span class="line">`sync' prior to writing to /proc/sys/vm/drop_caches.  This will minimize the</span><br><span class="line">number of dirty objects on the system <span class="keyword">and</span> create more candidates to be</span><br><span class="line">dropped.</span><br><span class="line"></span><br><span class="line">This file is <span class="keyword">not</span> a means to control the growth of the various kernel caches</span><br><span class="line">(inodes, dentries, pagecache, etc...)  These objects are automatically</span><br><span class="line">reclaimed by the kernel when memory is needed elsewhere on the system.</span><br><span class="line"></span><br><span class="line">Use of <span class="keyword">this</span> file can cause performance problems.  Since it discards cached</span><br><span class="line">objects, it may cost a significant amount of I/O <span class="keyword">and</span> CPU to recreate the</span><br><span class="line">dropped objects, especially <span class="keyword">if</span> they were under heavy use.  Because of <span class="keyword">this</span>,</span><br><span class="line">use outside of a testing <span class="keyword">or</span> debugging environment is <span class="keyword">not</span> recommended.</span><br><span class="line"></span><br><span class="line">You may see informational messages in your kernel <span class="built_in">log</span> when <span class="keyword">this</span> file is</span><br><span class="line">used:</span><br><span class="line"></span><br><span class="line">    cat (<span class="number">1234</span>): drop_caches: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">These are informational only.  They <span class="keyword">do</span> <span class="keyword">not</span> mean that anything is wrong</span><br><span class="line">with your system.  To disable them, echo <span class="number">4</span> (bit <span class="number">3</span>) into drop_caches.</span><br></pre></td></tr></table></figure><p></p><p>清空<code>slab</code>和<code>page cached</code>，可以使用如下命令：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># free &amp;&amp; sync &amp;&amp; echo 3 &gt; /proc/sys/vm/drop_caches &amp;&amp; free</span></span><br></pre></td></tr></table></figure><p></p><hr><h1 id="MemAvailable"><a href="#MemAvailable" class="headerlink" title="MemAvailable"></a>MemAvailable</h1><p>Linux kernel在这次提交中加入了<code>MemAvailable</code>的列表。详见：<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773" target="_blank" rel="noopener">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773</a><br>根据提交的履历可以看到它的解释如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MemAvailable: An estimate of how much memory is available <span class="keyword">for</span> starting <span class="keyword">new</span></span><br><span class="line">            applications, without swapping. Calculated from MemFree,</span><br><span class="line">            SReclaimable, the size of the file LRU lists, <span class="keyword">and</span> the low</span><br><span class="line">            watermarks in each zone.</span><br><span class="line">            The estimate takes into account that the system needs some</span><br><span class="line">            page cache to function well, <span class="keyword">and</span> that <span class="keyword">not</span> all reclaimable</span><br><span class="line">            slab will be reclaimable, due to items being in use. The</span><br><span class="line">            impact of those factors will vary from system to system.</span><br></pre></td></tr></table></figure><p></p><p>翻译如下：</p><blockquote><p><code>MemAvailable</code>：估计有多少内存可用于启动新应用程序，无需交换。 根据MemFree，SReclaimable计算，文件LRU列表的大小以及每个区域中的低水印。 估算考虑到系统需要一些页面缓存才能正常工作，并且并不是所有的可回收板块都可以回收，因为项目正在使用。 这些因素的影响因系统而异。</p></blockquote><p>以这个值作为参照，更能说明当前系统的内存是否够新的应用程序使用。</p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.linuxatemyram.com/" target="_blank" rel="noopener">https://www.linuxatemyram.com/</a></li><li><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773" target="_blank" rel="noopener">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773</a></li><li><a href="https://www.linuxatemyram.com/play.html" target="_blank" rel="noopener">https://www.linuxatemyram.com/play.html</a></li><li><a href="https://unix.stackexchange.com/questions/87908/how-do-you-empty-the-buffers-and-cache-on-a-linux-system" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/87908/how-do-you-empty-the-buffers-and-cache-on-a-linux-system</a></li><li><a href="http://linuxperf.com/?p=142" target="_blank" rel="noopener">http://linuxperf.com/?p=142</a></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux Kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Kernel优化--优化dts</title>
      <link href="/ddc19a34/"/>
      <url>/ddc19a34/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>将dts中没必要的设备删掉以及defconfig中没必要的配置删掉，可以加快kernel的启动时间。<br>本文主要讲述如何通过<code>dt_to_config</code>工具，将dts中的设备与.config中的配置匹配起来，通过它们之间的匹配关系，来决定优化哪些设备和模块。<a id="more"></a></p><hr><h1 id="dt-to-config介绍"><a href="#dt-to-config介绍" class="headerlink" title="dt_to_config介绍"></a>dt_to_config介绍</h1><p>在linux 4.8之后，引入了一个工具<code>scripts/dtc/dt_to_config</code>，这个工具可以将dts或dtb的信息与当前kernel所使用的<code>.config</code>一起解析，然后将dts中的节点信息与<code>.config</code>的配置信息和所使用的源码信息一一匹配。<br><code>dt_to_config</code>用法如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">sub <span class="title">usage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       print</span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">Usage: $script_name [options] device-tree...</span></span><br><span class="line"><span class="string">    device_tree is: dts_file | dtb_file | proc_device-tree</span></span><br><span class="line"><span class="string">Valid options:</span></span><br><span class="line"><span class="string">     -c FILE             Read kernel config options from FILE</span></span><br><span class="line"><span class="string">    --config FILE        synonym for 'c'</span></span><br><span class="line"><span class="string">    --config-format      config file friendly output format</span></span><br><span class="line"><span class="string">    --exclude-flag FLAG  exclude entries with a matching flag</span></span><br><span class="line"><span class="string">     -h                  Display this message and exit</span></span><br><span class="line"><span class="string">    --help               synonym for 'h'</span></span><br><span class="line"><span class="string">    --black-list-driver  use driver black list</span></span><br><span class="line"><span class="string">    --white-list-config  use config white list</span></span><br><span class="line"><span class="string">    --white-list-driver  use driver white list</span></span><br><span class="line"><span class="string">    --include-flag FLAG  include only entries with a matching flag</span></span><br><span class="line"><span class="string">    --include-suspect    include only entries with an uppercase flag</span></span><br><span class="line"><span class="string">    --short-name         do not show the path portion of the node name</span></span><br><span class="line"><span class="string">    --show-lists         report of white and black lists</span></span><br><span class="line"><span class="string">    --version            Display program version and exit</span></span><br><span class="line"><span class="string">  Report driver source files that match the compatibles in the device</span></span><br><span class="line"><span class="string">  tree file and the kernel config options that enable the driver source</span></span><br><span class="line"><span class="string">  files.</span></span><br><span class="line"><span class="string">  This program must be run in the root directory of a Linux kernel</span></span><br><span class="line"><span class="string">  source tree.</span></span><br><span class="line"><span class="string">  The default format is a report that is intended to be easily human</span></span><br><span class="line"><span class="string">  scannable.</span></span><br><span class="line"><span class="string">  An alternate format can be selected by --config-format.  This will</span></span><br><span class="line"><span class="string">  create output that can easily be edited to create a fragment that can</span></span><br><span class="line"><span class="string">  be appended to the existing kernel config file.  Each entry consists of</span></span><br><span class="line"><span class="string">  multiple lines.  The first line reports flags, the node path, compatible</span></span><br><span class="line"><span class="string">  value, driver file matching the compatible, configuration options, and</span></span><br><span class="line"><span class="string">  current values of the configuration options.  For each configuration</span></span><br><span class="line"><span class="string">  option, the following lines report the current value and the value that</span></span><br><span class="line"><span class="string">  is required for the driver file to be included in the kernel.</span></span><br><span class="line"><span class="string">  If a large number of drivers or config options is listed for a node,</span></span><br><span class="line"><span class="string">  and the '$pr_flag_value[$pr_flag_pos_hard_coded]' flag is set consider using --white-list-config and/or</span></span><br><span class="line"><span class="string">  --white-list-driver.  If the white list option suppresses the correct</span></span><br><span class="line"><span class="string">  entry please report that as a bug.</span></span><br><span class="line"><span class="string">  CAUTION:</span></span><br><span class="line"><span class="string">     This program uses heuristics to guess which driver(s) support each</span></span><br><span class="line"><span class="string">     compatible string and which config option(s) enables the driver(s).</span></span><br><span class="line"><span class="string">     Do not believe that the reported information is fully correct.</span></span><br><span class="line"><span class="string">     This program is intended to aid the process of determining the</span></span><br><span class="line"><span class="string">     proper kernel configuration for a device tree, but this is not</span></span><br><span class="line"><span class="string">     a fully automated process -- human involvement may still be</span></span><br><span class="line"><span class="string">     required!</span></span><br><span class="line"><span class="string">     The driver match heuristic used is to search for source files</span></span><br><span class="line"><span class="string">     containing the compatible string enclosed in quotes.</span></span><br><span class="line"><span class="string">     This program might not be able to find all drivers matching a</span></span><br><span class="line"><span class="string">     compatible string.</span></span><br><span class="line"><span class="string">     Some makefiles are overly clever.  This program was not made</span></span><br><span class="line"><span class="string">     complex enough to handle them.  If no config option is listed</span></span><br><span class="line"><span class="string">     for a driver, look at the makefile for the driver source file.</span></span><br><span class="line"><span class="string">     Even if a config option is listed for a driver, some other</span></span><br><span class="line"><span class="string">     available config options may not be listed.</span></span><br><span class="line"><span class="string">  FLAG values:</span></span><br><span class="line"><span class="string">"</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> ($k = <span class="number">0</span>; $k &lt; $num_pr_flags; $k++) &#123;</span><br><span class="line">               <span class="built_in">printf</span> <span class="string">"     %s   %s\n"</span>, $pr_flag_value[$k], $pr_flag_help[$k];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       print</span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">     Upper case letters indicate potential issues or problems.</span></span><br><span class="line"><span class="string">  The flag:</span></span><br><span class="line"><span class="string">"</span>;</span><br><span class="line"></span><br><span class="line">       $k = $pr_flag_pos_hard_coded;</span><br><span class="line">       <span class="built_in">printf</span> <span class="string">"     %s   %s\n"</span>, $pr_flag_value[$k], $pr_flag_help[$k];</span><br><span class="line"></span><br><span class="line">       print</span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">  will be set if the config or driver is in the white lists, even if</span></span><br><span class="line"><span class="string">  --white-list-config and --white-list-driver are not specified.</span></span><br><span class="line"><span class="string">  This is a hint that 1) many of these reported lines are likely to</span></span><br><span class="line"><span class="string">  be incorrect, and 2) using those options will reduce the number of</span></span><br><span class="line"><span class="string">  drivers and/or config options reported.</span></span><br><span class="line"><span class="string">  --white-list-config and --white-list-driver may not be accurate if this</span></span><br><span class="line"><span class="string">  program is not well maintained.  Use them with appropriate skepticism.</span></span><br><span class="line"><span class="string">  Use the --show-lists option to report the values in the list.</span></span><br><span class="line"><span class="string">  Return value:</span></span><br><span class="line"><span class="string">    0   if no error</span></span><br><span class="line"><span class="string">    1   error processing command line</span></span><br><span class="line"><span class="string">    2   unable to open or read kernel config file</span></span><br><span class="line"><span class="string">    3   unable to open or process input device tree file(s)</span></span><br><span class="line"><span class="string">  EXAMPLES:</span></span><br><span class="line"><span class="string">     dt_to_config arch/arm/boot/dts/my_dts_file.dts</span></span><br><span class="line"><span class="string">       Basic report.</span></span><br><span class="line"><span class="string">     dt_to_config \\</span></span><br><span class="line"><span class="string">        --config \$&#123;KBUILD_OUTPUT&#125;/.config \\</span></span><br><span class="line"><span class="string">        arch/\$&#123;ARCH&#125;/boot/dts/my_dts_file.dts</span></span><br><span class="line"><span class="string">       Full report, with config file issues noted.</span></span><br><span class="line"><span class="string">     dt_to_config --include-suspect \\</span></span><br><span class="line"><span class="string">        --config \$&#123;KBUILD_OUTPUT&#125;/.config \\</span></span><br><span class="line"><span class="string">        arch/\$&#123;ARCH&#125;/boot/dts/my_dts_file.dts</span></span><br><span class="line"><span class="string">       Report of node / compatible string / driver tuples that should</span></span><br><span class="line"><span class="string">       be further investigated.  A node may have multiple compatible</span></span><br><span class="line"><span class="string">       strings.  A compatible string may be matched by multiple drivers.</span></span><br><span class="line"><span class="string">       A driver may have config file issues noted.  The compatible string</span></span><br><span class="line"><span class="string">       and/or driver may be in the white lists.</span></span><br><span class="line"><span class="string">     dt_to_config --include-suspect --config-format \\</span></span><br><span class="line"><span class="string">        --config $&#123;KBUILD_OUTPUT&#125;/.config \\</span></span><br><span class="line"><span class="string">        arch/\$&#123;ARCH&#125;/boot/dts/my_dts_file.dts</span></span><br><span class="line"><span class="string">       Report of node / compatible string / driver tuples that should</span></span><br><span class="line"><span class="string">       be further investigated.  The report can be edited to uncomment</span></span><br><span class="line"><span class="string">       the config options to select the desired tuple for a given node.</span></span><br><span class="line"><span class="string">       A node may have multiple compatible strings.  A compatible string</span></span><br><span class="line"><span class="string">       may be matched by multiple drivers.  A driver may have config file</span></span><br><span class="line"><span class="string">       issues noted.  The compatible string and/or driver may be in the</span></span><br><span class="line"><span class="string">       white lists.</span></span><br><span class="line"><span class="string">"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>刚好当前开发使用的是imx8 4.9.51的内核版本，需要优化Linux Kernel，刚好可以借助这个工具来看当前系统配置和使用了哪些资源。使用如下：</p><font color="red">注意，必须在kernel的目录下执行。</font><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ./scripts/dtc/dt_to_config arch/arm64/boot/dts/freescale/fsl-imx8-xxx.dtb --<span class="keyword">short</span>-name --config ./.config --config-format &gt; dts_output.txt</span><br></pre></td></tr></table></figure><br><br>对于各个参数的解释如下：<br>1. <code>fsl-imx8-xxx.dtb</code>：为xxx项目所生成的dtb文件；<br>2. <code>--short-name</code>：do not show the path portion of the node name<br>3. <code>--config ./.config</code>：指定当前目录下的.config文件进行匹配<br>4. <code>--config-format</code>：config file friendly output format<br><br>最终，在<code>dts_output.txt</code>文件中会以如下的方式呈现出来：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Md-c-------y- : camera : fsl,mxc-md : drivers/media/platform/imx8/mxc-media-dev.c : CONFIG_IMX8_MEDIA_DEVICE : y</span><br><span class="line"># CONFIG_IMX8_MEDIA_DEVICE is <span class="built_in">set</span></span><br><span class="line"># CONFIG_IMX8_MEDIA_DEVICE=y</span><br><span class="line"># M-----W------ : camera : simple-bus : no_driver : no_config : x</span><br><span class="line"># no_config</span><br><span class="line"></span><br><span class="line"># -d-c-E-----y- : csi@<span class="number">58227000</span> : fsl,mxc-mipi-csi2 : drivers/media/platform/imx8/mxc-mipi-csi2.c : CONFIG_IMX8_MIPI_CSI2 : y</span><br><span class="line"># CONFIG_IMX8_MIPI_CSI2 is <span class="built_in">set</span></span><br><span class="line"># CONFIG_IMX8_MIPI_CSI2=y</span><br></pre></td></tr></table></figure><br><br>接下来以下面的信息来分段解释：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-d-c-E-----y- : csi@<span class="number">58227000</span> : fsl,mxc-mipi-csi2 : drivers/media/platform/imx8/mxc-mipi-csi2.c : CONFIG_IMX8_MIPI_CSI2 : y</span><br></pre></td></tr></table></figure><br><br>1. <code>-d-c-E-----y-</code>：flags，具体干啥用的目前未知；<br>2. <code>: csi@58227000</code>：dts里的node；<br>3. <code>: fsl,mxc-mipi-csi2</code>：dts里的compatible属性；<br>4. <code>: drivers/media/platform/imx8/mxc-mipi-csi2.c</code>：与之对应的驱动文件；<br>5. <code>: CONFIG_IMX8_MIPI_CSI2</code>：与之对应的配置选项<br>6. <code>: y</code>：配置的值<br><br>关于这部分的内容可以参照：<a href="https://elinux.org/images/e/e5/Dt_debugging_part_3.pdf" target="_blank" rel="noopener">Dt_debugging_part_3</a><br><br>———————<br><br>## 注意事项<br>(1)、<br><code>dt_to_config</code>目前还不能完全解释dts文件，刚开始的时候我尝试去解析dts文件，但会报如下类似的错误：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arch/arm64/boot/dts/freescale/fsl-imx8-ca35.dtsi:<span class="number">16</span>:<span class="number">45</span>: error: no include path in which to search <span class="keyword">for</span> dt-bindings/clock/imx8qxp-clock.h</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dt-bindings/clock/imx8qxp-clock.h&gt;</span></span></span><br><span class="line">                                             ^</span><br><span class="line">arch/arm64/boot/dts/freescale/fsl-imx8-ca35.dtsi:<span class="number">17</span>:<span class="number">54</span>: error: no include path in which to search <span class="keyword">for</span> dt-bindings/interrupt-controller/arm-gic.h</span><br><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dt-bindings/interrupt-controller/arm-gic.h&gt;</span></span></span><br></pre></td></tr></table></figure><br><br>也就是说，目前还不能解析<code>#include带&lt;&gt;的文件</code>，需要将其转换为<code>#include带” ”的文件</code>，可以将<code>#include &lt;dt-bindings/clock/imx8qxp-clock.h&gt;</code>转换为<code>#include “../include/dt-bindings/clock/imx8qxp-clock.h”</code>就不会报错了。<br>但是，这种方法很费劲，最终干脆直接解析<code>.dtb</code>文件。<br><br>(2)、<br>正如<code>dt_to_config</code>中的<code>usage</code>所说的：<br>&gt; 该程序使用启发式技术来猜测每个驱动程序支持哪一个兼容的字符串和哪个配置选项启用驱动程序。不要相信所报告的信息是完全正确的。<br>这个程序的目的是帮助确定的过程设备树的正确内核配置，但事实并非如此一个完全自动化的过程 - 人类的参与可能仍然是需要！<br>所使用的驱动程序匹配启发式是搜索源文件包含用引号括起来的兼容字符串。此程序可能无法找到所有匹配a的驱动程序兼容字符串。<br><br><font color="red">因此，最终的结果只是参考，并且需要自己去判断。</font><p>(3)、<br>关于device tree的讨论和改进，linux社区到现在还在努力着。关于device tree最新的消息，可以参照以下资料：<br><a href="https://elinux.org/Device_Tree_frowand" target="_blank" rel="noopener">https://elinux.org/Device_Tree_frowand</a><br><a href="https://elinux.org/Device_tree_future#presentation_material_2" target="_blank" rel="noopener">https://elinux.org/Device_tree_future#presentation_material_2</a><br><a href="https://elinux.org/images/e/e5/Dt_debugging_part_3.pdf" target="_blank" rel="noopener">https://elinux.org/images/e/e5/Dt_debugging_part_3.pdf</a><br><a href="https://github.com/torvalds/linux/blob/master/scripts/dtc/dt_to_config" target="_blank" rel="noopener">https://github.com/torvalds/linux/blob/master/scripts/dtc/dt_to_config</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux Kernel优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下无法删除文件</title>
      <link href="/ef6d909f/"/>
      <url>/ef6d909f/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>问题：<br>在<code>repo sync</code>更新代码的时候，发现更新错了，<code>ctrl+c</code>强制退出，后面要将整个工程目录<code>XXX/</code>删掉，报了如下的错误：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm: 无法删除 <span class="string">"/work2/XXX/.repo/projects/vendor/imx/genivi.git/refs/tags/xxx_v1/master/usb_test"</span> : 输入/输出错误</span><br></pre></td></tr></table></figure><p></p><p><code>dmesg</code>查看到内核有如下提示：<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXT4-fs error (device sdb1): ext4_lookup:1584: inode #23997360: comm rm: deleted inode referenced: 23998390</span><br></pre></td></tr></table></figure><p></p><p>看着情况，有可能是文件系统出问题了，本文主要讲述如何解决这个问题。<a id="more"></a></p><hr><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>参照 <a href="https://unix.stackexchange.com/questions/191370/ext4-lookup-deleted-inode-referenced-error-in-var-log-messages?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/191370/ext4-lookup-deleted-inode-referenced-error-in-var-log-messages?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa</a><br>怀疑是文件系统出了问题，采用<code>e2fsck</code>进行修复。先将<code>/dev/sdb1</code> <code>umount</code>掉，然后执行<code>#sudo e2fsck -y /dev/sdb1</code>命令进行修复，输出如下内容：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">victor@victor:~$ sudo e2fsck -y /dev/sdb1 </span><br><span class="line">e2fsck <span class="number">1.42</span><span class="number">.9</span> (<span class="number">4</span>-Feb<span class="number">-2014</span>)</span><br><span class="line">/dev/sdb1 contains a file system with errors, 强制检查.</span><br><span class="line">第一步: 检查inode,块,和大小</span><br><span class="line">第二步: 检查目录结构</span><br><span class="line">在 /work2/XXX/.repo/projects/vendor/imx/genivi.git/refs/tags/xxx_v1/master (23997360) 中的入口 'usb_test' references inode 23998390 found in 簇 2929's unused inodes area.</span><br><span class="line">处理? 是</span><br><span class="line"></span><br><span class="line">在 /work2/XXX/.repo/projects/vendor/imx/genivi.git/refs/tags/xxx_v1/master (23997360) 中的入口 'usb_test' has an incorrect filetype (was 1, 应为 0).</span><br><span class="line">处理? 是</span><br><span class="line"></span><br><span class="line">正在从头开始e2fsck...</span><br><span class="line">One <span class="keyword">or</span> more 块 簇 descriptor checksums are invalid.  处理? 是</span><br><span class="line"></span><br><span class="line">簇 descriptor <span class="number">2929</span> checksum is <span class="number">0xefbe</span>, should be <span class="number">0xd3d3</span>.  已处理.</span><br><span class="line">/dev/sdb1 contains a file system with errors, 强制检查.</span><br><span class="line">第一步: 检查inode,块,和大小</span><br><span class="line">第二步: 检查目录结构</span><br><span class="line">在 /work2/XXX/.repo/projects/vendor/imx/genivi.git/refs/tags/xxx_v1/master (23997360) 中的入口 'usb_test' has 删除/unused inode 23998390.  清除? 是</span><br><span class="line"></span><br><span class="line">第<span class="number">3</span>步: 检查目录连接性</span><br><span class="line">Pass <span class="number">4</span>: Checking reference counts</span><br><span class="line">Unattached inode <span class="number">23997366</span></span><br><span class="line">连接到 /lost+found? 是</span><br><span class="line"></span><br><span class="line">Inode <span class="number">23997366</span> ref count is <span class="number">2</span>, 应为 <span class="number">1.</span>  处理? 是</span><br><span class="line"></span><br><span class="line">第<span class="number">5</span>步: 检查簇概要信息</span><br><span class="line"></span><br><span class="line">/dev/sdb1: ***** 文件系统已修改 *****</span><br><span class="line">/dev/sdb1: <span class="number">4778511</span>/<span class="number">61054976</span> files (<span class="number">0.2</span>% non-contiguous), <span class="number">83041224</span>/<span class="number">244190390</span> blocks</span><br></pre></td></tr></table></figure><p></p><p>之后重启系统，即可正常删除该文件。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 碰到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碰到的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Kernel优化--关闭串口打印</title>
      <link href="/70e88e0b/"/>
      <url>/70e88e0b/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>使用如下patch，关闭串口打印，可以至少节省几百ms的时间。<br></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/arch/arm64/configs/xxx_defconfig b/arch/arm64/configs/xxx_defconfig</span><br><span class="line">index c8036df..81275fa 100755</span><br><span class="line"><span class="comment">--- a/arch/arm64/configs/xxx_defconfig</span></span><br><span class="line"><span class="comment">+++ b/arch/arm64/configs/xxx_defconfig</span></span><br><span class="line">@@ -2985,6 +2985,7 @@ CONFIG_PRINTK_TIME=y</span><br><span class="line"> CONFIG_MESSAGE_LOGLEVEL_DEFAULT=4</span><br><span class="line"> # CONFIG_BOOT_PRINTK_DELAY is not set</span><br><span class="line"> # CONFIG_DYNAMIC_DEBUG is not set</span><br><span class="line"><span class="addition">+CONFIG_PRINTK_NOT_OUTPUT=y</span></span><br><span class="line"> </span><br><span class="line"> #</span><br><span class="line"> # Compile-time checks and compiler options</span><br><span class="line">diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c</span><br><span class="line">index 98ee2a3..e997ad7 100755</span><br><span class="line"><span class="comment">--- a/kernel/printk/printk.c</span></span><br><span class="line"><span class="comment">+++ b/kernel/printk/printk.c</span></span><br><span class="line">@@ -1568,7 +1568,7 @@ static void call_console_drivers(int level,</span><br><span class="line"> </span><br><span class="line">     if (!console_drivers)</span><br><span class="line">         return;</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="addition">+#ifdef CONFIG_PRINTK_NOT_OUTPUT</span></span><br><span class="line">     for_each_console(con) &#123;</span><br><span class="line">         if (exclusive_console &amp;&amp; con != exclusive_console)</span><br><span class="line">             continue;</span><br><span class="line">@@ -1584,6 +1584,7 @@ static void call_console_drivers(int level,</span><br><span class="line">         else</span><br><span class="line">             con-&gt;write(con, text, len);</span><br><span class="line">     &#125;</span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux Kernel优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找Kernel中编译的文件</title>
      <link href="/36d4e630/"/>
      <url>/36d4e630/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>需求：<br>使用SourceInsight查看源代码。要么将整个kernel的源代码添加进去，要么是需要哪个文件就添加哪个。<br>有没有什么办法可以将Kernel目录中编译到的<code>.c</code>文件统一生成一个文件，然后导入到SourceInsight去加载对应的.c文件。</p><p>我们注意到，编译kernel，如果编译了<code>.c</code>文件，那么在与之对应的目录下生成<code>.o</code>或<code>.mod.o</code>文件。因此，可以递归索引查找kernel目录下所有的文件，将<code>.o</code>过滤出来，与之对应的.c文件就是我们要查找的文件，因此有了下面的python代码。<a id="more"></a></p><hr><h1 id="查找-o文件源码"><a href="#查找-o文件源码" class="headerlink" title="查找.o文件源码"></a>查找.o文件源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">all_files = []</span><br><span class="line">fp = open(<span class="string">"out_files.txt"</span>, <span class="string">"w+"</span>)</span><br><span class="line">hit_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filt_mod_file</span><span class="params">(file)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.path.splitext(file)[<span class="number">1</span>] != <span class="string">".mod"</span>:</span><br><span class="line">        temp_file = os.path.splitext(file)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#print(os.path.split(temp_file)[1])</span></span><br><span class="line">        <span class="keyword">if</span> os.path.split(temp_file)[<span class="number">1</span>] != <span class="string">"built-in"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_dir</span><span class="params">(rootDir)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(rootDir):        <span class="comment"># 当前目录下的文件和文件夹</span></span><br><span class="line">        path = os.path.join(rootDir, file)   <span class="comment"># Join one or more path components intelligently</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(path):             <span class="comment"># 迭代查找目录下的文件</span></span><br><span class="line">            find_dir(path)</span><br><span class="line">        <span class="keyword">if</span> os.path.splitext(path)[<span class="number">1</span>] == <span class="string">".o"</span>: <span class="comment"># 分割路径和文件名，判断后缀为 .o 的文件</span></span><br><span class="line">            temp_path = os.path.splitext(path)[<span class="number">0</span>] <span class="comment"># 过滤 .cmd.o 和 built-in 文件</span></span><br><span class="line">            <span class="keyword">if</span> filt_mod_file(temp_path) == <span class="keyword">True</span>:</span><br><span class="line">                path = path.replace(<span class="string">".o"</span>, <span class="string">".c"</span>) <span class="comment"># 将 .o 的后缀改成 .c 的后缀</span></span><br><span class="line">                fp.write(path)                  <span class="comment"># 将结果写入到文件中去</span></span><br><span class="line">                fp.write(<span class="string">"\n"</span>)</span><br><span class="line">                <span class="keyword">global</span> hit_count</span><br><span class="line">                hit_count += <span class="number">1</span></span><br><span class="line">                <span class="comment">#print(path)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#path = "Z:\\work\\xxx_project\\linux"</span></span><br><span class="line">    path = os.path.abspath(<span class="string">"."</span>)</span><br><span class="line">    find_dir(path)</span><br><span class="line">    fp.close()</span><br><span class="line">    print(<span class="string">"hit files count: %d"</span> %(hit_count))</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Python脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kernel添加全局变量</title>
      <link href="/2bec1a3f/"/>
      <url>/2bec1a3f/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>参照下面的patch：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/arch/arm/configs/xxx_defconfig b/arch/arm/configs/xxx_defconfig</span><br><span class="line">index de0e7bf..93d7202 100644</span><br><span class="line"><span class="comment">--- a/arch/arm/configs/xxx_defconfig</span></span><br><span class="line"><span class="comment">+++ b/arch/arm/configs/xxx_defconfig</span></span><br><span class="line">@@ -111,4 +111,5 @@ CONFIG_HAS_IOPORT_MAP=y</span><br><span class="line"> CONFIG_HAS_DMA=m</span><br><span class="line"> CONFIG_CPU_RMAP=y</span><br><span class="line"> CONFIG_NLATTR=y</span><br><span class="line"><span class="addition">+CONFIG_ADD_GLOBAL_VAR=y</span></span><br><span class="line"> # CONFIG_AVERAGE is not set</span><br><span class="line">diff --git a/drivers/usb/core/Kconfig b/drivers/usb/core/Kconfig</span><br><span class="line">index cc0ced0..60d968a 100755</span><br><span class="line"><span class="comment">--- a/drivers/usb/core/Kconfig</span></span><br><span class="line"><span class="comment">+++ b/drivers/usb/core/Kconfig</span></span><br><span class="line">@@ -84,3 +84,8 @@ config USB_OTG_FSM</span><br><span class="line">  Implements OTG Finite State Machine as specified in On-The-Go</span><br><span class="line">  and Embedded Host Supplement to the USB Revision 2.0 Specification.</span><br><span class="line"></span><br><span class="line"><span class="addition">+config ADD_GLOBAL_VAR</span></span><br><span class="line"><span class="addition">+tristate "add global variable"</span></span><br><span class="line"><span class="addition">+depends on USB</span></span><br><span class="line"><span class="addition">+help</span></span><br><span class="line"><span class="addition">+  add global variable.</span></span><br><span class="line">diff --git a/drivers/usb/core/usb.c b/drivers/usb/core/usb.c</span><br><span class="line">index 8d5b2f4..a4ade71 100755</span><br><span class="line"><span class="comment">--- a/drivers/usb/core/usb.c</span></span><br><span class="line"><span class="comment">+++ b/drivers/usb/core/usb.c</span></span><br><span class="line">@@ -1039,6 +1039,10 @@ static void usb_debugfs_cleanup(void)</span><br><span class="line">debugfs_remove(usb_debug_root);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+#ifdef CONFIG_ADD_GLOBAL_VAR</span></span><br><span class="line"><span class="addition">+extern unsigned int k_g_usb_state;</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"> /*</span><br><span class="line">  * Init</span><br><span class="line">  */</span><br><span class="line">@@ -1049,6 +1053,10 @@ static int __init usb_init(void)</span><br><span class="line">pr_info("%s: USB support disabled\n", usbcore_name);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+    #ifdef CONFIG_ADD_GLOBAL_VAR</span></span><br><span class="line"><span class="addition">+    printk("[xxx] get global var,usb_state = %d\n", k_g_usb_state);</span></span><br><span class="line"><span class="addition">+    #endif</span></span><br><span class="line">usb_init_pool_max();</span><br><span class="line"></span><br><span class="line">retval = usb_debugfs_init();</span><br><span class="line">@@ -1099,12 +1107,13 @@ out:</span><br><span class="line"> /*</span><br><span class="line">  * Cleanup</span><br><span class="line">  */</span><br><span class="line"><span class="addition">+</span></span><br><span class="line"> static void __exit usb_exit(void)</span><br><span class="line"> &#123;</span><br><span class="line">/* This will matter if shutdown/reboot does exitcalls. */</span><br><span class="line">if (usb_disabled())</span><br><span class="line">return;</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="addition">+    </span></span><br><span class="line">usb_deregister_device_driver(&amp;usb_generic_driver);</span><br><span class="line">usb_major_cleanup();</span><br><span class="line">usb_deregister(&amp;usbfs_driver);</span><br><span class="line">diff --git a/init/main.c b/init/main.c</span><br><span class="line">index 1ed674b..196de9a 100755</span><br><span class="line"><span class="comment">--- a/init/main.c</span></span><br><span class="line"><span class="comment">+++ b/init/main.c</span></span><br><span class="line">@@ -110,6 +110,11 @@ bool early_boot_irqs_disabled __read_mostly;</span><br><span class="line"> enum system_states system_state __read_mostly;</span><br><span class="line"> EXPORT_SYMBOL(system_state);</span><br><span class="line"></span><br><span class="line"><span class="addition">+#ifdef CONFIG_ADD_GLOBAL_VAR</span></span><br><span class="line"><span class="addition">+unsigned int k_g_usb_state = 2;</span></span><br><span class="line"><span class="addition">+EXPORT_SYMBOL(k_g_usb_state);</span></span><br><span class="line"><span class="addition">+#endif</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"> /*</span><br><span class="line">  * Boot command-line arguments</span><br><span class="line">  */</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux Kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不同版本mount用法</title>
      <link href="/134d2c7f/"/>
      <url>/134d2c7f/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>在项目A（纯linux系统），挂载<code>/system</code>分区为<code>rw</code>的时候，使用如下命令，该命令可正常挂载。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># mount -o remount,rw /system</span></span><br></pre></td></tr></table></figure><p></p><p>但是，在另外一个项目B上（Android系统），想要使用该命令去挂载，发现挂载失败，输出的log如下：</p><blockquote><p>mount: ‘/dev/block/mmcblk0p1’-&gt;’/system’: Device or resource busy</p></blockquote><p>上网搜了一下，发现是<code>mount</code>用法错了，修改之后如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># mount -o rw,remount /system</span></span><br></pre></td></tr></table></figure><p></p><p>具体这两者的差异是由于项目A和项目B使用的命令工具不一样，前者使用<code>busybox</code>，后者使用<code>toybox</code>。具体两者关于<code>mount</code>命令的用法，还在继续查找。<br><a href="https://landley.net/toybox/help.html" target="_blank" rel="noopener">https://landley.net/toybox/help.html</a><br><a href="https://busybox.net/downloads/BusyBox.html" target="_blank" rel="noopener">https://busybox.net/downloads/BusyBox.html</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 碰到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碰到的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟kernel panic并打印堆栈信息</title>
      <link href="/5364ebaa/"/>
      <url>/5364ebaa/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>在kernel中，有一个函数可以用来产生panic，就是<code>panic()</code>函数。<br>本文主要讲述如何模拟产生panic以及输出堆栈信息。<a id="more"></a></p><hr><h1 id="模拟kernel-panic"><a href="#模拟kernel-panic" class="headerlink" title="模拟kernel panic"></a>模拟kernel panic</h1><p>以下两种方法可以产生kernel panic。</p><ul><li>方法1：使用<code>panic()</code>函数：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">panic_test_init</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">printk(<span class="string">"in %s, line = %d starttttt\n"</span>, __func__, __LINE__);</span><br><span class="line">panic(<span class="string">"this code test panic"</span>);</span><br><span class="line">printk(<span class="string">"in %s, line = %d endddddddddd\n"</span>, __func__, __LINE__);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">panic_test_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">printk(<span class="string">"exit panic_test\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(panic_test_init);</span><br><span class="line">module_exit(panic_test_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE (<span class="string">"GPL"</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">"XXX Project"</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"panic test driver"</span>);</span><br></pre></td></tr></table></figure><ul><li>方法2：使用<code>sysrq-trigger</code>来出发panic<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># ehco c &gt; /proc/sysrq-trigger</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="设定发生kernel-panic后重启"><a href="#设定发生kernel-panic后重启" class="headerlink" title="设定发生kernel panic后重启"></a>设定发生kernel panic后重启</h1><p>当加载上述ko的时候，没有什么log输出，也不会重启。可以通过设定<code>/proc/sys/kernel/panic</code>的值为<code>x</code>，当产生panic后，经过<code>x</code>秒会重启。</p><p>关于这些文件的详细解释，可以参照：<code>&lt;Kernel_Dir&gt;Documentation/sysctl/kernel.txt</code></p><hr><h1 id="产生backstrace"><a href="#产生backstrace" class="headerlink" title="产生backstrace"></a>产生backstrace</h1><p>有时候发生panic，并没有堆栈信息输出，是由于kernel没有打开debug开关。<br>如果想要输出堆栈信息，必须打开<code>CONFIG_DEBUG_BUGVERBOSE</code>，如何打开这个宏，参照它的依赖关系：<code>&lt;Kernel_Dir&gt;lib/Kconfig.debug</code><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">config DEBUG_BUGVERBOSE</span><br><span class="line">    <span class="keyword">bool</span> <span class="string">"Verbose BUG() reporting (adds 70K)"</span> <span class="keyword">if</span> DEBUG_KERNEL &amp;&amp; EXPERT</span><br><span class="line">depends on BUG &amp;&amp; (GENERIC_BUG || HAVE_DEBUG_BUGVERBOSE)</span><br><span class="line">    <span class="keyword">default</span> y</span><br><span class="line">    help</span><br><span class="line">      <span class="function">Say Y here to make <span class="title">BUG</span><span class="params">()</span> panics output the file name <span class="keyword">and</span> line number</span></span><br><span class="line">      of the BUG call as well as the EIP and oops trace.  This aids</span><br><span class="line">      debugging but costs about <span class="number">70</span><span class="number">-100</span>K of memory.</span><br></pre></td></tr></table></figure><p></p><p>必须设置<code>CONFIG_BUG=y</code>。当设置<code>CONFIG_DEBUG_BUGVERBOSE=y</code>之后，发生panic，打印出来的backtrace如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[   <span class="number">19.352682</span>] in panic_test_init, line = <span class="number">11</span> starttttt</span><br><span class="line">[   <span class="number">19.358702</span>] Kernel panic - <span class="keyword">not</span> syncing: <span class="keyword">this</span> code test panic</span><br><span class="line">[   <span class="number">19.364715</span>] CPU: <span class="number">2</span> PID: <span class="number">167</span> Comm: insmod Not tainted <span class="number">4.1</span><span class="number">.15</span> #<span class="number">15</span></span><br><span class="line">[   <span class="number">19.370637</span>] Hardware name: Freescale i.MX6 Quad/DualLite (Device Tree)</span><br><span class="line">[   <span class="number">19.377166</span>] Backtrace: </span><br><span class="line">[   <span class="number">19.379631</span>] Function entered at [&lt;<span class="number">40012e18</span>&gt;] from [&lt;<span class="number">4001302</span>c&gt;]</span><br><span class="line">[   <span class="number">19.385466</span>]  r7:<span class="number">4059</span>cba8 r6:<span class="number">4057</span>edc4 r5:<span class="number">4057</span>edc4 r4:<span class="number">00000000</span></span><br><span class="line">[   <span class="number">19.391185</span>] Function entered at [&lt;<span class="number">40013014</span>&gt;] from [&lt;<span class="number">4045e4</span>ec&gt;]</span><br><span class="line">[   <span class="number">19.397020</span>] Function entered at [&lt;<span class="number">4045e460</span>&gt;] from [&lt;<span class="number">4045</span>d900&gt;]</span><br><span class="line">[   <span class="number">19.402855</span>]  r7:<span class="number">4059</span>cba8 r6:bcd7b140 r5:<span class="number">3f</span>02a1e0 r4:<span class="number">4059</span>cba8</span><br><span class="line">[   <span class="number">19.408573</span>] Function entered at [&lt;<span class="number">4045</span>d85c&gt;] from [&lt;<span class="number">3f</span>02a030&gt;]</span><br><span class="line">[   <span class="number">19.414407</span>]  r3:<span class="number">00000000</span> r2:<span class="number">00000000</span> r1:<span class="number">00000002</span> r0:<span class="number">3f</span>02a0ac</span><br><span class="line">[   <span class="number">19.420125</span>]  r7:<span class="number">3f</span>02a124</span><br><span class="line">[   <span class="number">19.422675</span>] Function entered at [&lt;<span class="number">3f</span>02a000&gt;] from [&lt;<span class="number">40009780</span>&gt;]</span><br><span class="line">[   <span class="number">19.428509</span>] Function entered at [&lt;<span class="number">40009674</span>&gt;] from [&lt;<span class="number">4045</span>dd20&gt;]</span><br><span class="line">[   <span class="number">19.434343</span>]  r10:<span class="number">3f</span>02a0dc r9:<span class="number">3f</span>02a0e8 r8:<span class="number">00000000</span> r7:<span class="number">3f</span>02a124 r6:bcd7b140 r5:<span class="number">3f</span>02a1e0</span><br><span class="line">[   <span class="number">19.442248</span>]  r4:<span class="number">3f</span>02a0dc</span><br><span class="line">[   <span class="number">19.444797</span>] Function entered at [&lt;<span class="number">4045</span>dcbc&gt;] from [&lt;<span class="number">40095400</span>&gt;]</span><br><span class="line">[   <span class="number">19.450631</span>]  r6:bc73a0a8 r5:<span class="number">3f</span>02a1e0 r4:bcc89f40</span><br><span class="line">[   <span class="number">19.455293</span>] Function entered at [&lt;<span class="number">40093</span>ea8&gt;] from [&lt;<span class="number">400956</span>d4&gt;]</span><br><span class="line">[   <span class="number">19.461127</span>]  r10:<span class="number">00000000</span> r9:c0965a40 r8:<span class="number">3</span>ebf7724 r7:bcc88000 r6:<span class="number">00f</span>1f950 r5:<span class="number">00000000</span></span><br><span class="line">[   <span class="number">19.469033</span>]  r4:<span class="number">00000</span>a40</span><br><span class="line">[   <span class="number">19.471581</span>] Function entered at [&lt;<span class="number">400955</span>a0&gt;] from [&lt;<span class="number">4000f</span>7e0&gt;]</span><br><span class="line">[   <span class="number">19.477416</span>]  r9:bcc88000 r8:<span class="number">4000f</span>984 r7:<span class="number">00000080</span> r6:<span class="number">00000</span>a40 r5:<span class="number">00000003</span> r4:<span class="number">22384</span>d14</span><br></pre></td></tr></table></figure><p></p><p>这样看不出啥具体的内容，发现之所以这样打印，是因为没有设置<code>CONFIG_KALLSYMS=y</code>。参照如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;Kernel_Dir&gt;/arch/arm/kernel/traps.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dump_backtrace_entry</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> where, <span class="keyword">unsigned</span> <span class="keyword">long</span> from, <span class="keyword">unsigned</span> <span class="keyword">long</span> frame)</span>              </span></span><br><span class="line"><span class="function"></span>&#123;                                                                                                    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KALLSYMS</span></span><br><span class="line">    printk(<span class="string">"[&lt;%08lx&gt;] (%ps) from [&lt;%08lx&gt;] (%pS)\n"</span>, where, (<span class="keyword">void</span> *)where, from, (<span class="keyword">void</span> *)from);      </span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>                                                                                                </span></span><br><span class="line">    printk(<span class="string">"Function entered at [&lt;%08lx&gt;] from [&lt;%08lx&gt;]\n"</span>, where, from);                           </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>                                                                                               </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (in_exception_text(where))                                                                    </span><br><span class="line">        dump_mem(<span class="string">""</span>, <span class="string">"Exception stack"</span>, frame + <span class="number">4</span>, frame + <span class="number">4</span> + <span class="keyword">sizeof</span>(struct pt_regs));              </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>关于这部分的信息，可以参照：<a href="http://tinylab.org/find-out-the-code-line-of-kernel-panic-address/" target="_blank" rel="noopener">http://tinylab.org/find-out-the-code-line-of-kernel-panic-address/</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux Kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lockup watchdogs &amp; rcu stall detector</title>
      <link href="/ca07e9c0/"/>
      <url>/ca07e9c0/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>在嵌入式开发中，出现freeze的问题很让人头疼，就是那种不发生kernel panic，什么log不输出，串口终端死掉，无法输入输出。这时候，肯定是哪里出现了死锁或者死循环，长时间占用CPU资源，导致其他进程无法运行。<br>比如说，在底层的USB Host控制器驱动中，设置完某个控制寄存器，然后用while来检查状态寄存器的某一位是否满足条件。如果该控制器本身出现了问题，那么，将会一直卡在while中无法退出，此时就会出现freeze。<br>还有，我们有时候会看到<code>watchdog/0</code>进程的CPU占用率非常高，此时也有可能是哪个循环语句占用太长的时间导致的。<br>以下的内容参照：<a href="http://blog.csdn.net/luckyapple1028/article/details/51932414" target="_blank" rel="noopener">http://blog.csdn.net/luckyapple1028/article/details/51932414</a><br>这篇文章帮助很大，在此表示感谢。<a id="more"></a></p><hr><h1 id="lockup-watchdogs-detector简介"><a href="#lockup-watchdogs-detector简介" class="headerlink" title="lockup watchdogs detector简介"></a>lockup watchdogs detector简介</h1><p>关于<code>lockup watchdogs detector</code>，可以参照：<code>Documentation/lockup-watchdogs.txt</code>文章。Linux Kernel中有个看门狗，用于检测死锁问题，包括<code>softlockup</code>和<code>hardlockup</code>。<br><code>softlockup</code>的介绍如下：</p><blockquote><p>A <code>softlockup</code> is defined as a bug that causes the kernel to loop in kernel mode for more than <font color="red">20 seconds</font> (see <code>Implementation</code> below fordetails), <font color="red">without giving other tasks a chance to run</font>.<br>The current stack trace is displayed upon detection and, by default, the system will stay locked up. Alternatively, the kernel can be configured to panic;<br>a sysctl, <code>kernel.softlockup_panic</code>, a kernel parameter,<code>softlockup_panic</code> (see <code>Documentation/kernel-parameters.txt</code> for details), and a compile option, <code>BOOTPARAM_HARDLOCKUP_PANIC</code>, are provided for this.</p></blockquote><p><code>hardlockup</code>介绍如下：</p><blockquote><p>A <code>hardlockup</code> is defined as a bug that causes the CPU to loop in kernel mode for more than <font color="red">10 seconds</font> (see <code>Implementation</code> below fordetails), <font color="red">without letting other interrupts have a chance to run</font>.<br>Similarly to the softlockup case, the current stack trace is displayedupon detection and the system will stay locked up unless the default behavior is changed, which can be done through a compile time knob,<br><code>BOOTPARAM_HARDLOCKUP_PANIC</code>, and a kernel parameter, <code>nmi_watchdog</code> (see <code>Documentation/kernel-parameters.txt</code> for details).</p></blockquote><p><code>softlockup</code>是进程上下文出现的死锁，<code>hardlockup</code>是中断上下文出现的死锁。</p><blockquote><p><code>R状态死锁</code>指的是某一任务一直处于TASK_RUNNING态且<code>一直占用着CPU</code>，从而导致其他进程得不到调度而饿死的情况。一般情况下，R状态死锁较可能是由于程序出现死循环导致的，可以出现在内核态的进程上下文中（内核配置为非抢占式，soft lockup），也可以出现在中断上下文中的中断处理程序中（hard lockup）。<br>异常的程序一直运行，CPU无法调度到其他的任务运行，对于单CPU的设备，则直接的表现就是“死机”。这种死锁现象较难定位，内核也同样提供了一种检测手段来检测这种死锁并向用户发出告警–<code>LOCKUP_DETECTOR</code>，它可支持监测进程上下文和中断上下文中的R状态死锁（<code>SOFTLOCKUP_DETECTOR</code>和<code>HARDLOCKUP_DETECTOR</code>），由于<code>HARDLOCKUP_DETECTOR</code>需要<code>nmi中断</code>的支持且目前的arm32环境并不支持，本文仅分析其中<code>SOFTLOCKUP_DETECTOR</code>中的原理及实现方式，并给出一个示例。</p></blockquote><hr><h1 id="lockup-watchdogs-detectors实现机制"><a href="#lockup-watchdogs-detectors实现机制" class="headerlink" title="lockup watchdogs detectors实现机制"></a>lockup watchdogs detectors实现机制</h1><p>该机制是基于<code>hrtimer</code>和<code>perf</code>子系统，介绍如下：</p><blockquote><p><font color="red">A periodic hrtimer runs to generate interrupts and kick the watchdog task</font>. An NMI perf event is generated every <code>watchdog_thresh</code>(compile-time initialized to 10 and configurable through sysctl of the same name) seconds to check for hardlockups. If any CPU in the system does not receive any hrtimer interrupt during that time the <code>hardlockup detector</code> (the handler for the NMI perf event) will generate a kernel warning or call panic, depending on theconfiguration.</p><p><font color="red">The watchdog task is a high priority kernel thread that updates a timestamp every time it is scheduled</font>. If that timestamp is not updatedfor <code>2*watchdog_thresh</code> seconds (the softlockup threshold) the <code>softlockup detector</code> (coded inside the hrtimer callback function)will dump useful debug information to the system log, after which it will call panic if it was instructed to do so or resume execution of other kernel code.</p></blockquote><p><code>lockup detector机制</code>在内核代码的<code>kernel/watchdog.c</code>中实现，本文以Linux 4.1.15版本源码为例进行分析。首先了解其背后的设计原理：</p><font color="red">利用进程上下文、中断、nmi中断的不同优先级实现死锁监测。它们3者的优先级关系为“进程上下文 &lt; 中断 &lt; nmi中断”，其中进程上下文优先级最低，可通过中断来进行监测进程的运行状态，nmi中断的优先级最高，它是一种不可屏蔽的中断，在中断上下文中发生死锁时，nmi中断处理也可正常进入，因此可用来监测中断中的死锁。</font><p>关于这部分的流程分析，我也不是很懂。我只想知道，多久喂一次狗？多久会超时？超时之后会做怎样的动作？<br>更具体的流程，请参照：<br><a href="http://blog.csdn.net/luckyapple1028/article/details/51932414" target="_blank" rel="noopener">http://blog.csdn.net/luckyapple1028/article/details/51932414</a></p><hr><h1 id="lockup-watchdogs-detectors常见参数"><a href="#lockup-watchdogs-detectors常见参数" class="headerlink" title="lockup watchdogs detectors常见参数"></a>lockup watchdogs detectors常见参数</h1><p>主要参数在<code>&lt;Kernel_Dir&gt;/Kernel/watchdog.c</code>文件中设定。</p><h2 id="watchdog-thresh"><a href="#watchdog-thresh" class="headerlink" title="watchdog_thresh"></a>watchdog_thresh</h2><p>设置看门狗超时时间，hard lockup的时间默认是10s，soft lockup的时间是20s，该值可通过<code>/proc/sys/kernel/watchdog_thresh</code>去配置。</p><h2 id="sample-period"><a href="#sample-period" class="headerlink" title="sample_period"></a>sample_period</h2><p>该值定义喂狗时间，默认是<code>watchdog_thresh</code>的五分一。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set_sample_period</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * convert watchdog_thresh from seconds to ns</span></span><br><span class="line"><span class="comment"> * the divide by 5 is to give hrtimer several chances (two</span></span><br><span class="line"><span class="comment"> * or three with the current relation between the soft</span></span><br><span class="line"><span class="comment"> * and hard thresholds) to increment before the</span></span><br><span class="line"><span class="comment"> * hardlockup detector generates a warning</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">sample_period = get_softlockup_thresh() * ((u64)NSEC_PER_SEC / <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="watchdog-timer-fn"><a href="#watchdog-timer-fn" class="headerlink" title="watchdog_timer_fn()"></a>watchdog_timer_fn()</h2><p>看门狗超时执行的函数，在这个函数里，会打印堆栈信息，用来判断是谁lockup了。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># insmod watchdog_test.ko                               </span></span><br><span class="line">[ <span class="number">2977.578690</span>] in watchdog_test_init, line = <span class="number">16</span> starttttt</span><br><span class="line">[ <span class="number">3004.000899</span>] BUG: soft lockup - CPU#<span class="number">0</span> stuck <span class="keyword">for</span> <span class="number">22</span>s! [insmod:<span class="number">391</span>]</span><br><span class="line">[ <span class="number">3004.006866</span>] Modules linked in: watchdog_test(+) wlan(O) ehci_hcd usb_f_ss_lb usb_f_ncm u_ether libcompo)</span><br><span class="line">[ <span class="number">3004.025606</span>] </span><br><span class="line">[ <span class="number">3004.027092</span>] CPU: <span class="number">0</span> PID: <span class="number">391</span> Comm: insmod Tainted: P           O <span class="number">3.14</span><span class="number">.19</span> #<span class="number">1</span></span><br><span class="line">[ <span class="number">3004.033930</span>] task: cd0ecc00 ti: ce1d8000 task.ti: ce1d8000</span><br><span class="line">[ <span class="number">3004.039304</span>] PC is at watchdog_test_init+<span class="number">0x1c</span>/<span class="number">0x20</span> [watchdog_test]</span><br><span class="line">[ <span class="number">3004.045364</span>] LR is at watchdog_test_init+<span class="number">0x1c</span>/<span class="number">0x20</span> [watchdog_test]</span><br><span class="line">[ <span class="number">3004.051428</span>] pc : [&lt;bf44b01c&gt;]    lr : [&lt;bf44b01c&gt;]    psr: <span class="number">600f</span>0013</span><br><span class="line">[ <span class="number">3004.051428</span>] sp : ce1d9e20  ip : <span class="number">00000000</span>  fp : bf44b0dc</span><br><span class="line">[ <span class="number">3004.062845</span>] r10: bf44b000  r9 : <span class="number">00000000</span>  r8 : ce1d8028</span><br><span class="line">[ <span class="number">3004.068040</span>] r7 : <span class="number">00000001</span>  r6 : bf44b094  r5 : bf44b0a0  r4 : ce1d9f58</span><br><span class="line">[ <span class="number">3004.074529</span>] r3 : <span class="number">00000752</span>  r2 : <span class="number">1374</span>d000  r1 : d3d6e340  r0 : <span class="number">0000002</span>a</span><br><span class="line">[ <span class="number">3004.081020</span>] Flags: nZCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment user</span><br><span class="line">[ <span class="number">3004.088110</span>] Control: <span class="number">10</span>c53c7d  Table: b34e404a  DAC: <span class="number">00000015</span></span><br><span class="line">[ <span class="number">3004.093823</span>] CPU: <span class="number">0</span> PID: <span class="number">391</span> Comm: insmod Tainted: P           O <span class="number">3.14</span><span class="number">.19</span> #<span class="number">1</span></span><br><span class="line">[ <span class="number">3004.100689</span>] [&lt;c0015f68&gt;] (unwind_backtrace) from [&lt;c0012288&gt;] (show_stack+<span class="number">0x10</span>/<span class="number">0x14</span>)</span><br><span class="line">[ <span class="number">3004.108406</span>] [&lt;c0012288&gt;] (show_stack) from [&lt;c047dc20&gt;] (dump_stack+<span class="number">0x80</span>/<span class="number">0x90</span>)</span><br><span class="line">[ <span class="number">3004.115600</span>] [&lt;c047dc20&gt;] (dump_stack) from [&lt;c0082e08&gt;] (watchdog_timer_fn+<span class="number">0x144</span>/<span class="number">0x17c</span>)</span><br><span class="line">[ <span class="number">3004.123573</span>] [&lt;c0082e08&gt;] (watchdog_timer_fn) from [&lt;c003c3dc&gt;] (__run_hrtimer.isra<span class="number">.32</span>+<span class="number">0x54</span>/<span class="number">0xe4</span>)</span><br><span class="line">[ <span class="number">3004.132321</span>] [&lt;c003c3dc&gt;] (__run_hrtimer.isra<span class="number">.32</span>) from [&lt;c003cca0&gt;] (hrtimer_interrupt+<span class="number">0x114</span>/<span class="number">0x2c8</span>)</span><br><span class="line">[ <span class="number">3004.141236</span>] [&lt;c003cca0&gt;] (hrtimer_interrupt) from [&lt;c0014b90&gt;] (twd_handler+<span class="number">0x34</span>/<span class="number">0x44</span>)</span><br><span class="line">[ <span class="number">3004.149119</span>] [&lt;c0014b90&gt;] (twd_handler) from [&lt;c005f650&gt;] (handle_percpu_devid_irq+<span class="number">0x6c</span>/<span class="number">0x84</span>)</span><br><span class="line">[ <span class="number">3004.157514</span>] [&lt;c005f650&gt;] (handle_percpu_devid_irq) from [&lt;c005bb80&gt;] (generic_handle_irq+<span class="number">0x2c</span>/<span class="number">0x3c</span>)</span><br><span class="line">[ <span class="number">3004.166517</span>] [&lt;c005bb80&gt;] (generic_handle_irq) from [&lt;c000fbf4&gt;] (handle_IRQ+<span class="number">0x74</span>/<span class="number">0xe8</span>)</span><br><span class="line">[ <span class="number">3004.174396</span>] [&lt;c000fbf4&gt;] (handle_IRQ) from [&lt;c0008554&gt;] (gic_handle_irq+<span class="number">0x2c</span>/<span class="number">0x5c</span>)</span><br><span class="line">[ <span class="number">3004.181930</span>] [&lt;c0008554&gt;] (gic_handle_irq) from [&lt;c0012dc0&gt;] (__irq_svc+<span class="number">0x40</span>/<span class="number">0x50</span>)</span><br><span class="line">[ <span class="number">3004.189371</span>] Exception <span class="built_in">stack</span>(<span class="number">0xce1d9dd8</span> to <span class="number">0xce1d9e20</span>)</span><br><span class="line">[ <span class="number">3004.194392</span>] <span class="number">9</span>dc0:                                                       <span class="number">0000002</span>a d3d6e340</span><br><span class="line">[ <span class="number">3004.202526</span>] <span class="number">9</span>de0: <span class="number">1374</span>d000 <span class="number">00000752</span> ce1d9f58 bf44b0a0 bf44b094 <span class="number">00000001</span> ce1d8028 <span class="number">00000000</span></span><br><span class="line">[ <span class="number">3004.210664</span>] <span class="number">9e00</span>: bf44b000 bf44b0dc <span class="number">00000000</span> ce1d9e20 bf44b01c bf44b01c <span class="number">600f</span>0013 ffffffff</span><br><span class="line">[ <span class="number">3004.218801</span>] [&lt;c0012dc0&gt;] (__irq_svc) from [&lt;bf44b01c&gt;] (watchdog_test_init+<span class="number">0x1c</span>/<span class="number">0x20</span> [watchdog_test])</span><br><span class="line">[ <span class="number">3004.227984</span>] [&lt;bf44b01c&gt;] (watchdog_test_init [watchdog_test]) from [&lt;c0008908&gt;] (do_one_initcall+<span class="number">0xd4</span>/<span class="number">0x17c</span>)</span><br><span class="line">[ <span class="number">3004.237766</span>] [&lt;c0008908&gt;] (do_one_initcall) from [&lt;c00765ec&gt;] (load_module+<span class="number">0x1bec</span>/<span class="number">0x2140</span>)</span><br><span class="line">[ <span class="number">3004.245815</span>] [&lt;c00765ec&gt;] (load_module) from [&lt;c0076be8&gt;] (SyS_init_module+<span class="number">0xa8</span>/<span class="number">0x110</span>)</span><br><span class="line">[ <span class="number">3004.253608</span>] [&lt;c0076be8&gt;] (SyS_init_module) from [&lt;c000eca0&gt;] (ret_fast_syscall+<span class="number">0x0</span>/<span class="number">0x30</span>)</span><br></pre></td></tr></table></figure><p></p><p>注意，在做上述测试<code>softlock watchdog</code>的时候，要确保<code>rcu stall detector</code>机制是关闭的或者设置<code>rcu stall detector</code>的超时更长，否则会使<code>rcu stall detector</code>先检测出来死锁。<br>设置时间要大于<code>softlock watchdog_thresh</code>的值，方法如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># echo 30 &gt; /sys/module/rcupdate/parameters/rcu_cpu_stall_timeout</span></span><br></pre></td></tr></table></figure><p></p><p>或者将<code>rcu_sched</code>的<code>stall warning</code>输出关闭，方法如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># echo 1 &gt; /sys/module/rcupdate/parameters/rcu_cpu_stall_suppress</span></span><br></pre></td></tr></table></figure><p></p><p>这里的堆栈信息，可以使用反汇编技术，确定是在哪一条语句出现问题的。<br>我这里使用的测试程序如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/delay.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">watchdog_test_init</span><span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">3</span>;</span><br><span class="line">    printk(<span class="string">"in %s, line = %d starttttt\n"</span>, __func__, __LINE__);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//mdelay(3000);</span></span><br><span class="line"></span><br><span class="line">    printk(<span class="string">"in %s, line = %d endddddddddd\n"</span>, __func__, __LINE__);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">watchdog_test_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(watchdog_test_init);</span><br><span class="line">module_exit(watchdog_test_exit);</span><br><span class="line"></span><br><span class="line">MODULE_AUTHOR(<span class="string">"XXX Project"</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"watchdog test driver"</span>);</span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br></pre></td></tr></table></figure><p></p><p>如果有打开<code>softlockup_panic</code>参数，那么还会调用<code>panic(&quot;softlockup: hung tasks&quot;);</code>以此输出panic信息供调试。</p><h2 id="softlockup-panic"><a href="#softlockup-panic" class="headerlink" title="softlockup_panic"></a>softlockup_panic</h2><p>该参数用来选择当看门狗超时的时候，是否触发panic。有以下两种方式来设置该值。非0，表示输出panic信息。该值默认为0，<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> __read_mostly softlockup_panic =</span><br><span class="line">CONFIG_BOOTPARAM_SOFTLOCKUP_PANIC_VALUE;</span><br></pre></td></tr></table></figure><p></p><p>第1种方法通过在<code>defconfig</code>中设置<code>CONFIG_BOOTPARAM_SOFTLOCKUP_PANIC=y</code>即可，因为<code>BOOTPARAM_SOFTLOCKUP_PANIC_VALUE</code>的值依赖于<code>CONFIG_BOOTPARAM_SOFTLOCKUP_PANIC_VALUE</code>.<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config BOOTPARAM_SOFTLOCKUP_PANIC_VALUE</span><br><span class="line">        <span class="keyword">int</span></span><br><span class="line">        depends on LOCKUP_DETECTOR</span><br><span class="line">        range <span class="number">0</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">if</span> !BOOTPARAM_SOFTLOCKUP_PANIC</span><br><span class="line">        <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">if</span> BOOTPARAM_SOFTLOCKUP_PANIC</span><br></pre></td></tr></table></figure><p></p><p>第2种方法是在启动命令中加入<code>softlockup_panic=</code>的参数进行选择。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">softlockup_panic_setup</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">softlockup_panic = simple_strtoul(str, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">__setup(<span class="string">"softlockup_panic="</span>, softlockup_panic_setup);</span><br></pre></td></tr></table></figure><p></p><h2 id="watchdog-user-enabled"><a href="#watchdog-user-enabled" class="headerlink" title="watchdog_user_enabled"></a>watchdog_user_enabled</h2><p>是否打开<code>lockup watchdogs</code>功能，默认为1，可通过<code>/proc/sys/kernel/watchdog</code>去设置，对应的接口函数为：<code>proc_dowatchdog()</code>。</p><hr><h1 id="watchdog-0-进程CPU占用率高调试方法"><a href="#watchdog-0-进程CPU占用率高调试方法" class="headerlink" title="watchdog/0 进程CPU占用率高调试方法"></a>watchdog/0 进程CPU占用率高调试方法</h1><p>有时候会发现<code>watchdog/0</code>(这里的0表示CPU0，下面以CPU0为例)或者其他CPU核上的<code>watchdog</code>进程的CPU占用率很高，有可能是内核中某个驱动长时间占用CPU，但是没有被锁住触发到<code>lockup watchdog detector</code>，所以就表现为<code>watchdog/0</code>的CPU占用率非常高。<br>比如说在上面的<code>watchdog_test.c</code>的驱动程序中，将<code>while(1)</code>语句改成<code>mdelay(6000)</code>，延时6s，加载该驱动后，打印出来的<code>watchdog/0</code>CPU占用率非常高。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">xxx_project:/data <span class="meta"># top -m 5 &amp;</span></span><br><span class="line"></span><br><span class="line">User <span class="number">2</span>%, System <span class="number">7</span>%, IOW <span class="number">0</span>%, IRQ <span class="number">4</span>%</span><br><span class="line">User <span class="number">8</span> + Nice <span class="number">0</span> + Sys <span class="number">21</span> + Idle <span class="number">253</span> + IOW <span class="number">0</span> + IRQ <span class="number">12</span> + SIRQ <span class="number">2</span> = <span class="number">296</span></span><br><span class="line"></span><br><span class="line">  PID   PR   NI CPU% S  #THR     VSS     RSS PCY UID      Name</span><br><span class="line">   <span class="number">57</span>   <span class="number">20</span>    <span class="number">0</span>   <span class="number">2</span>% S    <span class="number">18</span> <span class="number">108060</span>K   <span class="number">2584</span>K  fg <span class="number">0</span>        /bin/klogd</span><br><span class="line">   <span class="number">66</span>   <span class="number">20</span>    <span class="number">0</span>   <span class="number">1</span>% S    <span class="number">12</span>  <span class="number">75152</span>K   <span class="number">2400</span>K  fg <span class="number">0</span>        /system/bin/testmanager</span><br><span class="line">   <span class="number">77</span>   <span class="number">20</span>    <span class="number">0</span>   <span class="number">1</span>% S     <span class="number">9</span>  <span class="number">49408</span>K   <span class="number">2120</span>K     <span class="number">0</span>        /system/bin/ilog</span><br><span class="line">  <span class="number">440</span>   <span class="number">20</span>    <span class="number">0</span>   <span class="number">1</span>% R     <span class="number">2</span>  <span class="number">12388</span>K   <span class="number">1176</span>K     <span class="number">0</span>        top</span><br><span class="line">   <span class="number">67</span>   <span class="number">20</span>    <span class="number">0</span>   <span class="number">1</span>% S    <span class="number">27</span> <span class="number">306280</span>K   <span class="number">4596</span>K  fg <span class="number">0</span>        /system/bin/updatemanager</span><br><span class="line">xxx_project:/data # insmod watchdog_test.ko                               </span><br><span class="line">[  <span class="number">145.431829</span>] in watchdog_test_init, line = <span class="number">12</span> starttttt</span><br><span class="line">[  <span class="number">151.504804</span>] in watchdog_test_init, line = <span class="number">16</span> endddddddddd</span><br><span class="line">xxx_project:/data # </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User <span class="number">0</span>%, System <span class="number">86</span>%, IOW <span class="number">0</span>%, IRQ <span class="number">1</span>%</span><br><span class="line">User <span class="number">4</span> + Nice <span class="number">0</span> + Sys <span class="number">612</span> + Idle <span class="number">81</span> + IOW <span class="number">0</span> + IRQ <span class="number">12</span> + SIRQ <span class="number">1</span> = <span class="number">710</span></span><br><span class="line"></span><br><span class="line">  PID   PR   NI CPU% S  #THR     VSS     RSS PCY UID      Name</span><br><span class="line"><span class="number">10</span> <span class="number">-100</span>    <span class="number">0</span>  <span class="number">84</span>% S     <span class="number">1</span>      <span class="number">0</span>K      <span class="number">0</span>K     <span class="number">0</span>        watchdog/<span class="number">0</span></span><br><span class="line">  <span class="number">440</span>   <span class="number">20</span>    <span class="number">0</span>   <span class="number">0</span>% R     <span class="number">2</span>  <span class="number">12676</span>K   <span class="number">1368</span>K     <span class="number">0</span>        top</span><br><span class="line">   <span class="number">57</span>   <span class="number">20</span>    <span class="number">0</span>   <span class="number">0</span>% S    <span class="number">18</span> <span class="number">108060</span>K   <span class="number">2584</span>K  fg <span class="number">0</span>        /bin/klogd</span><br><span class="line">    <span class="number">7</span>   <span class="number">20</span>    <span class="number">0</span>   <span class="number">0</span>% S     <span class="number">1</span>      <span class="number">0</span>K      <span class="number">0</span>K     <span class="number">0</span>        rcu_sched</span><br><span class="line">   <span class="number">60</span>   <span class="number">20</span>    <span class="number">0</span>   <span class="number">0</span>% S    <span class="number">13</span>  <span class="number">70220</span>K   <span class="number">3712</span>K  fg <span class="number">0</span>        /system/bin/settingmanager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User <span class="number">6</span>%, System <span class="number">14</span>%, IOW <span class="number">0</span>%, IRQ <span class="number">6</span>%</span><br><span class="line">User <span class="number">12</span> + Nice <span class="number">0</span> + Sys <span class="number">25</span> + Idle <span class="number">123</span> + IOW <span class="number">0</span> + IRQ <span class="number">11</span> + SIRQ <span class="number">1</span> = <span class="number">172</span></span><br><span class="line"></span><br><span class="line">  PID   PR   NI CPU% S  #THR     VSS     RSS PCY UID      Name</span><br><span class="line">   <span class="number">57</span>   <span class="number">20</span>    <span class="number">0</span>   <span class="number">4</span>% S    <span class="number">18</span> <span class="number">108060</span>K   <span class="number">2584</span>K  fg <span class="number">0</span>        /bin/klogd</span><br><span class="line">  <span class="number">440</span>   <span class="number">20</span>    <span class="number">0</span>   <span class="number">2</span>% R     <span class="number">2</span>  <span class="number">12676</span>K   <span class="number">1368</span>K     <span class="number">0</span>        top</span><br><span class="line">   <span class="number">66</span>   <span class="number">20</span>    <span class="number">0</span>   <span class="number">2</span>% S    <span class="number">12</span>  <span class="number">75152</span>K   <span class="number">2400</span>K  fg <span class="number">0</span>        /system/bin/testmanager</span><br><span class="line">   <span class="number">67</span>   <span class="number">20</span>    <span class="number">0</span>   <span class="number">2</span>% S    <span class="number">27</span> <span class="number">306280</span>K   <span class="number">4596</span>K  fg <span class="number">0</span>        /system/bin/updatemanager</span><br><span class="line">   <span class="number">77</span>   <span class="number">20</span>    <span class="number">0</span>   <span class="number">1</span>% S     <span class="number">9</span>  <span class="number">49408</span>K   <span class="number">2120</span>K     <span class="number">0</span>        /system/bin/ilog</span><br></pre></td></tr></table></figure><p></p><p>上面只能看到<code>watchdog</code>的CPU占用率高的情况，没有看到更多的信息，不好确定驱动中的哪里有长时间占用CPU的情况。<br>如果要调试这种情况，我能想到将看门狗的触发时间<code>watchdog_thresh</code>设置短一点，刚好让其触发超时。比如说我这里将<code>watchdog_thresh</code>设置为2，也就是<code>softlock</code>的看门狗时间为4s，小于测试代码中的6s，看其是否能输出调试信息。<br>测试下来，这种方法是可行的。当然，仅限于死锁时间大于4s的情况，除非自己修改驱动代码。</p><hr><h1 id="rcu-stall-detector简介"><a href="#rcu-stall-detector简介" class="headerlink" title="rcu stall detector简介"></a>rcu stall detector简介</h1><p>在上面验证<code>lockup watchdogs detector</code>机制，加载<code>watchdog_test.ko</code>驱动之前，要先将<code>rcu_cpu_stall_timeout</code>的时间设置比<code>2*watchdog_thresh</code>长，否则加载<code>watchdog_test.ko</code>之后，出现的log是<code>rcu cpu stall</code>相关的log，log如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[  <span class="number">208.383733</span>] in watchdog_test_init, line = <span class="number">16</span> starttttt</span><br><span class="line">[  <span class="number">229.389303</span>] INFO: rcu_sched detected stalls on CPUs/tasks: &#123;&#125; (detected by <span class="number">0</span>, t=<span class="number">5252</span> jiffies, g=<span class="number">51235</span>, c=<span class="number">51234</span>, q=<span class="number">13</span>)</span><br><span class="line">[  <span class="number">229.399881</span>] INFO: Stall ended before state dump start</span><br></pre></td></tr></table></figure><p></p><p>关于<code>RCU stall detector</code>的详细内容，可以参照:<code>&lt;Kernel_Dir&gt;/Documentation/RCU/stallwarn.txt</code>文件，里面分别讲了什么情况下会有<code>RCU CPU Stall Warnings</code>，如何修改<code>RCU CPU Stall Detector</code>的参数，以及如何去解析该warnings。</p><p>下内容转自下面几篇文章，关于RCU的内容不是很熟悉，以后要专门学习一下。<br><a href="https://www.kernel.org/doc/Documentation/RCU/stallwarn.txt" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/RCU/stallwarn.txt</a><br><a href="http://blog.csdn.net/wdsfup/article/details/76087670" target="_blank" rel="noopener">http://blog.csdn.net/wdsfup/article/details/76087670</a><br><a href="https://www.ibm.com/developerworks/cn/linux/l-rcu/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-rcu/</a><br><a href="https://lwn.net/Articles/301910/" target="_blank" rel="noopener">https://lwn.net/Articles/301910/</a></p><h2 id="什么情况下触发rcu-cpu-stall-warning"><a href="#什么情况下触发rcu-cpu-stall-warning" class="headerlink" title="什么情况下触发rcu cpu stall warning"></a>什么情况下触发rcu cpu stall warning</h2><p>RCU是基于其原理命名的，<code>Read-Copy Update</code>：</p><ul><li>[Read]指的是对于被RCU保护的共享数据，reader可以直接访问，不需要获得任何锁；</li><li>[Copy Update]指的是writer修改数据前首先拷贝一个副本，然后在副本上进行修改，修改完毕后向reclaimer(垃圾回收器)注册一个回调函数(callback)，在适当的时机完成真正的修改操作：把原数据的指针重新指向新的被修改的数据，这里所说的适当的时机就是当既有的reader全都退出临界区的时候，而等待恰当时机的过程被称为<code>grace period</code>。</li><li>在RCU机制中，writer不需要和reader竞争任何锁，只在有多个writer的情况下它们之间需要某种锁进行同步作，如果写操作频繁的话RCU的性能会严重下降，所以RCU只适用于读多写少的情况。<font color="red">RCU CPU Stall Detector它有助于检测导致 grace period 过度延迟的因素，因为grace period的长短是RCU性能的重要因素。</font></li></ul><h2 id="rcu-stall-detector相关参数"><a href="#rcu-stall-detector相关参数" class="headerlink" title="rcu stall detector相关参数"></a>rcu stall detector相关参数</h2><p>在 sys 下，提供了两个接口来配置RCU的参数。</p><ul><li><code>/sys/module/rcupdate/parameters/rcu_cpu_stall_timeout</code> 来配置timerout，默认值为21。</li><li><code>/sys/module/rcupdate/parameters/rcu_cpu_stall_suppress</code> 来配置是否输出warning，默认值为0，表示输出。</li></ul><p>具体的参数详见：<code>&lt;Kernel_Dir&gt;/lib/Kconfig.debug</code>文件<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">config RCU_CPU_STALL_TIMEOUT</span><br><span class="line">        <span class="keyword">int</span> <span class="string">"RCU CPU stall timeout in seconds"</span></span><br><span class="line">        depends on RCU_STALL_COMMON</span><br><span class="line">        range <span class="number">3</span> <span class="number">300</span></span><br><span class="line">        <span class="keyword">default</span> <span class="number">60</span> </span><br><span class="line">        help</span><br><span class="line">          If a given RCU grace period extends more than the specified</span><br><span class="line">          number of seconds, a CPU stall warning is printed.  If the</span><br><span class="line">          RCU grace period persists, additional CPU stall warnings are</span><br><span class="line">          printed at more widely spaced intervals.</span><br><span class="line"></span><br><span class="line">config RCU_CPU_STALL_VERBOSE</span><br><span class="line">        <span class="keyword">bool</span> <span class="string">"Print additional per-task information for RCU_CPU_STALL_DETECTOR"</span></span><br><span class="line">        depends on TREE_PREEMPT_RCU</span><br><span class="line">        <span class="keyword">default</span> y</span><br><span class="line">        help</span><br><span class="line">          This option causes RCU to printk detailed per-task information</span><br><span class="line">          <span class="keyword">for</span> any tasks that are stalling the current RCU grace period.</span><br><span class="line"></span><br><span class="line">          Say N <span class="keyword">if</span> you are unsure.</span><br><span class="line"></span><br><span class="line">          Say Y <span class="keyword">if</span> you want to enable such checks.</span><br><span class="line"></span><br><span class="line">config RCU_CPU_STALL_INFO</span><br><span class="line">        <span class="keyword">bool</span> <span class="string">"Print additional diagnostics on RCU CPU stall"</span></span><br><span class="line">        <span class="function">depends <span class="title">on</span> <span class="params">(TREE_RCU || TREE_PREEMPT_RCU)</span> &amp;&amp; DEBUG_KERNEL</span></span><br><span class="line"><span class="function">        <span class="keyword">default</span> n</span></span><br><span class="line"><span class="function">        help</span></span><br><span class="line"><span class="function">          For each stalled CPU that is aware of the current RCU grace</span></span><br><span class="line">          period, print out additional per-CPU diagnostic information</span><br><span class="line">          regarding scheduling-clock ticks, idle state, <span class="keyword">and</span>,</span><br><span class="line">          <span class="keyword">for</span> RCU_FAST_NO_HZ kernels, idle-entry state.</span><br><span class="line"></span><br><span class="line">          Say N <span class="keyword">if</span> you are unsure.</span><br><span class="line"></span><br><span class="line">          Say Y <span class="keyword">if</span> you want to enable such diagnostics.</span><br></pre></td></tr></table></figure><p></p><h2 id="解析rcu-cpu-stall-warning"><a href="#解析rcu-cpu-stall-warning" class="headerlink" title="解析rcu cpu stall warning"></a>解析rcu cpu stall warning</h2><p>常见的一个warning如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[  <span class="number">229.389303</span>] INFO: rcu_sched detected stalls on CPUs/tasks: &#123;&#125; (detected by <span class="number">0</span>, t=<span class="number">5252</span> jiffies, g=<span class="number">51235</span>, c=<span class="number">51234</span>, q=<span class="number">13</span>)</span><br><span class="line">[  <span class="number">229.399881</span>] INFO: Stall ended before state dump start</span><br></pre></td></tr></table></figure><p></p><p>这里的打印在<code>&lt;Kernel_Dir&gt;/kernel/rcu/tree.c</code>中的<code>check_cpu_stall()</code> -&gt; <code>print_other_cpu_stall()</code>函数中打印:</p><blockquote><p>The <code>detected by</code> line indicates which CPU detected the stall (in thiscase, CPU 0), how many jiffies have elapsed since the start of thegrace period (in this case 5252), the number of the last grace periodto start and to complete (51235 and 51234, respectively), and an estimateof the total number of RCU callbacks queued across all CPUs (13 inthis case).</p></blockquote><hr><h1 id="jiffies与HZ和tick的关系"><a href="#jiffies与HZ和tick的关系" class="headerlink" title="jiffies与HZ和tick的关系"></a>jiffies与HZ和tick的关系</h1><p>系统运行时间（以秒为单位）：<code>system_time = (jiffies)/HZ</code></p><ul><li><code>HZ</code>：Linux核心每隔固定周期会发出<code>timer interrupt (IRQ 0)</code>，<code>HZ</code>是用来定义每一秒有几次timer interrupts；使用<code>CONFIG_HZ</code>定义；</li><li><code>tick</code>：是<code>HZ</code>的倒数，意即timer interrupt每发生一次中断的时间。如<code>HZ</code>为250时，<code>tick</code>为4毫秒(millisecond)。</li><li><code>jiffies</code>：为Linux核心变数(32位元变数，unsigned long)，它被用来纪录系统自开机以来，已经过多少的tick。每发生一次timer interrupt，Jiffies变数会被加一。</li></ul><p>以上内容参照：<a href="https://my.oschina.net/armsky/blog/36983" target="_blank" rel="noopener">https://my.oschina.net/armsky/blog/36983</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux Kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>taglist + vim + ctags + cscope</title>
      <link href="/68aec0df/"/>
      <url>/68aec0df/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>本文主要讲述<code>taglist</code> + <code>vim</code> + <code>ctags</code> + <code>cscope</code>这几个工具的安装以及结合起来使用。<a id="more"></a></p><hr><h1 id="taglist的安装"><a href="#taglist的安装" class="headerlink" title="taglist的安装"></a>taglist的安装</h1><p>参照官网上的说明：<a href="http://vim-taglist.sourceforge.net/installation.html" target="_blank" rel="noopener">http://vim-taglist.sourceforge.net/installation.html</a></p><p>(1)、<br>对于taglist版本号大于3.1：<br>下载<code>taglist.zip</code>文件并解压到<code>$HOME/.vim</code> or the <code>$HOME/vimfiles</code> or the <code>$VIM/vimfiles</code> 目录下。解压出来有两个文件(目录结构如下)</p><ul><li><code>plugin/taglist.vim</code>: main taglist plugin file</li><li><code>doc/taglist.txt</code>: documentation (help) file</li></ul><p>对于taglist版本小于3.0：<br>拷贝<code>taglist.vim</code>插件到<code>$HOME/.vim/plugin</code>目录下。<br>在vim的帮助文档中参照<code>add-plugin</code>、<code>add-global-plugin</code>和<code>runtimepath</code>关于安装vim插件的内容。</p><p>(2)、<br>进入到<code>$HOME/.vim/doc</code>或<code>$HOME/vimfiles/doc</code>或<code>$VIM/vimfiles/doc</code>目录下，打开<code>vim</code>，运行<code>:helptags .</code>去启动taglist的帮助文件。如果没有做这一步，你就不能跳转到taglist的帮助主题。</p><p>(3)、<br>如果ctags的组件不在环境变量<code>PATH</code>中，那么在<code>.vimrc</code>文件中使用<code>Tlist_Ctags_Cmd</code>的变量指定ctags组件的位置。</p><p>(4)、<br>如果你使用的Vim版本或者终端不支持改变窗口的宽度，那么在<code>.vimrc</code>文件中设置<code>Tlist_Inc_Winwidth</code>的变量为0。</p><p>(5)、<br>重启Vim。</p><p>(6)、<br>你现在可以使用<code>:TlistToggle</code>的命令(以前的版本是<code>:Tlist</code>)去打开或者关闭taglist的窗口。</p><hr><h1 id="catgs和cscope安装"><a href="#catgs和cscope安装" class="headerlink" title="catgs和cscope安装"></a>catgs和cscope安装</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#sudo apt-get install ctags</span></span><br></pre></td></tr></table></figure><hr><h1 id="vim中文使用手册"><a href="#vim中文使用手册" class="headerlink" title="vim中文使用手册"></a>vim中文使用手册</h1><p>关于vim的中文使用手册，可以参照以下网址：<br><a href="http://vimcdoc.sourceforge.net/" target="_blank" rel="noopener">http://vimcdoc.sourceforge.net/</a><br>在这里面可以下载vim的中文使用文档。</p><hr><h1 id="vim中常见操作"><a href="#vim中常见操作" class="headerlink" title="vim中常见操作"></a>vim中常见操作</h1><ul><li><code>ctrl + ]</code>来跳转到变量或者函数定义的地方。<code>ctrl + t</code>返回到跳转前的位置;</li><li>在vim的insert模式下，可以使用<code>ctrl + n</code>来实现自动补全，使用上下键进行切换;</li><li>使用命令<code>:tag func_name</code>来跳转到变量或者函数定义的地方;</li><li>vi配置<code>:set hlsearch</code>高亮所有匹配的字符串;</li><li>修改了配置文件<code>.vimrc</code>并保存后，如果希望不重启vim而让配置立即生效，可以在打开的vim中执行<code>:source ~HOME/.vimrc</code>;</li><li>在<code>taglist</code>中，按<code>ctrl + ww</code>（2次w），可以切换到函数列表区，移动到函数名称行后按ENTER即可查看函数代码。再次按<code>ctrl + ww</code>可回到编辑区；</li><li>vi选中单词并查找：<code>g + d</code>高亮显示光标所属单词，<code>n</code>查找;</li><li>vi 快速删除当前光标所在的单词：<code>c + w</code>;</li><li>vi 快速跳转到下个单词<code>w</code>;</li><li><code>:e!</code>命令可以重新装载原来的文件；</li><li><code>:help {主题}</code>命令可以获得特定主题的帮助；</li><li><code>ctrl + v</code>选中需要替换的列，按<code>r + 输入你想要替换的一个字符</code>；</li><li><code>ctrl + v</code>选中需要替换的列，按<code>I + 插入你想要的字符</code>，按回车即；</li><li>命令行模式下：<code>%</code>命令的作用是跳到匹配处，比如括号之间，C的宏指令#if #else #endif之间；</li></ul><hr><h1 id="cscope用法"><a href="#cscope用法" class="headerlink" title="cscope用法"></a>cscope用法</h1><p><code>ctrl + \ + s/g/d/c/t/e/g</code></p><ul><li>s: Find this C symbol</li><li>g: Find this definition</li><li>d: Find functions called by this function</li><li>c: Find functions calling this function</li><li>t: Find this text string</li><li>e: Find this egrep pattern</li><li>f: Find this file</li><li>i: Find files #including this file</li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> ubuntu工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>printk()用法</title>
      <link href="/42fd7a7f/"/>
      <url>/42fd7a7f/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>本文将介绍<code>__func__</code>和<code>__LINE__</code>和格式化打印<code>%p</code>、<code>%pf</code>、<code>%pF</code>的用法。<a id="more"></a></p><hr><h1 id="func和LINE"><a href="#func和LINE" class="headerlink" title="func和LINE"></a><strong>func</strong>和<strong>LINE</strong></h1><p>在调试过程中我们经常要加入如下的打印语句：</p><ul><li><code>__func__</code>可以打印出当前<code>printk</code>语句所在的函数名称；</li><li><code>__LINE__</code>可以打印出当前<code>printk</code>语句所在的行号。</li></ul><p>关于<code>__func__</code>的解释，具体请看：<a href="https://gcc.gnu.org/onlinedocs/gcc/Function-Names.html" target="_blank" rel="noopener">https://gcc.gnu.org/onlinedocs/gcc/Function-Names.html</a></p><blockquote><p>GCC provides three magic constants that hold the name of the current function as a string. In C++11 and later modes, all three are treated as constant expressions and can be used in constexpr constexts. The first of these constants is <code>__func__</code>, which is part of the C99 standard:<br>The identifier <code>__func__</code> is implicitly declared by the translator as if, immediately following the opening brace of each function definition, the declaration<br>appeared, where function-name is the name of the lexically-enclosing function. This name is the unadorned name of the function. As an extension, at file (or, in C++, namespace scope), <code>__func__</code> evaluates to the empty string.<br><code>static const char __func__[] = &quot;function-name&quot;;</code><br><code>__FUNCTION__</code> is another name for <code>__func__</code>, provided for backward compatibility with old versions of GCC.</p></blockquote><p>另外，<code>__func__</code>是一个变量，而不是预处理的宏。</p><blockquote><p>These identifiers are variables, not preprocessor macros, and may not be used to initialize char arrays or be concatenated with string literals.</p></blockquote><p>关于<code>__LINE__</code>的解释，可以参照：<a href="https://gcc.gnu.org/onlinedocs/cpp/Standard-Predefined-Macros.html" target="_blank" rel="noopener">https://gcc.gnu.org/onlinedocs/cpp/Standard-Predefined-Macros.html</a></p><blockquote><p>This macro expands to the current input line number, in the form of a decimal integer constant. While we call it a predefined macro, it’s a pretty strange macro, since its “definition” changes with each new line of source code.</p></blockquote><p>当然，想要弄清楚<code>__func__</code>和<code>__LINE__</code>是怎么实现的要费很大的力气，这里面涉及到编译原理。等有机会再学习学习。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux Kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dump_stack()用法</title>
      <link href="/3c2873c0/"/>
      <url>/3c2873c0/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>最近在看<code>Linux USB Composite Framework</code>的内容，经常看到函数指针跳转来跳转去。比如说会看到某个代码执行结构体中的<code>.bind</code>函数指针，但又不知道到底是谁在调用它。<br>此时，就可以用<code>dump_stack()</code>这个函数来追踪函数调用关系。当然，还是要自己尝试学习理解这个框架结构，不然纯粹的知道函数调用关系意义不大。另外，<code>dump_stack()</code>可用来定位Kernel Panic和Oop的问题，配合<code>objdump</code>和<code>addr2line</code>可以定位到哪一行的哪句代码出现问题。<a id="more"></a></p><hr><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>比如说在以下3个结构体中都包含<code>.bind</code>的成员，都同属于<code>Linux USB Composite Framework</code>的范畴，看多了会不知道谁调用谁。<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">usb_composite_driver</span> &#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>*name;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_device_descriptor</span>*<span class="title">dev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">usb_gadget_strings</span>**<span class="title">strings</span>;</span></span><br><span class="line"><span class="keyword">enum</span> usb_device_speedmax_speed;</span><br><span class="line"><span class="keyword">unsigned</span>needs_serial:<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>(*bind)(struct usb_composite_dev *cdev);</span><br><span class="line"><span class="keyword">int</span>(*unbind)(struct usb_composite_dev *);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>(*disconnect)(struct usb_composite_dev *);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* global suspend hooks */</span></span><br><span class="line"><span class="keyword">void</span>(*suspend)(struct usb_composite_dev *);</span><br><span class="line"><span class="keyword">void</span>(*resume)(struct usb_composite_dev *);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">usb_gadget_driver</span><span class="title">gadget_driver</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">usb_gadget_driver</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span>*function;</span><br><span class="line"><span class="keyword">enum</span> usb_device_speedmax_speed;</span><br><span class="line"><span class="keyword">int</span>(*bind)(struct usb_gadget *gadget,</span><br><span class="line">struct usb_gadget_driver *driver);</span><br><span class="line"><span class="keyword">void</span>(*unbind)(struct usb_gadget *);</span><br><span class="line"><span class="keyword">int</span>(*setup)(struct usb_gadget *,</span><br><span class="line"><span class="keyword">const</span> struct usb_ctrlrequest *);</span><br><span class="line"><span class="keyword">void</span>(*disconnect)(struct usb_gadget *);</span><br><span class="line"><span class="keyword">void</span>(*suspend)(struct usb_gadget *);</span><br><span class="line"><span class="keyword">void</span>(*resume)(struct usb_gadget *);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* FIXME support safe rmmod */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">device_driver</span><span class="title">driver</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">usb_function</span> &#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>*name;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">usb_gadget_strings</span>**<span class="title">strings</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">usb_descriptor_header</span>**<span class="title">fs_descriptors</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">usb_descriptor_header</span>**<span class="title">hs_descriptors</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">usb_descriptor_header</span>**<span class="title">ss_descriptors</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">usb_configuration</span>*<span class="title">config</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* REVISIT:  bind() functions can be marked __init, which</span></span><br><span class="line"><span class="comment"> * makes trouble for section mismatch analysis.  See if</span></span><br><span class="line"><span class="comment"> * we can't restructure things to avoid mismatching.</span></span><br><span class="line"><span class="comment"> * Related:  unbind() may kfree() but bind() won't...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* configuration management:  bind/unbind */</span></span><br><span class="line"><span class="keyword">int</span>(*bind)(struct usb_configuration *,</span><br><span class="line">struct usb_function *);</span><br><span class="line"><span class="keyword">void</span>(*unbind)(struct usb_configuration *,</span><br><span class="line">struct usb_function *);</span><br><span class="line"><span class="keyword">void</span>(*free_func)(struct usb_function *f);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">module</span>*<span class="title">mod</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* runtime state management */</span></span><br><span class="line"><span class="keyword">int</span>(*set_alt)(struct usb_function *,</span><br><span class="line"><span class="keyword">unsigned</span> interface, <span class="keyword">unsigned</span> alt);</span><br><span class="line"><span class="keyword">int</span>(*get_alt)(struct usb_function *,</span><br><span class="line"><span class="keyword">unsigned</span> interface);</span><br><span class="line"><span class="keyword">void</span>(*disable)(struct usb_function *);</span><br><span class="line"><span class="keyword">int</span>(*setup)(struct usb_function *,</span><br><span class="line"><span class="keyword">const</span> struct usb_ctrlrequest *);</span><br><span class="line"><span class="keyword">void</span>(*suspend)(struct usb_function *);</span><br><span class="line"><span class="keyword">void</span>(*resume)(struct usb_function *);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USB 3.0 additions */</span></span><br><span class="line"><span class="keyword">int</span>(*get_status)(struct usb_function *);</span><br><span class="line"><span class="keyword">int</span>(*func_suspend)(struct usb_function *,</span><br><span class="line">u8 suspend_opt);</span><br><span class="line"><span class="comment">/* private: */</span></span><br><span class="line"><span class="comment">/* internals */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">list</span>;</span></span><br><span class="line">DECLARE_BITMAP(endpoints, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">usb_function_instance</span> *<span class="title">fi</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">usb_add_config</span><span class="params">(struct usb_composite_dev *cdev,</span></span></span><br><span class="line"><span class="function"><span class="params">struct usb_configuration *config,</span></span></span><br><span class="line">int (*bind)(struct usb_configuration *))</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">composite_bind</span><span class="params">(struct usb_gadget *gadget,</span></span></span><br><span class="line"><span class="function"><span class="params">struct usb_gadget_driver *gdriver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">usb_composite_dev</span>*<span class="title">cdev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">usb_composite_driver</span>*<span class="title">composite</span> = <span class="title">to_cdriver</span>(<span class="title">gdriver</span>);</span></span><br><span class="line"><span class="keyword">int</span>status = -ENOMEM;</span><br><span class="line">printk(<span class="string">"[xxx-dump] in %s, line = %d, dump start\n"</span>, __func__, __LINE__);</span><br><span class="line">dump_stack();</span><br><span class="line">printk(<span class="string">"[xxx-dump] in %s, line = %d, dump end\n"</span>, __func__, __LINE__);</span><br><span class="line">cdev = kzalloc(<span class="keyword">sizeof</span> *cdev, GFP_KERNEL);</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如说我在<code>composite_bind()</code>中调用<code>dump_stack()</code>，代码如上。得到的函数调用栈如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[   <span class="number">35.571746</span>] <span class="number">1111111111111111111</span></span><br><span class="line">[   <span class="number">35.574990</span>] [xxx-dump] in composite_bind, line = <span class="number">1675</span>, dump start</span><br><span class="line">[   <span class="number">35.581099</span>] CPU: <span class="number">0</span> PID: <span class="number">115</span> Comm: NHPnpReceiverTD Tainted: P           O <span class="number">3.14</span><span class="number">.19</span> #<span class="number">1</span></span><br><span class="line">[   <span class="number">35.588779</span>] [&lt;c0015f68&gt;] (unwind_backtrace) from [&lt;c0012288&gt;] (show_stack+<span class="number">0x10</span>/<span class="number">0x14</span>)</span><br><span class="line">[   <span class="number">35.596540</span>] [&lt;c0012288&gt;] (show_stack) from [&lt;c047d8a8&gt;] (dump_stack+<span class="number">0x80</span>/<span class="number">0x90</span>)</span><br><span class="line">[   <span class="number">35.603793</span>] [&lt;c047d8a8&gt;] (dump_stack) from [&lt;bf045f60&gt;] (composite_bind+<span class="number">0x28</span>/<span class="number">0x1b0</span> [libcomposite])</span><br><span class="line">[   <span class="number">35.612764</span>] [&lt;bf045f60&gt;] (composite_bind [libcomposite]) from [&lt;bf0236a4&gt;] (udc_bind_to_driver+<span class="number">0x50</span>/<span class="number">0x110</span> [udc_core])</span><br><span class="line">[   <span class="number">35.623365</span>] [&lt;bf0236a4&gt;] (udc_bind_to_driver [udc_core]) from [&lt;bf023f24&gt;] (usb_gadget_probe_driver+<span class="number">0x70</span>/<span class="number">0xcc</span> [udc_core])</span><br><span class="line">[   <span class="number">35.634309</span>] [&lt;bf023f24&gt;] (usb_gadget_probe_driver [udc_core]) from [&lt;c0008908&gt;] (do_one_initcall+<span class="number">0xd4</span>/<span class="number">0x17c</span>)</span><br><span class="line">[   <span class="number">35.644133</span>] [&lt;c0008908&gt;] (do_one_initcall) from [&lt;c00765ec&gt;] (load_module+<span class="number">0x1bec</span>/<span class="number">0x2140</span>)</span><br><span class="line">[   <span class="number">35.652225</span>] [&lt;c00765ec&gt;] (load_module) from [&lt;c0076be8&gt;] (SyS_init_module+<span class="number">0xa8</span>/<span class="number">0x110</span>)</span><br><span class="line">[   <span class="number">35.660062</span>] [&lt;c0076be8&gt;] (SyS_init_module) from [&lt;c000eca0&gt;] (ret_fast_syscall+<span class="number">0x0</span>/<span class="number">0x30</span>)</span><br><span class="line">[   <span class="number">35.668148</span>] [xxx-dump] in composite_bind, line = <span class="number">1677</span>, dump end</span><br></pre></td></tr></table></figure><p></p><p>很明显，我们可以通过这个调用栈的信息知道<code>composite_bind()</code>的调用关系（<strong>从下往上</strong>）如下：</p><ul><li><code>ret_fast_syscall</code> -&gt; <code>SyS_init_module</code> -&gt; <code>load_module</code> -&gt; <code>do_one_initcall</code> -&gt;</li><li><code>usb_gadget_probe_driver</code> -&gt; <code>udc_bind_to_driver</code> -&gt; <code>composite_bind</code> -&gt;</li><li><code>dump_stack</code> -&gt; <code>show_stack</code> -&gt; <code>unwind_backtrace</code></li></ul><p>第1行是<code>module_init()</code>相关的调用，也就是说调用了<code>module_init()</code>加载某个驱动。更一般的，我们知道是注册一个<code>USB Composite Driver</code>的过程；<br>第2行可以直观的看到调用<code>composite_bind()</code>是哪个函数；<br>第3行是<code>dump_stack()</code>的调用关系；</p><p>这里只分析如下四条打印语句，<em>从下往上</em>逐条分析。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[   <span class="number">35.596540</span>] [&lt;c0012288&gt;] (show_stack) from [&lt;c047d8a8&gt;] (dump_stack+<span class="number">0x80</span>/<span class="number">0x90</span>)</span><br><span class="line">[   <span class="number">35.603793</span>] [&lt;c047d8a8&gt;] (dump_stack) from [&lt;bf045f60&gt;] (composite_bind+<span class="number">0x28</span>/<span class="number">0x1b0</span> [libcomposite])</span><br><span class="line">[   <span class="number">35.612764</span>] [&lt;bf045f60&gt;] (composite_bind [libcomposite]) from [&lt;bf0236a4&gt;] (udc_bind_to_driver+<span class="number">0x50</span>/<span class="number">0x110</span> [udc_core])</span><br><span class="line">[   <span class="number">35.623365</span>] [&lt;bf0236a4&gt;] (udc_bind_to_driver [udc_core]) from [&lt;bf023f24&gt;] (usb_gadget_probe_driver+<span class="number">0x70</span>/<span class="number">0xcc</span> [udc_core])</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="反汇编文件"><a href="#反汇编文件" class="headerlink" title="反汇编文件"></a>反汇编文件</h1><p>在函数之后的<code>[libcomposite]</code>和<code>[udc_core]</code>，标记这是ko文件<code>libcomposite.ko</code>和<code>udc_core.ko</code>。如果没有标记，说明这是build-in的，只需反汇编vmlinux即可。<br>接下来我们就将这两个ko文件和vmlinux文件objdump出来。在<code>kernel-xxx/</code>目录下执行以下语句进行反汇编。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">../prebuilts/gcc/linux-x86/arm/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-objdump -d -l -f -g -S drivers/usb/gadget/libcomposite.ko &gt; composite.<span class="built_in">log</span></span><br><span class="line">../prebuilts/gcc/linux-x86/arm/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-objdump -d -l -f -g -S drivers/usb/gadget/udc-core.ko &gt; udc-core.<span class="built_in">log</span></span><br><span class="line">../prebuilts/gcc/linux-x86/arm/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-objdump -d -l -f -g -S vmlinux &gt; vmlinux.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p></p><hr><h1 id="dump-stack-格式分析"><a href="#dump-stack-格式分析" class="headerlink" title="dump_stack()格式分析"></a>dump_stack()格式分析</h1><p>(1)、<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;bf0236a4&gt;] (udc_bind_to_driver [udc_core]) from [&lt;bf023f24&gt;] (usb_gadget_probe_driver+<span class="number">0x70</span>/<span class="number">0xcc</span> [udc_core])</span><br></pre></td></tr></table></figure><p></p><p>从上面的信息，我们至少可以获得以下信息：</p><ul><li>这个是编译进<code>udc-core</code>的ko文件的，因此我们要查看<code>udc-core.log</code>文件；</li><li>在<code>0xbf023f24</code>的地址<code>（usb_gadget_probe_driver()函数的地址偏移0x70）</code>会调用<code>udc_bind_to_driver()</code>函数。因此我们可以得出<code>usb_gadget_probe_driver()</code>函数的入口地址为<code>0xbf023f24-0x70=0xbf023eb4</code>；</li><li><code>usb_gadget_probe_driver()</code>函数总的偏移量为0xcc，即范围为：<code>0xbf023eb4~0xbf023f80</code></li></ul><p>查看<code>udc-core.log</code>文件，搜索”usb_gadget_probe_driver”的关键字，我们可以得到<code>usb_gadget_probe_driver()</code>函数的位置：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000</span>eb4 &lt;usb_gadget_probe_driver&gt;:</span><br><span class="line">usb_gadget_probe_driver():</span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/udc-core.c:<span class="number">625</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(udc_attach_driver);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">usb_gadget_probe_driver</span><span class="params">(struct usb_gadget_driver *driver)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">eb4:   e92d4038    push    &#123;r3, r4, r5, lr&#125;</span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/udc-core.c:<span class="number">629</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">usb_udc</span>      *<span class="title">udc</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="keyword">int</span>         ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!driver || !driver-&gt;bind || !driver-&gt;setup)</span><br><span class="line">     eb8:   e2505000    subs    r5, r0, #<span class="number">0</span></span><br><span class="line">     ebc:   <span class="number">0</span>a000028    beq f64 &lt;usb_gadget_probe_driver+<span class="number">0xb0</span>&gt;</span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/udc-core.c:<span class="number">629</span> (discriminator <span class="number">1</span>)</span><br><span class="line">     ec0:   e5953008    ldr r3, [r5, #<span class="number">8</span>]</span><br><span class="line">     ec4:   e3530000    cmp r3, #<span class="number">0</span></span><br><span class="line">     ec8:   <span class="number">0</span>a000025    beq f64 &lt;usb_gadget_probe_driver+<span class="number">0xb0</span>&gt;</span><br><span class="line">     ecc:   e5953010    ldr r3, [r5, #<span class="number">16</span>]</span><br><span class="line">     ed0:   e3530000    cmp r3, #<span class="number">0</span></span><br><span class="line">     ed4:   <span class="number">0</span>a000022    beq f64 &lt;usb_gadget_probe_driver+<span class="number">0xb0</span>&gt;</span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/udc-core.c:<span class="number">632</span></span><br><span class="line">        <span class="keyword">return</span> -EINVAL;</span><br><span class="line"></span><br><span class="line">    mutex_lock(&amp;udc_lock);</span><br><span class="line">     ed8:   e3004000    movw    r4, #<span class="number">0</span></span><br><span class="line">     edc:   e3404000    movt    r4, #<span class="number">0</span></span><br><span class="line">     ee0:   e1a00004    mov r0, r4</span><br><span class="line">     ee4:   ebfffffe    bl  <span class="number">0</span> &lt;mutex_lock&gt;</span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/udc-core.c:<span class="number">633</span></span><br><span class="line">    list_for_each_entry(udc, &amp;udc_list, <span class="built_in">list</span>) &#123;</span><br><span class="line">     ee8:   e1a02004    mov r2, r4</span><br><span class="line">     eec:   e5b23018    ldr r3, [r2, #<span class="number">24</span>]!</span><br><span class="line">     ef0:   e1530002    cmp r3, r2</span><br><span class="line">     ef4:   e24300f8    sub r0, r3, #<span class="number">248</span>    ; <span class="number">0xf8</span></span><br><span class="line">     ef8:   <span class="number">1</span>a000004    bne f10 &lt;usb_gadget_probe_driver+<span class="number">0x5c</span>&gt;</span><br><span class="line">     efc:   ea00000e    b   f3c &lt;usb_gadget_probe_driver+<span class="number">0x88</span>&gt;</span><br><span class="line">     f00:   e59030f8    ldr r3, [r0, #<span class="number">248</span>]  ; <span class="number">0xf8</span></span><br><span class="line">     f04:   e1530002    cmp r3, r2</span><br><span class="line">     f08:   e24300f8    sub r0, r3, #<span class="number">248</span>    ; <span class="number">0xf8</span></span><br><span class="line">     f0c:   <span class="number">0</span>a00000a    beq f3c &lt;usb_gadget_probe_driver+<span class="number">0x88</span>&gt;</span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/udc-core.c:<span class="number">635</span></span><br><span class="line">        <span class="comment">/* For now we take the first one */</span></span><br><span class="line">        <span class="keyword">if</span> (!udc-&gt;driver)</span><br><span class="line">     f10:   e51330f8    ldr r3, [r3, #<span class="number">-248</span>] ; <span class="number">0xf8</span></span><br><span class="line">     f14:   e3530000    cmp r3, #<span class="number">0</span></span><br><span class="line">     f18:   <span class="number">1</span>afffff8    bne f00 &lt;usb_gadget_probe_driver+<span class="number">0x4c</span>&gt;</span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/udc-core.c:<span class="number">643</span></span><br><span class="line"></span><br><span class="line">    pr_debug(<span class="string">"couldn't find an available UDC\n"</span>);</span><br><span class="line">    mutex_unlock(&amp;udc_lock);</span><br><span class="line">    <span class="keyword">return</span> -ENODEV;</span><br><span class="line">found:</span><br><span class="line">    ret = udc_bind_to_driver(udc, driver);</span><br><span class="line">     f1c:   e1a01005    mov r1, r5</span><br><span class="line">     f20:   ebfffdcb    bl  <span class="number">654</span> &lt;udc_bind_to_driver&gt;</span><br><span class="line">f24:   e1a04000    mov r4, r0</span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/udc-core.c:<span class="number">644</span></span><br><span class="line">    mutex_unlock(&amp;udc_lock);</span><br><span class="line">     f28:   e3000000    movw    r0, #<span class="number">0</span></span><br><span class="line">     f2c:   e3400000    movt    r0, #<span class="number">0</span></span><br><span class="line">     f30:   ebfffffe    bl  <span class="number">0</span> &lt;mutex_unlock&gt;</span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/udc-core.c:<span class="number">645</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br></pre></td></tr></table></figure><p></p><p>对于这样格式的内容，表示看不懂。但从”00000eb4 &lt;usb_gadget_probe_driver&gt;:”这句话可以推测<code>usb_gadget_probe_driver()</code>函数在<code>udc-core.ko</code>的入口地址为：<code>0x00000eb4</code>。<br><code>0x00000eb4</code>与前面推测的<code>0xbf023eb4</code>总是偏移<code>0xbf023000</code>。我猜想，<code>0xbf023000</code>的偏移量正是<code>udc-core.ko</code>相对整个kernel的偏移量。<br>所以要找到调用<code>udc_bind_to_driver()</code>的地方，那么其偏移量相对于<code>udc-core.ko</code>应为<code>0xf24</code>。<br>为了找到调用的该函数的所在行，我们使用<code>addr2line</code>工具将地址转换为行号：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#../prebuilts/gcc/linux-x86/arm/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-addr2line -e drivers/usb/gadget/udc-core.ko <span class="number">0xf24</span></span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/udc-core.c:<span class="number">643</span></span><br><span class="line"></span><br><span class="line">#../prebuilts/gcc/linux-x86/arm/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-addr2line -e drivers/usb/gadget/udc-core.ko <span class="number">0xeb4</span></span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/udc-core.c:<span class="number">625</span></span><br></pre></td></tr></table></figure><p></p><p>就可以知道在<code>usb_gadget_probe_driver()</code>函数的入口在<code>udc-core.c</code>第625行，调用<code>udc_bind_to_driver()</code>在<code>udc-core.c</code>第643行。查看代码跟解析出来的一致：<br><img src="https://pic.superbed.cn/item/5c84db843a213b04179bd60a" alt="代码"></p><p>(2)、<br>按照同样的方法再来解析下面的log：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;bf045f60&gt;] (composite_bind [libcomposite]) from [&lt;bf0236a4&gt;] (udc_bind_to_driver+<span class="number">0x50</span>/<span class="number">0x110</span> [udc_core])</span><br></pre></td></tr></table></figure><p></p><ul><li>这个是编译进<code>udc-core</code>的ko文件的，因此我们要查看<code>udc-core.log</code>文件；</li><li>在<code>0xbf0236a4</code>（在udc-core.ko的地址为0x000006a4）的地址（偏移0x50）会调用<code>composite_bind()</code>函数。因此我们可以得出<code>udc_bind_to_driver()</code>函数的地址为<code>0xbf0236a4-0x50=0xbf023654（在udc-core.ko的地址为0x00000654）</code>；</li><li><code>udc_bind_to_driver()</code>函数总的偏移量为<code>0x110</code>，即范围为：<code>0xbf023654~0xbf023764</code>；<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#../prebuilts/gcc/linux-x86/arm/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-addr2line -e drivers/usb/gadget/udc-core.ko <span class="number">0x6a4</span></span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/udc-core.c:<span class="number">577</span></span><br><span class="line"></span><br><span class="line">#../prebuilts/gcc/linux-x86/arm/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-addr2line -e drivers/usb/gadget/udc-core.ko <span class="number">0x654</span></span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/udc-core.c:<span class="number">566</span></span><br></pre></td></tr></table></figure></li></ul><p>就可以知道<code>udc_bind_to_driver()</code>函数入口在<code>udc-core.c</code>第566行，调用<code>composite_bind()</code>函数在udc-core.c第577行。<br><img src="https://pic.superbed.cn/item/5c84db843a213b04179bd60c" alt="代码调用"></p><p>(3)、<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[   <span class="number">35.603793</span>] [&lt;c047d8a8&gt;] (dump_stack) from [&lt;bf045f60&gt;] (composite_bind+<span class="number">0x28</span>/<span class="number">0x1b0</span> [libcomposite])</span><br></pre></td></tr></table></figure><p></p><ul><li>这个是编译进<code>libcomposite</code>的ko文件的，因此我们要查看<code>libcomposite.log</code>文件；</li><li><p>查看<code>composite.log</code>文件并搜索”composite_bind”得到其地址为<code>0x00002f38</code>，因此我们可以知道<code>libcomposite.ko</code>相对整个kernel偏移<code>0xbf045f38-0x00002f38=0xbf043000。</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00002f</span>38 &lt;composite_bind&gt;:</span><br><span class="line">composite_bind():</span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/composite.c:<span class="number">1671</span></span><br><span class="line">    device_remove_file(&amp;cdev-&gt;gadget-&gt;dev, &amp;dev_attr_suspended);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>以<code>libcomposite.ko</code>的地址为基准，在<code>composite_bind()</code>函数起始地址<code>0x00002f38</code>中偏移0x28，即<code>0x00002f60</code>会去调用<code>dump_stack()</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#../prebuilts/gcc/linux-x86/arm/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-addr2line -e drivers/usb/gadget/libcomposite.ko <span class="number">0x2f60</span></span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/composite.c:<span class="number">1677</span></span><br><span class="line"></span><br><span class="line">#../prebuilts/gcc/linux-x86/arm/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-addr2line -e drivers/usb/gadget/libcomposite.ko <span class="number">0x2f38</span></span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/drivers/usb/gadget/composite.c:<span class="number">1671</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://pic.superbed.cn/item/5c84db843a213b04179bd611" alt="代码调用"></p><font color="red">很明显，这就是我添加<code>dump_stack()</code>的位置，追本溯源终于找到自己熟悉的地方了。</font><p>(4)、<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[   <span class="number">35.596540</span>] [&lt;c0012288&gt;] (show_stack) from [&lt;c047d8a8&gt;] (dump_stack+<span class="number">0x80</span>/<span class="number">0x90</span>)</span><br></pre></td></tr></table></figure><p></p><p>这些是build-in的，直接在vmlinux.ko就可以找到他们的地址。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#../prebuilts/gcc/linux-x86/arm/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-addr2line -e vmlinux <span class="number">0xc047d8a8</span></span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/lib/dump_stack.c:<span class="number">52</span></span><br><span class="line"></span><br><span class="line">#../prebuilts/gcc/linux-x86/arm/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-addr2line -e vmlinux <span class="number">0xc047d828</span></span><br><span class="line">/home/victor/work/xxx_project/kernel-xxx/lib/dump_stack.c:<span class="number">27</span></span><br></pre></td></tr></table></figure><p></p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://einon.net/DocBook/kernel-api/API-vsnprintf.html" target="_blank" rel="noopener">http://einon.net/DocBook/kernel-api/API-vsnprintf.html</a><br><a href="http://blog.csdn.net/liyongming1982/article/details/16349769" target="_blank" rel="noopener">http://blog.csdn.net/liyongming1982/article/details/16349769</a><br><a href="http://blog.csdn.net/liyongming1982/article/details/16349875" target="_blank" rel="noopener">http://blog.csdn.net/liyongming1982/article/details/16349875</a><br><a href="http://blog.csdn.net/jasonchen_gbd/article/details/45585133" target="_blank" rel="noopener">http://blog.csdn.net/jasonchen_gbd/article/details/45585133</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux Kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux应用程序读写寄存器值</title>
      <link href="/26d6b194/"/>
      <url>/26d6b194/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>需求：<br>在开发过程中，我们经常需要读取CPU中某个寄存器的地址，比如说读取某一个GPIO的输出状态。如读取<code>GPIO1_IO01</code>的值（以i.MX6为例），那么就是要读取寄存器<code>0x0209c000</code>中bit1的值。</p><ul><li>在Kernel中可以使用<code>ioremap_nocache()</code>将该地址映射出来，然后去读取。</li><li>在用户程序中，可以使用<code>mmap()</code>去读取。下面我们将使用<code>mmap()</code>函数读取该寄存器的值，并写一个专门的应用程序<code>regctl</code>来读写任意寄存器的值。<a id="more"></a></li></ul><hr><h1 id="dev-mem节点"><a href="#dev-mem节点" class="headerlink" title="/dev/mem节点"></a>/dev/mem节点</h1><p><code>/dev/mem</code>是一个字符设备，应用程序可以通过<code>mmap()</code>可以将物理地址映射到用户空间的虚拟地址上，在用户空间完成对设备寄存器的操作。<br>关于这个设备节点的详细解释可以参照下面两篇文章，写得非常好！<br><a href="http://man7.org/linux/man-pages/man4/mem.4.html" target="_blank" rel="noopener">http://man7.org/linux/man-pages/man4/mem.4.html</a><br><a href="http://blog.csdn.net/skyflying2012/article/details/47611399" target="_blank" rel="noopener">http://blog.csdn.net/skyflying2012/article/details/47611399</a></p><p>在开发过程中如果想要获取对<code>/dev/mem</code>的绝对访问权限，要在Kernel中将<code>CONFIG_STRICT_DEVMEM</code>打开。</p><hr><h1 id="mmap-函数"><a href="#mmap-函数" class="headerlink" title="mmap()函数"></a>mmap()函数</h1><p>关于<code>mmap()</code>的用法可以在ubuntu平台下执行<code>#man mmap</code>命令就可以查看这个函数的用法。</p><hr><h1 id="regctl应用程序"><a href="#regctl应用程序" class="headerlink" title="regctl应用程序"></a>regctl应用程序</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEV_MEM<span class="meta-string">"/dev/mem"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAP_SIZE0x100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_help</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"show this help:\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  regctl -r addr_base offset\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  regctl -w addr_base offset value\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"for example:\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  regctl -r 0x0209c000 0\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"  regctl -w 0x0209c000 0 0x00000002\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">translat</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(c&lt;=<span class="string">'9'</span>&amp;&amp;c&gt;=<span class="string">'0'</span>) <span class="keyword">return</span> c-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span>(c&gt;=<span class="string">'a'</span> &amp;&amp; c&lt;=<span class="string">'f'</span>) <span class="keyword">return</span> c<span class="number">-87</span>;</span><br><span class="line"><span class="keyword">if</span>(c&gt;=<span class="string">'A'</span> &amp;&amp; c&lt;=<span class="string">'F'</span>) <span class="keyword">return</span> c<span class="number">-55</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转16进制</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strtohex</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">int</span> i,n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> stat = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == len)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)</span><br><span class="line">&#123;</span><br><span class="line">stat = translat(str[i]);</span><br><span class="line"><span class="keyword">if</span>(stat &gt;= <span class="number">0</span>)</span><br><span class="line">n = n*<span class="number">16</span>+stat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> addr_base=<span class="number">0</span>;<span class="comment">// 寄存器的base，参照CPU手册</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> addr_offset = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> addr = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> check_value = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *map_base=<span class="literal">NULL</span>;<span class="comment">// mmap() 映射出来的地址</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"argc = %d\n"</span>, argc);</span><br><span class="line"></span><br><span class="line">fd = open(DEV_MEM, O_RDWR);</span><br><span class="line"><span class="keyword">if</span> (fd == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"[regctl] open %s failure\n"</span>, DEV_MEM);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"-h"</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">show_help();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (argc &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"-r"</span>) == <span class="number">0</span>)</span><br><span class="line">&#123; <span class="comment">// read</span></span><br><span class="line">addr_base= strtohex(argv[<span class="number">2</span>]);</span><br><span class="line">addr_offset= strtohex(argv[<span class="number">3</span>]);</span><br><span class="line">addr = addr_base+addr_offset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(addr_offset &gt; <span class="number">0xfff</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[regctl] addr_offset error!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map_base=(<span class="keyword">unsigned</span> <span class="keyword">char</span> * )mmap(<span class="literal">NULL</span>, MAP_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, addr_base);</span><br><span class="line">value = *(<span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> *)(map_base+addr_offset);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[regctl] read success: addr:0x%08X  value:0x%08X\n"</span>, addr, value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(argc &gt; <span class="number">2</span> &amp;&amp; (<span class="number">0</span> == <span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"-w"</span>)))</span><br><span class="line">&#123; <span class="comment">// write</span></span><br><span class="line">addr_base = strtohex(argv[<span class="number">2</span>]);</span><br><span class="line">addr_offset = strtohex(argv[<span class="number">3</span>]);</span><br><span class="line">value = strtohex(argv[<span class="number">4</span>]);</span><br><span class="line"><span class="keyword">if</span>(addr &gt; <span class="number">0xfff</span> || value &gt; <span class="number">0xffffffff</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[regctl] addr_offset error!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map_base=(<span class="keyword">unsigned</span> <span class="keyword">char</span> * )mmap(<span class="literal">NULL</span>, MAP_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, addr_base);</span><br><span class="line">*(<span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> *)(map_base + addr_offset) = value;</span><br><span class="line"></span><br><span class="line"><span class="comment">// read again</span></span><br><span class="line">check_value = *(<span class="keyword">volatile</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> *)(map_base+addr_offset);</span><br><span class="line"><span class="keyword">if</span>(check_value == value)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[regctl] write success addr:0x%08X  value:0x%08X\n"</span>, addr, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">show_help();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Kernel Crash Dump</title>
      <link href="/90870e97/"/>
      <url>/90870e97/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>需求：<br>Linux发生panic之后，如果<code>/proc/sys/kernel/panic</code>没有值的话，会一直停留在panic的界面。如果有值，则会自动重启。在一般的客户版本中，一般都会设置成自动重启，但这样的话就无法查看重启的原因了。<br>为了调查问题，经常需要保留现场。因此，希望在重启之前把相应的信息以文件的形式保存下来。但是如果是文件系统发生panic，这个方案明显不行。我们可以将现场的信息暂时保留在内存里面，重启的话再从内存中将信息以log的形式保存下来。</p><p>本文主要讲述在linux3.0的版本上实现这个方案<a id="more"></a></p><hr><h1 id="所要解决的问题"><a href="#所要解决的问题" class="headerlink" title="所要解决的问题"></a>所要解决的问题</h1><p>按照上述的方案，我们需要解决以下几个问题：<br>(1)、panic的信息保存在内存哪个位置？什么时候申请，怎么申请大块内存区域？<br>(2)、怎么获取到发生panic的信息？<br>(3)、发生panic后重启的代码位置在哪？<br>(4)、重启之后判断哪个标记是否需要保存log？<br>(5)、应用层怎么读取信息？</p><font color="red">以下用例的实现使用<code>xxx_lkcd</code>(xxx project, Linux Kernel Crash Dump)来表示。</font><hr><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><p>(1)、这里涉及到内存的layout，要明确信息保存在哪个地址，保存的大小，地址要唯一，并且这部分的内存区域要reserve，不能被其他使用。<br>保存的地址为：<br><code>#define XXX_LKCD_RESERVE_AREA_ADDRESS 0xb9c00000</code>，内存区域大小为3M。<br>为了要保证这3M的内存区域不被使用，要在kernel一起来就要向内核进行申请保留，因此在<code>DT_MACHINE_START()</code>中<code>.reserve</code>对应的函数去申请内存区域。注：</p><ul><li>reserve 3M的地址有讲究，不能reserve到DDR最后的地址处。因为在uboot中，会有个relocate的动作，将会使用到高端地址，有可能会被覆盖掉；</li><li>使用dts的kernel中支持往<code>reserve_memory</code>设备节点直接reserve memory，无需再去代码中reserve。也就是说，不一定需要再调用<code>xxx_lkcd_reserve()</code>函数。</li></ul><p>(2)、对于驱动工程师而言，获取panic信息主要就是kernel log，也就是printk的log。<br>内核提供了一个<code>syslog_print_all()</code>的函数，通过该接口应用层可以获取kernel log的信息。函数定义如下：<code>&lt;kernel_dir&gt;/kernel/printk/printk.c</code><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Dump the kernel log contents to user space, pointed by buf</span></span><br><span class="line"><span class="comment"> * @buf: where to save the dump log_buffer</span></span><br><span class="line"><span class="comment"> * @size: dump log_buffer size</span></span><br><span class="line"><span class="comment"> * @clear: clear the log_buffer after dump</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">syslog_print_all</span><span class="params">(<span class="keyword">char</span> __user *buf, <span class="keyword">int</span> size, <span class="keyword">bool</span> clear)</span></span></span><br></pre></td></tr></table></figure><p></p><p>怎么办呢？这个接口是供应用层使用的，内核怎么用？<br>其实很简单，完全拷贝<code>syslog_print_all()</code>函数的内容为<code>dump_logbuffer()</code>，将其buf保存在kernel就可以，不用传到应用层即可。</p><p>(3)、发生panic，会去调用<code>DT_MACHINE_START()</code>所指定的<code>.restart</code>对应的函数。<br>因此，我们可以在kernel panic发生之后，给<code>.restart</code>对应的函数传递特定的参数，根据参数判断是正常重启还是由于kernel panic重启。<br>如果是由于kernel panic重启的话，可以做一些保护现场的操作，也就是保存信息到指定的内存区域中去。</p><p>(4)、重启之后，判断是否需要保存log是通过申请到的3M内存区域的前4个字节<code>(magic)</code>字段，如果这个字段为<code>XXX_LKCD_MAGIC</code>，那么驱动中需要创建<code>/proc</code>接口供应用程序读写并保存log到文件系统中去。</p><p>(5)、如第(4)步所说的，应用程序通过<code>/proc</code>接口来获取数据并以文件的形式保存起来。</p><hr><h1 id="详细流程图"><a href="#详细流程图" class="headerlink" title="详细流程图"></a>详细流程图</h1><p><img src="https://pic.superbed.cn/item/5c84dc843a213b04179be1ab" alt="流程图"></p><hr><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>在<code>Kernel_SrcDir/drivers/</code>目录下创建<code>xxx_lkcd/</code>的目录文件，在里面添加如下文件：</p><ul><li><code>Makefile</code></li><li><code>Kconfig</code></li><li><code>xxx_lkcd.c</code>：实现大块内存区域的申请以及重启之前的信息保存动作；</li><li><code>xxx_lkcd.h</code>：定义内存区域大小、文件名等内容；</li><li><code>xxx_lkcd_proc.c</code>: 创建<code>/proc/xxx_lkcd/</code>接口供应用层读取数据</li></ul><p>(1)、Makefile<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj-$(CONFIG_XXX_LKCD) += xxx_lkcd.o</span><br><span class="line">obj-$(CONFIG_XXX_LKCD) += xxx_lkcd_proc.o</span><br></pre></td></tr></table></figure><p></p><p>(2)、Kconfig<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># ARM linux crash dump configuration</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">menu <span class="string">"xxx linux kernel crash dump"</span></span><br><span class="line"></span><br><span class="line">config XXX_LKCD</span><br><span class="line">    <span class="keyword">bool</span> <span class="string">"Enable xxx linux kernel crash dump"</span></span><br><span class="line">    <span class="keyword">default</span> n</span><br><span class="line">    depends on PROC_FS &amp;&amp; ARM</span><br><span class="line">    help</span><br><span class="line">        Enable xxx linux kernel crash dump</span><br><span class="line">endmenu</span><br></pre></td></tr></table></figure><p></p><p>(3)、xxx_lkcd.c<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"xxx_lkcd.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xxx_lkcd_mem_info</span> <span class="title">xxx_lkcd_mem</span> = &#123;</span></span><br><span class="line">.psize = <span class="keyword">sizeof</span>(struct xxx_lkcd_area_info),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xxx_lkcd_reserve() - 一开机申请大块内存区域</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> __<span class="function">init <span class="title">xxx_lkcd_reserve</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">phys_addr_t</span> alignment = SZ_1M;</span><br><span class="line"></span><br><span class="line">printk(<span class="string">"3333333333333333333333\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查申请的内存区域不能超过 SIZE_MAX</span></span><br><span class="line">    BUILD_BUG_ON(SIZE_MAX &lt; FIELD_SIZEOF(struct xxx_lkcd_area_info, logger_kernel));</span><br><span class="line">    BUILD_BUG_ON(SIZE_MAX &lt; FIELD_SIZEOF(struct xxx_lkcd_area_info, logger_main));</span><br><span class="line">    BUILD_BUG_ON(SZ_3M &lt; <span class="keyword">sizeof</span>(struct xxx_lkcd_area_info));</span><br><span class="line"></span><br><span class="line">xxx_lkcd_mem.psize = ALIGN(xxx_lkcd_mem.psize, alignment);</span><br><span class="line"></span><br><span class="line">    BUILD_BUG_ON(XXX_LKCD_RESERVE_AREA_ADDRESS != ALIGN(XXX_LKCD_RESERVE_AREA_ADDRESS, PAGE_SIZE));</span><br><span class="line"></span><br><span class="line">xxx_lkcd_mem.pstart = XXX_LKCD_RESERVE_AREA_ADDRESS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 申请保留大的内存空间供存储发生 panic 后的 log</span></span><br><span class="line"><span class="keyword">if</span> (XXX_LKCD_RESERVE_AREA_ADDRESS &amp;&amp; xxx_lkcd_mem.psize)&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == memblock_is_region_reserved(xxx_lkcd_mem.pstart, xxx_lkcd_mem.psize))</span><br><span class="line">printk(<span class="string">"[xxx_lkcd] store log area is free to use\n"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd] store log area is reserved by others\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">ret = memblock_reserve(xxx_lkcd_mem.pstart, xxx_lkcd_mem.psize);</span><br><span class="line"><span class="keyword">if</span> (ret&lt;<span class="number">0</span>)&#123;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd] can't memblock_reserve at %08lx, ret = %d\n"</span>, xxx_lkcd_mem.pstart, ret);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd] memblock_reserve at %08lx\n"</span>, xxx_lkcd_mem.pstart);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = memblock_free(xxx_lkcd_mem.pstart, xxx_lkcd_mem.psize);</span><br><span class="line"><span class="keyword">if</span> (ret&lt;<span class="number">0</span>)&#123;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd] memblock_free failed, ret = %d\n"</span>,ret);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = memblock_remove(xxx_lkcd_mem.pstart, xxx_lkcd_mem.psize);</span><br><span class="line"><span class="keyword">if</span> (ret&lt;<span class="number">0</span>)&#123;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd] memblock_remove failed, ret = %d\n"</span>,ret);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd] store log area is NULL\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printk(<span class="string">"[xxx_lkcd] reserved %ldM at %08lx\n"</span>, xxx_lkcd_mem.psize/SZ_1M, xxx_lkcd_mem.pstart);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xxx_lkcd_save() - 重启之前保存现场信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xxx_lkcd_save</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec</span><span class="title">cur</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> i = <span class="number">0</span>;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd] xxx_lkcd_save\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xxx_lkcd_area_info</span> *<span class="title">local_xxx_lkcd_area</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (xxx_lkcd_mem.vstart) &#123;</span><br><span class="line">local_xxx_lkcd_area = (struct xxx_lkcd_area_info *)xxx_lkcd_mem.vstart;</span><br><span class="line"><span class="keyword">if</span> (XXX_LKCD_MAGIC != local_xxx_lkcd_area-&gt;magic) &#123;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd] not previous data, start to dump data !!\n"</span>);</span><br><span class="line"><span class="built_in">memset</span>(local_xxx_lkcd_area, <span class="number">0</span>, <span class="keyword">sizeof</span>(*local_xxx_lkcd_area));</span><br><span class="line"></span><br><span class="line">getnstimeofday(&amp;cur);</span><br><span class="line">local_xxx_lkcd_area-&gt;time = cur.tv_sec;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存 panic 发生时的 kernel log 和 android log</span></span><br><span class="line">local_xxx_lkcd_area-&gt;logger_kernel_len = dump_logbuffer(local_xxx_lkcd_area-&gt;logger_kernel, <span class="keyword">sizeof</span>(local_xxx_lkcd_area-&gt;logger_kernel), <span class="number">0</span>);</span><br><span class="line"><span class="comment">//local_xxx_lkcd_area-&gt;logger_main_len = dump_android_log("log_main", local_xxx_lkcd_area-&gt;logger_main, sizeof(local_xxx_lkcd_area-&gt;logger_main));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 panic 的标记</span></span><br><span class="line">local_xxx_lkcd_area-&gt;magic = XXX_LKCD_MAGIC;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd] there is old data,not dump\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd] dump logger_kernel_len = %d\n"</span>, local_xxx_lkcd_area-&gt;logger_kernel_len);</span><br><span class="line">printk(<span class="string">"[xxx_lkcd] dump logger_main_log_len = %d\n"</span>,local_xxx_lkcd_area-&gt;logger_main_len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>(4)、xxx_lkcd.h<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __XXX_LKCD_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __XXX_LKCD_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/mach/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/setup.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/mach/arch.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sizes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/sizes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/mach-types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kmsg_dump.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/memblock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/setup.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/io.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/ioport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/proc_fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/seq_file.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_RESERVE_AREA_ADDRESS0xb9c00000<span class="comment">// log 存放的内存地址</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_MAGIC0xaaaaaaaa<span class="comment">// 标记是否发生 panic</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_PROC_PATH_NAME<span class="meta-string">"xxx_lkcd"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_TIME_NAME<span class="meta-string">"time"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_CONTROL<span class="meta-string">"control"</span><span class="comment">// 控制接口</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_LOGGER_KERNEL_NAME<span class="meta-string">"logger_kernel"</span><span class="comment">// 存放 kernel 的log</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_LOGGER_MAIN_NAME<span class="meta-string">"logger_main"</span><span class="comment">// 存放 android 的log</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> size_t <span class="title">dump_android_log</span><span class="params">(<span class="keyword">char</span> *, <span class="keyword">char</span> *, <span class="keyword">size_t</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 3M 空间详细的分布以存储log</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xxx_lkcd_area_info</span> &#123;</span></span><br><span class="line">u32magic;</span><br><span class="line"><span class="keyword">time_t</span>time;</span><br><span class="line"><span class="keyword">size_t</span>logger_kernel_len;</span><br><span class="line"><span class="keyword">char</span>logger_kernel[<span class="number">256</span>*<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">size_t</span>logger_main_len;</span><br><span class="line"><span class="keyword">char</span>logger_main[<span class="number">2</span>*<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储存储空间的大小以及制定位置</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xxx_lkcd_mem_info</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> pstart;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> psize;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> vstart;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p></p><p>(5)、xxx_lkcd_proc.c<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"xxx_lkcd.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_IOC_MAGIC              <span class="meta-string">'x'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOC_XXX_LKCD_PANIC     _IOW(XXX_LKCD_IOC_MAGIC, 0, __u8)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOC_XXX_LKCD_CLEAR_DATA   _IOW(XXX_LKCD_IOC_MAGIC, 1, __u8)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOC_XXX_LKCD_FILL_DATA   _IOW(XXX_LKCD_IOC_MAGIC, 2, __u8)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">xxx_lkcd_mem_info</span> <span class="title">xxx_lkcd_mem</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xxx_lkcd_area_info</span> *<span class="title">xxx_lkcd_area</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">xxx_lkcd_control_proc_open</span><span class="params">(struct inode * inode, struct file * filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /proc/xxx_lkcd/control 控制接口，可以往里面做相应的控制</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">xxx_lkcd_control_proc_write</span><span class="params">(struct file * file, <span class="keyword">const</span> <span class="keyword">char</span> __user * buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span> *f_pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> cmd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (get_user(cmd, buf))&#123;</span><br><span class="line"><span class="keyword">return</span> -EFAULT;</span><br><span class="line">&#125;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd_proc] cmd = %d\n"</span>, cmd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cmd == <span class="string">'h'</span>)&#123;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd_proc] show this help\n"</span>);</span><br><span class="line">printk(<span class="string">"echo 'p' &gt; /proc/xxx_lkcd/control : create panic manually\n"</span>);</span><br><span class="line">printk(<span class="string">"echo 'h' &gt; /proc/xxx_lkcd/control : show this help\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cmd == <span class="string">'p'</span>)&#123;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd_proc] creat kernel panic manually\n"</span>);</span><br><span class="line">panic(<span class="string">"[xxx_lkcd_proc] creat kernel panic manually in xxx_lkcd_proc module\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">xxx_lkcd_control_proc_ioctl</span><span class="params">(struct file *filp, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> retval = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">printk(<span class="string">"[xxx_lkcd_proc] this is in %s, cmd = %d, arg = %d\n"</span>, __func__, cmd, arg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(cmd) &#123;</span><br><span class="line"><span class="keyword">case</span> IOC_XXX_LKCD_PANIC:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">xxx_lkcd_proc_read</span><span class="params">(struct seq_file *seq, <span class="keyword">void</span> *vo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//printk("[xxx_lkcd_proc] xxx_lkcd_proc_read, xxx_lkcd_area-&gt;magic = 0x%x\n", xxx_lkcd_area-&gt;magic);</span></span><br><span class="line"><span class="keyword">if</span> (XXX_LKCD_MAGIC == xxx_lkcd_area-&gt;magic) &#123;</span><br><span class="line"><span class="keyword">char</span> *filename = (<span class="keyword">char</span> *)seq-&gt;<span class="keyword">private</span>;</span><br><span class="line"><span class="comment">//printk("[xxx_lkcd_proc] read filename = %s\n", filename);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(XXX_LKCD_LOGGER_KERNEL_NAME, filename)) &#123;</span><br><span class="line"><span class="keyword">char</span> *logger_kernel = xxx_lkcd_area-&gt;logger_kernel;</span><br><span class="line"><span class="keyword">int</span> logger_kernel_size = <span class="keyword">sizeof</span>(xxx_lkcd_area-&gt;logger_kernel);</span><br><span class="line"><span class="keyword">while</span> ((logger_kernel &lt; (xxx_lkcd_area-&gt;logger_kernel + logger_kernel_size)) &amp;&amp; *logger_kernel) &#123;</span><br><span class="line">seq_putc(seq, *logger_kernel++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strcmp</span>(XXX_LKCD_LOGGER_MAIN_NAME, filename)) &#123;</span><br><span class="line"><span class="keyword">char</span> *logger_main = xxx_lkcd_area-&gt;logger_main;</span><br><span class="line"><span class="keyword">int</span> logger_main_size = <span class="keyword">sizeof</span>(xxx_lkcd_area-&gt;logger_main);</span><br><span class="line"><span class="keyword">while</span> ((logger_main &lt; (xxx_lkcd_area-&gt;logger_main + logger_main_size)) &amp;&amp; *logger_main) &#123;</span><br><span class="line">seq_putc(seq, *logger_main++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">xxx_lkcd_proc_open</span><span class="params">(struct inode * inode, struct file * filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//printk("[xxx_lkcd_proc] xxx_lkcd_proc_open, d_iname = %s\n", filp-&gt;f_path.dentry-&gt;d_iname);</span></span><br><span class="line"><span class="keyword">return</span> single_open(filp, xxx_lkcd_proc_read, filp-&gt;f_path.dentry-&gt;d_iname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制接口操作集合</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">xxx_lkcd_control_proc_fops</span> = &#123;</span></span><br><span class="line">.open= xxx_lkcd_control_proc_open,</span><br><span class="line">.write= xxx_lkcd_control_proc_write,</span><br><span class="line">.unlocked_ioctl = xxx_lkcd_control_proc_ioctl,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取接口操作集合</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">xxx_lkcd_proc_fops</span> = &#123;</span></span><br><span class="line">.open= xxx_lkcd_proc_open,</span><br><span class="line">.read= seq_read,</span><br><span class="line">.llseek= seq_lseek,</span><br><span class="line">.release= single_release,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建与应用层通信的 /proc/xxx_lkcd 接口</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">xxx_lkcd_proc_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (xxx_lkcd_mem.pstart &amp;&amp; xxx_lkcd_mem.psize) &#123;</span><br><span class="line"><span class="keyword">if</span> (!request_mem_region(xxx_lkcd_mem.pstart, xxx_lkcd_mem.psize, <span class="string">"xxx_lkcd_region_area"</span> )) &#123;</span><br><span class="line">pr_err(<span class="string">"[xxx_lkcd_proc] request mem region failed, start=0x%08lx,size=0x%08lx\n"</span>, xxx_lkcd_mem.pstart, xxx_lkcd_mem.psize);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">xxx_lkcd_mem.vstart = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)ioremap_nocache(xxx_lkcd_mem.pstart, xxx_lkcd_mem.psize);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == xxx_lkcd_mem.vstart) &#123;</span><br><span class="line">pr_err(<span class="string">"[xxx_lkcd_proc] get xxx lkcd virtual start address error\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pr_err(<span class="string">"[xxx_lkcd_proc] get xxx lkcd virtual start address %08lx ok\n"</span>, xxx_lkcd_mem.vstart);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取到该内存区域的首地址</span></span><br><span class="line">xxx_lkcd_area = (struct linux_crash_dump *)xxx_lkcd_mem.vstart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> != xxx_lkcd_area) &#123;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd_proc] xxx_lkcd_area-&gt;magic = 0x%x\n"</span>, xxx_lkcd_area-&gt;magic);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd_proc] xxx_lkcd_area is NULL !!!!!!!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 /proc/xxx_lkcd/control 的控制接口</span></span><br><span class="line">printk(<span class="string">"[xxx_lkcd_proc] create /proc/xxx_lkcd/control interface\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(!proc_mkdir(XXX_LKCD_PROC_PATH_NAME, <span class="literal">NULL</span>) ||</span><br><span class="line">!proc_create(XXX_LKCD_PROC_PATH_NAME<span class="string">"/"</span>XXX_LKCD_CONTROL, S_IRUSR, <span class="literal">NULL</span>, &amp;xxx_lkcd_control_proc_fops))</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd_proc] create xxx lkcd control proc interface Error\n"</span>);</span><br><span class="line">release_mem_region(xxx_lkcd_mem.pstart, xxx_lkcd_mem.psize);</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有保存 kernel panic 的log，那么此时就创建 proc 的节点供应用程序读取</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="literal">NULL</span> != xxx_lkcd_area) &amp;&amp; (XXX_LKCD_MAGIC == xxx_lkcd_area-&gt;magic)) &#123;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd_proc] create /proc/xxx_lkcd/normal interface\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(!proc_create(XXX_LKCD_PROC_PATH_NAME<span class="string">"/"</span>XXX_LKCD_TIME_NAME, S_IRUSR, <span class="literal">NULL</span>, &amp;xxx_lkcd_proc_fops) ||</span><br><span class="line">!proc_create(XXX_LKCD_PROC_PATH_NAME<span class="string">"/"</span>XXX_LKCD_LOGGER_KERNEL_NAME, S_IRUSR, <span class="literal">NULL</span>, &amp;xxx_lkcd_proc_fops) ||</span><br><span class="line">!proc_create(XXX_LKCD_PROC_PATH_NAME<span class="string">"/"</span>XXX_LKCD_LOGGER_MAIN_NAME, S_IRUSR, <span class="literal">NULL</span>, &amp;xxx_lkcd_proc_fops) )</span><br><span class="line">&#123;</span><br><span class="line">printk(<span class="string">"[xxx_lkcd_proc] xxx lkcd normal proc interface Error\n"</span>);</span><br><span class="line">release_mem_region(xxx_lkcd_mem.pstart, xxx_lkcd_mem.psize);</span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module_init(xxx_lkcd_proc_init);</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h1><p>(1)、添加<code>DT_MACHINE_START()</code>指定的<code>.reserve</code>和<code>.restart</code>对应的函数，此处以<code>i.MX6</code>平台为例。<br>在<code>arch/arm/mach-imx/board-xxx.c</code>文件的末尾都会定义如下的结构，用于与<code>dts</code>中指定的<code>compatible</code>进行匹配，匹配完毕之后就会执行其相应的内容：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DT_MACHINE_START(IMX6Q, <span class="string">"Freescale i.MX6 Quad/DualLite (Device Tree)"</span>)</span><br><span class="line">    .smp        = smp_ops(imx_smp_ops),</span><br><span class="line">    .map_io     = imx6q_map_io,</span><br><span class="line">    .init_irq   = imx6q_init_irq,</span><br><span class="line">    .init_machine   = imx6q_init_machine,</span><br><span class="line">    .init_late      = imx6q_init_late,</span><br><span class="line">    .reserve    = mx6q_reserve,</span><br><span class="line">    .restart    = imx6q_restart,</span><br><span class="line">    .dt_compat  = imx6q_dt_compat,</span><br><span class="line">MACHINE_END</span><br></pre></td></tr></table></figure><p></p><ul><li><p>在机器<font color="red">启动</font>的时候会执行<code>.init_machine</code>对应的函数<code>imx6q_init_machine()</code>和<code>.reserve</code>对应的函数<code>mx6q_reserve()</code>。<br>因此，我们可以在<code>mx6q_reserve()</code>中事先去申请一块大块的内存用于保存log，这块内存在一开机就申请，不让其他程序使用。也就是说在<code>mx6q_reserve()</code>中调用<code>xxx_lkcd_reserve()</code>函数。</p></li><li><p>在机器<font color="red">重启之前</font>，会去执行<code>.restart</code>对应的函数<code>imx6q_restart()</code>。<br>因此，我们可以在kernel panic发生之后，给<code>imx6q_restart()</code>函数传递特定的参数，根据参数判断是正常重启还是由于kernel panic重启，如果是由于kernel panic 重启的话，可以做一些保护现场的操作。<br>因此，在<code>imx6q_restart()</code>中调用<code>xxx_lkcd_save()</code>函数即可。</p></li></ul><p>(2)、<code>xxx_lkcd_reserve()</code>函数用来申请3M的内存区域，<font color="red">起始地址为<code>xxx_lkcd_mem.pstart</code>，这是真正的内存物理地址，大小为 xxx_lkcd_mem.psize。</font>在执行<code>xxx_lkcd_proc_init()</code>内容的时候会去获取到虚拟地址，如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx_lkcd_mem.vstart = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)ioremap_nocache(xxx_lkcd_mem.pstart, xxx_lkcd_mem.psize);</span><br></pre></td></tr></table></figure><p></p><p>因此我们就可以将现场的信息写入到虚拟地址<code>xxx_lkcd_mem.vstart</code>指定的区域中去。可以通过<code>#cat /proc/iomem</code>查看地址分配的情况。</p><p>(3)、<code>xxx_lkcd_save()</code>是用来保护现场信息的，将其内容写入到<code>struct xxx_lkcd_area_info</code>中去，总共3M大小。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xxx_lkcd_area_info</span> &#123;</span></span><br><span class="line">u32magic;</span><br><span class="line"><span class="keyword">time_t</span>time;</span><br><span class="line"><span class="keyword">size_t</span>logger_kernel_len;</span><br><span class="line"><span class="keyword">char</span>logger_kernel[<span class="number">256</span>*<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">size_t</span>logger_main_len;</span><br><span class="line"><span class="keyword">char</span>logger_main[<span class="number">2</span>*<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>(4)、我们会固定的去加载<code>xxx_lkcd_proc</code>驱动，也就是：<code>module_init(xxx_lkcd_proc_init);</code><br>在这个驱动中会去固定创建一个<code>/proc/xxx_lkcd/control</code>控制接口，可以通过该接口模拟发生panic或者控制3M的内存区域。之后根据<code>xxx_lkcd_area-&gt;magic</code>字段的值来判断是否有panic发生，如果有panic发生，那么就创建通常的读写接口给应用程序保存现场信息。比如说<code>/proc/xxx_lkcd/logger_kernel</code>来保存kernel 的log信息。</p><p>(5)、驱动中提供给应用程序读取的接口为：<code>xxx_lkcd_proc_read()</code>。</p><hr><h1 id="应用层测试程序"><a href="#应用层测试程序" class="headerlink" title="应用层测试程序"></a>应用层测试程序</h1><p>应用层首先会创建文件用于保存从<code>/proc/xxx_lkcd/logger_kernel</code>接口读取到的数据，也就是<code>XXX_LKCD_MakeDir()</code>。<br><code>XXX_LKCD_SaveFile()</code>用于从<code>/proc</code>接口读取数据并写入到创建的文件中。<code>xxx_lkcd_test.c</code>的内容如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mount.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/reboot.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NEED_MOUNT 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 linux kernel crash dump 的文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_PROC_PATH<span class="meta-string">"/proc/xxx_lkcd"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_LOGGER_KERNEL<span class="meta-string">"/proc/xxx_lkcd/logger_kernel"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_LOGGER_MAIN<span class="meta-string">"/proc/xxx_lkcd/logger_main"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存从 /proc/xxx_lkcd 中读到数据的路径</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_STOREAGE_DIR_1 <span class="meta-string">"/var"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_STOREAGE_DIR_2 <span class="meta-string">"/var/xxx_lkcd"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_STOREAGE_DEV<span class="meta-string">"/dev/block/mmcblk0p3"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_LOGGER_KERNEL_NAME<span class="meta-string">"logger_kernel"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_LOGGER_MAIN_NAME<span class="meta-string">"logger_main"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_FILE_MODE0777</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_DUMP_KERNEL_SIZE(256*1024)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XXX_LKCD_DUMP_MAIN_SIZE(2*1024*1024)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">XXX_LKCD_SaveOneFile</span><span class="params">(<span class="keyword">char</span> *src_path, <span class="keyword">char</span> *dest_path, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> src_fd;</span><br><span class="line"><span class="keyword">int</span> dest_fd;</span><br><span class="line"><span class="keyword">char</span> *buffer;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">buffer = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(size * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"></span><br><span class="line">src_fd = open(src_path, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == src_fd) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[xxx_lkcd_test] open src file: %s failed\n"</span>, src_path);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//printf("[xxx_lkcd_test] open file: %s ok\n", src_path);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dest_fd = open(dest_path, O_CREAT|O_RDWR, XXX_LKCD_FILE_MODE);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == dest_fd) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[xxx_lkcd_test] open dest file: %s failed\n"</span>, dest_path);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//printf("[xxx_lkcd_test] open file: %s ok\n", dest_path);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = read(src_fd, buffer, size);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == ret) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[xxx_lkcd_test] read src failure\n"</span>);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = write(dest_fd, buffer, ret);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> == ret) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[xxx_lkcd_test] write dest failure\n"</span>);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">close(src_fd);</span><br><span class="line">close(dest_fd);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存log</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">XXX_LKCD_SaveFile</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> logger_path[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">snprintf</span>(logger_path, <span class="number">255</span>, <span class="string">"%s%s%s"</span>, XXX_LKCD_STOREAGE_DIR_2, <span class="string">"/"</span>, XXX_LKCD_LOGGER_MAIN_NAME);</span><br><span class="line"><span class="comment">//printf("[xxx_lkcd_test] logger_path = %s\n", logger_path);</span></span><br><span class="line">ret = XXX_LKCD_SaveOneFile(XXX_LKCD_LOGGER_MAIN, logger_path, XXX_LKCD_DUMP_MAIN_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">snprintf</span>(logger_path, <span class="number">255</span>, <span class="string">"%s%s%s"</span>, XXX_LKCD_STOREAGE_DIR_2, <span class="string">"/"</span>, XXX_LKCD_LOGGER_KERNEL_NAME);</span><br><span class="line"><span class="comment">//printf("[xxx_lkcd_test] logger_path = %s\n", logger_path);</span></span><br><span class="line">ret = XXX_LKCD_SaveOneFile(XXX_LKCD_LOGGER_KERNEL, logger_path, XXX_LKCD_DUMP_KERNEL_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="number">-1</span> == ret)?<span class="number">-1</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建保存 log 的目录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">XXX_LKCD_MakeDir</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span>ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ret = mkdir(XXX_LKCD_STOREAGE_DIR_1, XXX_LKCD_FILE_MODE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="number">-1</span> != ret) || (<span class="number">-1</span> == ret)) &#123;</span><br><span class="line"><span class="comment">//printf("[xxx_lkcd_test] mkdir %s sucess\n", XXX_LKCD_STOREAGE_DIR_1);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> NEED_MOUNT</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> != mount(XXX_LKCD_STOREAGE_DEV, XXX_LKCD_STOREAGE_DIR_1, <span class="string">"ext4"</span>, MS_NODEV|MS_NOSUID, <span class="literal">NULL</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[xxx_lkcd_test] mount %s failed\n"</span>, XXX_LKCD_STOREAGE_DEV);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("[xxx_lkcd_test] mount %s succeed\n", XXX_LKCD_STOREAGE_DEV);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">ret = mkdir(XXX_LKCD_STOREAGE_DIR_2, XXX_LKCD_FILE_MODE);</span><br><span class="line"><span class="keyword">if</span> ((<span class="number">-1</span> != ret) || (<span class="number">-1</span> == ret)) &#123;</span><br><span class="line"><span class="comment">//printf("[xxx_lkcd_test] mkdir %s sucess\n", XXX_LKCD_STOREAGE_DIR_2);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[xxx_lkcd_test] main() mkdir %s failed\n"</span>, XXX_LKCD_STOREAGE_DIR_2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[xxx_lkcd_test] main() mkdir %s failed\n"</span>, XXX_LKCD_STOREAGE_DIR_1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fd = open(XXX_LKCD_PROC_PATH, O_RDONLY);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">-1</span> != fd) &#123;</span><br><span class="line">close(fd);</span><br><span class="line"><span class="comment">//printf("%s,start do dump ====\n", XXX_LKCD_PROC_PATH);</span></span><br><span class="line"><span class="keyword">if</span>( <span class="number">0</span> == XXX_LKCD_MakeDir() ) &#123;</span><br><span class="line">XXX_LKCD_SaveFile();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[xxx_lkcd_test] main() %s not exist, return\n"</span>, XXX_LKCD_PROC_PATH);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux Kernel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改xxx_defconfig没有起效果原因分析</title>
      <link href="/abc20ccf/"/>
      <url>/abc20ccf/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>问题：正常情况下我们要在Kernel中配置某个功能，会去<code>Kernel_SrcDir/arch/arm/configs/xxx_defconfig</code>文件中修改某个<code>宏 =y</code>或者<code>is not set</code>。<br>但是有时候我们明明设置进去了，在<code>Kernel_SrcDir/.config</code>中却没有看到已配置进去。出现该问题基本上以下几个原因导致的：<a id="more"></a></p><hr><p>1、编译之前没有事先删除<code>Kernel_SrcDir/.config</code>文件，如果<code>Kernel_SrcDir/.config</code>文件存在，是不会去更新<code>xxx_defconfig</code>的内容的；</p><p>2、编写<code>xxx_defconfig</code>的格式不对，一定要严格按照以下格式：<font color="red">宏要顶格写，屏蔽宏的要使用<code>#</code>号。</font><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONFIG_XXX_LKCD=y</span><br><span class="line">#CONFIG_XXX_LKCD is <span class="keyword">not</span> <span class="built_in">set</span></span><br></pre></td></tr></table></figure><p></p><p>3、比如说你已按照上述要求将<code>CONFIG_XXX_LKCD</code>配置为<code>is not set</code>，但在<code>.congig</code>中看到它还是为<code>CONFIG_XXX_LKCD=y</code>。<br>出现这种情况是由于在驱动位置中对应的<code>Kconfig</code>将其设置为<code>default y</code>，所以在<code>xxx_defconfig</code>怎么改这个宏都是打开的。<br>注意：<font color="red"><code>.config</code>是根据<code>xxx_defconfig</code>和代码路径下的<code>Kconfig</code>生成的。</font><br>我之前在<code>Kernel_SrcDir/drivers/xxx_lkcd/</code>新增一个驱动。肯定要在里面添加<code>Kconfig</code>，内容如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># <span class="function">ARM <span class="title">xxx_lkcd</span><span class="params">(xxx project linux kernel crash dump)</span> configuration</span></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">menu <span class="string">"xxx linux kernel crash dump"</span></span><br><span class="line"></span><br><span class="line">config XXX_LKCD</span><br><span class="line">    <span class="keyword">bool</span> <span class="string">"Enable xxx linux kernel crash dump"</span></span><br><span class="line"><span class="keyword">default</span> n</span><br><span class="line">    depends on PROC_FS &amp;&amp; ARM</span><br><span class="line">    help</span><br><span class="line">        Enable xxx linux kernel crash dump</span><br><span class="line">endmenu</span><br></pre></td></tr></table></figure><p></p><p>注意一定要设置<code>default n</code>，这样才能在<code>xxx_defconfig</code>自由的修改打开或者关闭。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 碰到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碰到的问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux测试U盘读写速度</title>
      <link href="/e0007988/"/>
      <url>/e0007988/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>本文主要讲述测试U盘的读写速度。<a id="more"></a></p><h1 id="dd命令参数简介"><a href="#dd命令参数简介" class="headerlink" title="dd命令参数简介"></a>dd命令参数简介</h1><ul><li>if=输入文件；</li><li>of=输出文件；</li><li>ibs=一次读取字节数；</li><li>obs=一次写入字节数；</li><li>bs=设置一次读取写入的字节数；</li><li>skip=跳过的bs数；</li><li>count=拷贝的块数；</li></ul><hr><h1 id="黑洞文件-最大空白文件"><a href="#黑洞文件-最大空白文件" class="headerlink" title="黑洞文件/最大空白文件"></a>黑洞文件/最大空白文件</h1><ul><li><code>null文件</code>是一个黑洞文件，把它理解为垃圾桶就行，什么废旧不需要的文件只需往里扔，进入它的内容都会永远丢失；</li><li><code>zero文件</code>当你读它的时候，它会提供无限的空字符(NULL, ASCII NUL, 0x00)，最长用的做法就是想你这样生产一个特定大小的空白文件。</li></ul><hr><h1 id="测试写入速度"><a href="#测试写入速度" class="headerlink" title="测试写入速度"></a>测试写入速度</h1><p><code>dd if=/dev/zero of=/mnt/udisk/a.txt bs=512 count=100</code><br>如果提示<code>/mnt/udisk/a.txt: cannot open for write: Read-only file system</code>表示U盘这是个只读的分区，<br>需要重新<code>mount</code>，如下命令：<br><code>mount -o remount,rw /mnt/udisk</code></p><p>执行上述写入之后，会得到如下结果：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span>+<span class="number">0</span> records in</span><br><span class="line"><span class="number">100</span>+<span class="number">0</span> records out</span><br><span class="line"><span class="number">51200</span> bytes transferred in <span class="number">0.002</span> secs (<span class="number">25600000</span> bytes/sec)</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="测试读取速度"><a href="#测试读取速度" class="headerlink" title="测试读取速度"></a>测试读取速度</h1><p><code>#dd if=/mnt/udisk/a.txt of=/dev/null bs=512 count=100</code><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span>+<span class="number">0</span> records in</span><br><span class="line"><span class="number">100</span>+<span class="number">0</span> records out</span><br><span class="line"><span class="number">51200</span> bytes transferred in <span class="number">0.001</span> secs (<span class="number">51200000</span> bytes/sec)</span><br></pre></td></tr></table></figure><p></p><p>一般做上述的测试，最好是要使用大文件来进行测试，得出的数据比较有说服力。</p><hr><h1 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h1><p>我测试写入U盘10G大写的内容，发现后面报错了：<br><code>dd if=/dev/zero of=/mnt/udisk/a.txt bs=512 count=20000000</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/mnt/udisk/a.txt: write error: File too large</span><br><span class="line"><span class="number">8388608</span>+<span class="number">0</span> records in</span><br><span class="line"><span class="number">8388607</span>+<span class="number">1</span> records out</span><br><span class="line"><span class="number">4294967295</span> bytes transferred in <span class="number">306.996</span> secs (<span class="number">13990303</span> bytes/sec)</span><br></pre></td></tr></table></figure><p>4294967295自己约等于4G，也就是说U盘不支持单个文件超过4G的大小。</p><p>查看U盘的mount情况，发现使用的是vfat，vfat是FAT32衍生出来的，单个文件大小不能超过4G。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/block/vold/<span class="number">8</span>:<span class="number">0</span> /mnt/udisk vfat rw,dirsync,relatime,uid=<span class="number">1000</span>,gid=<span class="number">1023</span>,fmask=<span class="number">0702</span>,dmask=<span class="number">0702</span>,allow_utime=<span class="number">0020</span>,codepage=<span class="number">437</span></span><br></pre></td></tr></table></figure><p></p><hr><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="http://blog.csdn.net/janexjx/article/details/50683816" target="_blank" rel="noopener">http://blog.csdn.net/janexjx/article/details/50683816</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux USB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux USB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>i.MX6 Mfgtool中ucl文件解析</title>
      <link href="/084705fd/"/>
      <url>/084705fd/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>本文主要讲述基于Mfgtool V2来说明ucl.xml文件的使用，以及解释其中的意思。<br>关于ucl2.xml的介绍可以参照<code>Manufacturing Tool V2 UCL User Guide.docx</code>文件。<a id="more"></a></p><hr><h1 id="Mfgtool启动参数"><a href="#Mfgtool启动参数" class="headerlink" title="Mfgtool启动参数"></a>Mfgtool启动参数</h1><p>在<code>Mfgtool/</code>目录下会有各种<code>.vbs</code>的脚本文件，比如说：<br><code>mfgtool2-android-mx6qp-xxx-emmc.vbs</code>文件，文件名标记这是使用<code>Android</code>系统，平台是<code>imx6qp</code>，板子为<code>xxx</code>，使用<code>emmc</code>启动。内容如下：<br><img src="https://pic.superbed.cn/item/5c84de283a213b04179bf9be" alt="vbs文件"></p><p>启动这个脚本文件会去启动<code>mfgtools2.exe</code>应用程序，并将其中的参数传递给<code>mfgtools2.exe</code>。各个参数的大概解释如下：</p><ul><li><code>-c “”linux””</code>：用于告知<code>ucl2.xml</code>文件在路径为<code>Profiles\linux\OS Firmware\</code>目录下；</li><li><code>-l &quot;&quot;i.MX6QP-xxx-eMMC&quot;&quot;</code>：用于标记在<code>ucl2.xml</code>文件中使用哪个<code>LIST name</code>；</li><li><code>-s</code>：可自定义参数传递给<code>ucl2.xml</code>文件使用；</li></ul><p>具体的参数解释如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MfgTool2 can support command line feature, the commands that can be accepted are “-c, -l, -p <span class="keyword">and</span> -noui”. </span><br><span class="line">The format of command line looks like:</span><br><span class="line">MfgTool2.exe [-noui] [-c] [“chip profile folder name”] [-l] [“<span class="built_in">list</span> name”] [-p] [number][-s] [“variable=value” ]</span><br><span class="line">Parameters description:</span><br><span class="line">-noui: <span class="keyword">this</span> command has no any parameter, <span class="keyword">if</span> <span class="keyword">this</span> command is used, the application will use the console interface, otherwise, the GUI interface will be used.  </span><br><span class="line">Note: <span class="keyword">this</span> command must be the second parameter (the first parameter is application name), <span class="keyword">if</span> it is used.</span><br><span class="line">-c: indicate the target profile name. The parameter of <span class="keyword">this</span> command is a <span class="built_in">string</span> with a pair of <span class="keyword">double</span> quotes.</span><br><span class="line">-l: indicate the target operation <span class="built_in">list</span> name which can be found in the file located at <span class="string">"profiles/CHIP_PROFILE/OS Firmware/ucl2.xml"</span>. The parameter of <span class="keyword">this</span> command is a <span class="built_in">string</span> with a pair of <span class="keyword">double</span> quotes.</span><br><span class="line">-p: indicate the number of ports which indicates how many boards can be supported simultaneously. The parameter of <span class="keyword">this</span> command must be a number between <span class="number">1</span> <span class="keyword">and</span> <span class="number">4.</span></span><br><span class="line">-s: Set ucl variable value. Support multiply <span class="keyword">if</span> you need <span class="built_in">set</span> more one variable.</span><br><span class="line"></span><br><span class="line">All above parameters are <span class="keyword">not</span> mandatory, <span class="keyword">if</span> no parameter in the command line, the application will <span class="keyword">try</span> to find the parameter from the corresponding file, e.g. <span class="keyword">if</span> ‘-c’ parameter is <span class="keyword">not</span> provided in the command line, the application will <span class="keyword">try</span> to get it from ‘cfg.ini’ file just like the v2<span class="number">.0</span>.x, <span class="keyword">if</span> the application can't get the parameter from both the command line <span class="keyword">and</span> cfg.ini file, the application will fail to run.</span><br><span class="line"></span><br><span class="line">If both command line <span class="keyword">and</span> cfg.ini/UIcfg.ini assign the same parameter, the application will take the command line parameter with priority.</span><br><span class="line"></span><br><span class="line">Press CTRL+C <span class="keyword">or</span> the Close button to close the APP.</span><br></pre></td></tr></table></figure><p></p><p>当启动<code>.vbs</code>脚本运行失败后，会有如下提示：<br><img src="https://pic.superbed.cn/item/5c84de283a213b04179bf9c0" alt="失败提示"></p><p>此时在当前目录下会生成<code>MfgTool.log</code>文件，查看该文件即可知道错误的原因，一般情况下是要烧写的文件与<code>ucl2.xml</code>标记要烧写的文件名或路径没有对应，或者缺少<code>ucl2.xml</code>指定的文件。<br>在此并不建议使用<code>-s</code>传递给<code>ucl2.xml</code>参数。一般我们开发中同时开发一个或者两个项目，将所要烧写的image文件固定文件名存放在某个固定目录下，然后在<code>ucl2.xml</code>指定即可。<br>而这个<code>-s</code>参数的出现是为了应对不同的开发项目中不同的board、soc、plus等，<code>-s</code>参数的出现有更多的扩展性，但是目前我们暂时不需要。</p><hr><h1 id="ucl2-xml简介"><a href="#ucl2-xml简介" class="headerlink" title="ucl2.xml简介"></a>ucl2.xml简介</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manufacturing (Mfg) tool provides a flexible way <span class="keyword">for</span> users to <span class="built_in">set</span> their own operations.</span><br><span class="line">An xml script file is used to configure the users operation.</span><br><span class="line">An xml file typically consists of a number of tasks which can be executed by running the manufacturing tool just once.</span><br></pre></td></tr></table></figure><p><code>ucl2.xml</code>的结构如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;UCL&gt;</span><br><span class="line">&lt;CFG&gt;</span><br><span class="line">&lt;STATE name=<span class="string">"BootStrap"</span> dev=<span class="string">"MX6SL"</span> vid=<span class="string">"15A2"</span> pid=<span class="string">"0063"</span>/&gt;</span><br><span class="line">&lt;STATE name=<span class="string">"BootStrap"</span> dev=<span class="string">"MX6D"</span> vid=<span class="string">"15A2"</span> pid=<span class="string">"0061"</span>/&gt;</span><br><span class="line">&lt;STATE name=<span class="string">"BootStrap"</span> dev=<span class="string">"MX6Q"</span> vid=<span class="string">"15A2"</span> pid=<span class="string">"0054"</span>/&gt;</span><br><span class="line">&lt;STATE name=<span class="string">"BootStrap"</span> dev=<span class="string">"MX6SX"</span> vid=<span class="string">"15A2"</span> pid=<span class="string">"0071"</span>/&gt;</span><br><span class="line">&lt;STATE name=<span class="string">"BootStrap"</span> dev=<span class="string">"MX6UL"</span> vid=<span class="string">"15A2"</span> pid=<span class="string">"007D"</span>/&gt;</span><br><span class="line">&lt;STATE name=<span class="string">"BootStrap"</span> dev=<span class="string">"MX7D"</span> vid=<span class="string">"15A2"</span> pid=<span class="string">"0076"</span>/&gt;</span><br><span class="line">&lt;STATE name=<span class="string">"Updater"</span>   dev=<span class="string">"MSC"</span> vid=<span class="string">"066F"</span> pid=<span class="string">"37FF"</span>/&gt;</span><br><span class="line">&lt;/CFG&gt;</span><br><span class="line"></span><br><span class="line">&lt;LIST name=<span class="string">"i.MX6QP-xxx-eMMC"</span> desc=<span class="string">"Write i.MX6QP-xxx system boot from eMMC"</span>&gt;</span><br><span class="line">&lt;CMD&gt;</span><br><span class="line"></span><br><span class="line">&lt;/CMD&gt;</span><br><span class="line"></span><br><span class="line">&lt;CMD&gt;</span><br><span class="line"></span><br><span class="line">&lt;/CMD&gt;</span><br><span class="line">&lt;/LIST&gt;</span><br><span class="line"></span><br><span class="line">&lt;LIST&gt;</span><br><span class="line">&lt;CMD&gt;</span><br><span class="line"></span><br><span class="line">&lt;/CMD&gt;</span><br><span class="line">&lt;/LIST&gt;</span><br><span class="line">&lt;/UCL&gt;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>)、全局配置</span><br><span class="line">在`&lt;CFG&gt;`和`&lt;/CFG&gt;`中间属于全局配置，这里的配置固定。</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)、hid设备</span><br><span class="line">``` c</span><br><span class="line">&lt;STATE name=<span class="string">"BootStrap"</span> dev=<span class="string">"MX6Q"</span> vid=<span class="string">"15A2"</span> pid=<span class="string">"0054"</span>/&gt;</span><br></pre></td></tr></table></figure><p></p><p>这里的USB pid”0054”and vid”15A2”标记当前板子是USB HID设备的pid和vid。这也就是为什么在download模式下，板子首先会被识别为HID设备。</p><p>(3)、mass storage设备<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;STATE name=<span class="string">"Updater"</span>   dev=<span class="string">"MSC"</span> vid=<span class="string">"066F"</span> pid=<span class="string">"37FF"</span>/&gt;</span><br></pre></td></tr></table></figure><p></p><p>这里的USB pid”37FF”and vid”066F”标记当前板子是USB MSC大容量存储设备的pid和vid。</p><p>(4)、<code>&lt;LIST&gt;</code>和<code>&lt;/LIST&gt;</code>中间为命令合集配置<br><code>&lt;LIST name=&quot;xxx&quot;, desc=&quot;xxx&quot;&gt;</code><br>name和desc都是用于注释使用，在一个<code>ucl2.xml</code>文件中会有多个<code>&lt;LIST&gt;</code>，每个<code>&lt;LIST&gt;</code>通过<code>name</code>来区分，并在<code>.vbs</code>决定使用哪个<code>&lt;LIST&gt;</code>。大概的结构如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;LIST name=<span class="string">"i.MX6QP-xxx-eMMC"</span> desc=<span class="string">"Write i.MX6QP-xxx system boot from eMMC"</span>&gt;</span><br><span class="line">&lt;CMD&gt;</span><br><span class="line"></span><br><span class="line">&lt;/CMD&gt;</span><br><span class="line">&lt;/LIST&gt;</span><br></pre></td></tr></table></figure><p></p><p>(5)、<code>&lt;CMD&gt;</code>和<code>&lt;/CMD&gt;</code>之间为具体的命令，包括两种类型的命令：</p><ul><li><font color="red">Host specific commands</font>：parsed and executed by host tool；<br><img src="https://pic.superbed.cn/item/5c84de283a213b04179bf9c4" alt="Host specific commands"></li><li><font color="red">firmware specific commands</font>：parsed and executed by firmware runs on targeted device。<br><img src="https://pic.superbed.cn/item/5c84de283a213b04179bf9cb" alt="firmware specific commands"><br><img src="https://pic.superbed.cn/item/5c84de283a213b04179bf9cf" alt="firmware specific commands"></li></ul><hr><h1 id="CMD例子分析"><a href="#CMD例子分析" class="headerlink" title="CMD例子分析"></a>CMD例子分析</h1><p>(1)、<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">   Write xxx system boot from emmc,kernel from emmc</span><br><span class="line">--&gt;</span><br><span class="line">&lt;LIST name=<span class="string">"i.MX6QP-xxx-eMMC"</span> desc=<span class="string">"Write i.MX6QP-xxx system boot from eMMC"</span>&gt;</span><br></pre></td></tr></table></figure><p></p><p>用来区分标记烧写<code>&quot;i.MX6QP-xxx-eMMC&quot;</code>的平台；</p><p>(2)、<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;CMD type=<span class="string">"find"</span> body=<span class="string">"Recovery"</span> timeout=<span class="string">"180"</span>/&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"boot"</span> body=<span class="string">"Recovery"</span> file =<span class="string">"files/xxx/u-boot-mx6q-xxx-mfg.bin"</span>&gt;Loading U-boot&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"load"</span> file=<span class="string">"files/xxx/uImage-mx6q-xxx-mfg"</span> address=<span class="string">"0x10800000"</span></span><br><span class="line">   loadSection=<span class="string">"OTH"</span> setSection=<span class="string">"OTH"</span> HasFlashHeader=<span class="string">"FALSE"</span>&gt;Loading Kernel.&lt;/CMD&gt;</span><br><span class="line"></span><br><span class="line">&lt;CMD type=<span class="string">"load"</span> file=<span class="string">"initramfs.cpio.gz.uboot"</span> address=<span class="string">"0x12800000"</span></span><br><span class="line">   loadSection=<span class="string">"OTH"</span> setion=<span class="string">"OTH"</span> HasFlashHeader=<span class="string">"FALSE"</span>&gt;Loading Initramfs.&lt;/CMD&gt;</span><br><span class="line"></span><br><span class="line">&lt;CMD type=<span class="string">"jump"</span>&gt; Jumping to OS image. &lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"find"</span> body=<span class="string">"Updater"</span> timeout=<span class="string">"360"</span>/&gt;</span><br></pre></td></tr></table></figure><p></p><p>此处将<code>Mfgtools</code>的<code>firmware</code>（u-boot，uImage，ramdisk）load到RAM指定的位置上，然后跳转启动mini os。<br>前两个文件用户可以自己客制化编译，后面的<code>ramdisk</code>需要NXP提供。如果想要自己修改ramdisk，可以参照：<a href="https://community.nxp.com/thread/300430" target="_blank" rel="noopener">https://community.nxp.com/thread/300430</a></p><p>此处将<code>uImage</code>镜像load到RAM的<code>0x10800000</code>位置上，将<code>ramdisk</code>镜像load到<code>0x12800000</code>的位置上。<br>注意这两个地址之间的大小一定要足够容纳下整个<code>uImage</code>的大小。</p><p>(3)、<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"send"</span> file=<span class="string">"files/xxx/mknandpartition-xxx.sh.tar"</span>&gt;Sending partition shell&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ tar xf $FILE "</span>&gt; Partitioning...&lt;/CMD&gt;</span><br></pre></td></tr></table></figure><p></p><p>将分区脚本的压缩文件<code>mknandpartition-xxx.sh.tar</code>发送到<code>$FILE</code>并解压<code>$FILE</code>文件。</p><p>(4)、<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"mknod block,mmcblk0,/dev/mmcblk0,block"</span>/&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"mknod block,mmcblk0boot0,/dev/mmcblk0boot0,block"</span>/&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"mknod block,mmcblk0boot1,/dev/mmcblk0boot1,block"</span>/&gt;</span><br></pre></td></tr></table></figure><p></p><p>创建<code>/dev/mmcblk0</code>的设备节点，用于创建分区使用。</p><p>(5)、<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ dd if=/dev/zero of=/dev/mmcblk0 bs=128M count=1"</span>&gt; Erasing MBR <span class="keyword">and</span> kernel parameters...&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ sh mknandpartition-xxx.sh /dev/mmcblk0"</span>&gt; Partitioning...&lt;/CMD&gt;</span><br></pre></td></tr></table></figure><p></p><p>清除<code>/dev/mmcblk0 128M</code>大小的信息，之后执行脚本<code>mknandpartition-xxx.sh</code>，这个脚本的内容为：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"><span class="meta"># call sfdisk to create partition table</span></span><br><span class="line"><span class="meta"># destroy the partition table</span></span><br><span class="line">node=$<span class="number">1</span></span><br><span class="line">dd <span class="keyword">if</span>=/dev/zero of=$&#123;node&#125; bs=<span class="number">1024</span> count=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">sfdisk --force $&#123;node&#125;&lt;&lt; EOF</span><br><span class="line"><span class="number">128</span>M,<span class="number">300</span>M,<span class="number">83</span></span><br><span class="line"><span class="number">428</span>M,<span class="number">254</span>M,<span class="number">83</span></span><br><span class="line"><span class="number">686</span>M,<span class="number">256</span>M,<span class="number">83</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p></p><p>使用<code>sfdisk</code>命令在<code>/dev/mmcblk0</code>上面创建三个分区，分区的信息如下：</p><ul><li>第1个分区：起始位置为128M，大小为300M，83表示linux下挂载的磁盘；</li><li>第2个分区：起始位置为428M，大小为254M，</li><li>第3个分区：起始位置为686M，大小为256M。<br>注意：这里的分区信息要与挂载的文件大小相对应。比如说第1个分区设置为300M，是为了挂载<code>system</code>分区，要保证<code>system.img</code>的小于300M。<br>当然，这里的分区是要跟emmc 的layout挂钩的。</li></ul><p>(6)、<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"mknod block/mmcblk0,mmcblk0p1,/dev/mmcblk0p1,block"</span>/&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"mknod block/mmcblk0,mmcblk0p2,/dev/mmcblk0p2,block"</span>/&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"mknod block/mmcblk0,mmcblk0p3,/dev/mmcblk0p3,block"</span>/&gt;</span><br></pre></td></tr></table></figure><p></p><p>创建3个分区的设备节点。</p><p>(7)、<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"send"</span> file=<span class="string">"files/files/xxx/u-boot.imx"</span>&gt;Sending u-boot.bin&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ dd if=$FILE of=/dev/mmcblk0 bs=1k seek=1 conv=fsync"</span>&gt;write u-boot.bin to nand&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ sync"</span>&gt;sync&lt;/CMD&gt;</span><br><span class="line"></span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"send"</span> file=<span class="string">"files/kernel-header"</span>&gt;Sending kernel-header&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ dd if=$FILE of=/dev/mmcblk0 bs=512 seek=1024"</span>&gt;write kernel-header to eMMC&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ dd if=$FILE of=/dev/mmcblk0 bs=512 seek=1280"</span>&gt;write kernel-header to eMMC&lt;/CMD&gt;</span><br><span class="line"></span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"send"</span> file=<span class="string">"files/ramdisk-header"</span>&gt;Sending ramdisk-header&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ dd if=$FILE of=/dev/mmcblk0 bs=512 seek=1025"</span>&gt;write ramdisk-header to eMMC&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ dd if=$FILE of=/dev/mmcblk0 bs=512 seek=1281"</span>&gt;write ramdisk-header to eMMC&lt;/CMD&gt;</span><br><span class="line"></span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"send"</span> file=<span class="string">"files/files/xxx/uImage"</span>&gt;Sending kernel uImage&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ dd if=$FILE of=/dev/mmcblk0 bs=1M seek=6 conv=fsync"</span>&gt;write kernel image B to nand&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ dd if=$FILE of=/dev/mmcblk0 bs=1M seek=1 conv=fsync"</span>&gt;write kernel image A to nand&lt;/CMD&gt;</span><br><span class="line"></span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"send"</span> file=<span class="string">"files/files/xxx/uramdisk.img"</span>&gt;Sending ramdisk image&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ dd if=$FILE of=/dev/mmcblk0 bs=1M seek=59 conv=fsync"</span>&gt;write ramdisk image B to nand&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ dd if=$FILE of=/dev/mmcblk0 bs=1M seek=11 conv=fsync"</span>&gt;write ramdisk image A to nand&lt;/CMD&gt;</span><br></pre></td></tr></table></figure><p></p><p>分别将<code>u-boot.imx/kernel-header/ramdisk-header/uImage/uramdisk.img</code>文件dd到指定的emmc位置上。<br>具体放到emmc的哪个位置上，要参考layout来进行设置。</p><p>(8)、<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ dd if=/dev/zero of=/dev/mmcblk0 bs=1M seek=127 count=1"</span>&gt; Erasing CCID...&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ dd if=/dev/zero of=/dev/mmcblk0 bs=1M seek=894 count=4"</span>&gt; Erasing Data...&lt;/CMD&gt;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"send"</span> file=<span class="string">"files/files/xxx/bootani.img"</span>&gt;Sending bootani image&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ dd if=$FILE of=/dev/mmcblk0 bs=1M seek=107 conv=fsync"</span>&gt;write bootani image to nand&lt;/CMD&gt;</span><br></pre></td></tr></table></figure><p>为什么这里要设置这些内容还不是很清楚。</p><p>(9)、<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"pipe dd of=/dev/mmcblk0p1 bs=1M conv=fsync"</span> file=<span class="string">"files/files/xxx/system.img"</span>&gt;Sending <span class="keyword">and</span> writting system image&lt;/CMD&gt;</span><br></pre></td></tr></table></figure><p></p><p>使用<code>pipe</code>去传输并dd大的文件<code>（system.img 300M）</code>而不是使用<code>push</code>。<br>这里将<code>system.img</code>dd到mmcblk磁盘上的第1个分区。</p><p>(10)、<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ mkfs.ext4 -O ^extent -L var /dev/mmcblk0p2"</span>&gt;Formatting partition <span class="number">1</span>&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ mkfs.ext4 -O ^extent -L data /dev/mmcblk0p3"</span>&gt;Formatting partition <span class="number">2</span>&lt;/CMD&gt;</span><br></pre></td></tr></table></figure><p></p><p>使用<code>mkfs.ext4</code>的命令创建<code>/var</code>和<code>/data</code>分区。</p><p>(11)、<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ sync"</span>&gt;sync&lt;/CMD&gt;</span><br><span class="line">&lt;CMD type=<span class="string">"push"</span> body=<span class="string">"$ echo Update Complete!"</span>&gt;Done&lt;/CMD&gt;</span><br></pre></td></tr></table></figure><p></p><p>最后面标记烧录完毕。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> i.MX6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i.MX6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>i.MX6使用Mfgtool烧录image原理</title>
      <link href="/d285a65b/"/>
      <url>/d285a65b/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>Mfgtool是用于下载bin或者image到目标板子上的PC软件，包括<code>ramdisk</code>、<code>u-boot</code>、<code>uImage</code>等文件，本文主要讲述i.MX6使用Mfgtool烧录image原理。如有错误，请指出。<a id="more"></a></p><hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>可以从freescale的官网上下载Mfgtool，里面包含Mfgtool的使用说明.<br><a href="http://www.nxp.com/products/automotive-products/microcontrollers-and-processors/arm-mcus-and-mpus/i.mx-application-processors/i.mx-6-processors/i.mx-6quadplus-processor-quad-core-high-performance-advanced-3d-graphics-hd-video-advanced-multimedia-arm-cortex-a9-core:i.MX6QP?tab=Design_Tools_Tab" target="_blank" rel="noopener">http://www.nxp.com/products/automotive-products/microcontrollers-and-processors/arm-mcus-and-mpus/i.mx-application-processors/i.mx-6-processors/i.mx-6quadplus-processor-quad-core-high-performance-advanced-3d-graphics-hd-video-advanced-multimedia-arm-cortex-a9-core:i.MX6QP?tab=Design_Tools_Tab</a><br>目录结构如下：</p><ul><li><code>Document/</code>: 关于Mfgtool 的使用文档；</li><li><code>Drivers/</code>: USB iMX_BulkIO_Driver；</li><li><code>Profiles/</code>: 存放要烧录的image文件以及ucl.xml；</li><li><code>Utils/</code>: 暂时还不知道用途是什么；</li><li><code>mfgtool.log</code>：关于Mfgtool使用过程中的log记录。</li></ul><hr><h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><p>详细的使用步骤可以参考下载Mfgtool中<code>Document/</code>下的文档：<br><code>mfgtools\Document\V2\Manufacturing Tool V2 Quick Start Guide.docx</code><br><code>mfgtools\Document\V2\Manufacturing Tool V2 Work Flow.docx</code></p><hr><h1 id="烧写步骤"><a href="#烧写步骤" class="headerlink" title="烧写步骤"></a>烧写步骤</h1><ul><li>通过板子的USB OTG口连接到PC机上；</li><li>设置启动模式为Download mode，启动模式有下面几种：<br><img src="https://pic.superbed.cn/item/5c84dfa13a213b04179c0bb3" alt="启动模式"></li><li>板子上电之后在PC端的设备管理器上可以看到一个<code>HID-compliant device</code>设备；</li><li>打开PC机上的Mfgtool工具，并开始烧写。<br>注意：在这过程中，板子会被枚举为一个mass storage的设备。</li></ul><hr><h1 id="Mfgtool工作原理"><a href="#Mfgtool工作原理" class="headerlink" title="Mfgtool工作原理"></a>Mfgtool工作原理</h1><p>参照<a href="http://p6x2iir9l.bkt.clouddn.com/MFGTOOLCustomizationGuide.pptx" target="_blank" rel="noopener">MFGTOOLCustomizationGuide.pptx</a> 里面介绍用户客制化Mfgtool的详细步骤。<br><img src="https://pic.superbed.cn/item/5c84dfa13a213b04179c0bb5" alt="详细步骤"></p><ul><li>当板子上电后，什么都没有初始化，只有ROM可以run。固化在ROM的code会去初始化USB，并将其配置为HID设备。这就是为什么板子设置为download模式并上电后在PC端的设备管理器可以看到<code>HID-compliant device</code>连上。</li><li>一旦PC机检测到HID设备连上，那么PC（USB Host）就会去枚举设备并建立连接。建立连接后的第一件事就是传送一个Mfgtools firmware（mini uboot）到目标板 SoC 的 IRAM 中然后开始运行，u-boot 会对目标板进行初始化， 重点是初始化 DDR/eMMC 等设备， 所以之后 DDR 及 eMMC已经可以访问了。它会展开初始化内存的代码或者是从image（像u-boot）获取数据。也支持内存初始化脚本去初始化数据。当DRAM初始化完毕之后，就可以准备运行code了。</li><li>当DRAM初始化完毕之后，PC就会将Mfgtools firmware（mini OS和mini RAM文件系统）放到RAM中去执行，然后PC发送命令给ROM让其跳转到mini OS去执行。注意，这里的mini OS实际上是一个小型的系统，主要用来烧录（dd命令）我们编译好的normal OS。<br>mini OS必须要配置USB、USB大容量存储驱动、SD卡、UTP等。详见：<code>mfgtools\Document\V2\Manufacturing Tool V2 Linux or Android Firmware Development Guide V2.docx</code>文档。<br>之所以要自己客制化mini OS系统用于烧写normal OS，而不是Mfgtools集成这个小的系统。是因为每个客户都有自己定制的板子，NAND/eMMC/USB配置都有可能不一样，所以这些初始化这些设备需要客户自己来定制。<br><img src="https://pic.superbed.cn/item/5c84dfa13a213b04179c0bb7" alt="客制化"></li><li>这之后启动mini OS（上面说的在烧录过程中可以看到串口的打印信息都是在mini OS里面打印的）。通过 command line 可以看到，此mini OS 启动 linuxrc 作为第一个进程，linuxrc 其实是一个脚本，最终通过执行 uuc 来启动 UTP传输协议。UTP 是作为 USB File Storage(v3 Kernel)或 USB Mass Storage(v4 Kernel)驱动的扩展。所以启动 UTP 必须对 USB 进行 reset 然后重新枚举。<br>直观的感觉就是(v3 Kernel 是在 PC上弹出发现一个需要格式化的存储设备)(v4 Kernel 是了现一个 USB File-Stor Gadget Divice设备)。<br>由于在mini OS我们配置了USB MSC设备，支持大的数据量传输。这就是为什么在烧录过程中会提示格式化磁盘。</li><li>之后PC就会将ucl.xml中的命令传输给mini OS去执行（包括dd命令），将用户编译的normal OS文件烧录。该mini OS可以支持很多命令，并且可以执行脚本，先分区，然后把相应的image文件逐一传送过来，通过 dd 写入到相应的分区。<br>注：mini OS是可以根据板子的情况进行定制。具体的定制步骤可以参照下面的文档：<br><code>mfgtools\Document\V2\Manufacturing Tool V2 Linux or Android Firmware Development Guide V2.docx</code></li></ul><hr><h1 id="mini-OS客制化过程"><a href="#mini-OS客制化过程" class="headerlink" title="mini OS客制化过程"></a>mini OS客制化过程</h1><p><img src="https://pic.superbed.cn/item/5c84dfa13a213b04179c0bba" alt="mini OS客制化过程"></p><hr><h1 id="mini-u-boot客制化"><a href="#mini-u-boot客制化" class="headerlink" title="mini u-boot客制化"></a>mini u-boot客制化</h1><p><img src="https://pic.superbed.cn/item/5c84dfa13a213b04179c0bbe" alt="mini u-boot客制化过程"></p><hr><h1 id="ucl-xml"><a href="#ucl-xml" class="headerlink" title="ucl.xml"></a>ucl.xml</h1><p><code>ucl.xml</code> 文件存放着Mfgtool和Kernel要执行的命令。具体参照下面的文档：<br><code>mfgtools\Document\V2\Manufacturing Tool V2 UCL User Guide.docx</code></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> i.MX6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i.MX6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解压打包img文件</title>
      <link href="/37fc608c/"/>
      <url>/37fc608c/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>在开发过程中，经常使用替换法来判断某个问题。<br>比如说A版本的<code>system.img</code>和B版本的<code>system.img</code>，前者会出现bug，后者没有问题。此时我们考虑将B版本中<code>system.img</code>中的某些文件提取出来放入到A版本中看是否还会再现bug，以此来确定是哪个模块出现问题。<br>所以我们就需要压缩和解压.img文件的方法。<a id="more"></a></p><hr><h1 id="查看文件类型"><a href="#查看文件类型" class="headerlink" title="查看文件类型"></a>查看文件类型</h1><p>解压某个文件，需要确定该文件类型，可用 <code>file</code> 命令来查看。</p><ul><li><p><code>#file system.img</code> 得到<code>system.img</code>的文件类型如下：可知这个文件属于 <code>ext4</code> 的文件系统，不是压缩文件。所以该文件不用压缩，只需挂载即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system.img: Linux rev <span class="number">1.0</span> ext4 filesystem data, UUID=<span class="number">57f</span>8f4bc-abf4<span class="number">-655f</span>-bf67<span class="number">-946f</span>c0f9f25b (needs journal recovery) (extents) (large files)</span><br></pre></td></tr></table></figure></li><li><p><code>#file ramdisk.img</code> 得到<code>ramdisk.img</code>的文件类型如下，可知这个属于 <code>gzip</code> 的压缩文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ramdisk.img: gzip compressed data, from Unix</span><br></pre></td></tr></table></figure></li><li><p><code>#file uramdisk.img</code>得到<code>ramdisk.img</code>的文件类型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Image Name:   xxx Root Filesystem</span><br><span class="line">Created:      Fri Mar <span class="number">17</span> <span class="number">19</span>:<span class="number">35</span>:<span class="number">51</span> <span class="number">2017</span></span><br><span class="line">Image Type:   <span class="function">ARM Linux RAMDisk <span class="title">Image</span> <span class="params">(uncompressed)</span></span></span><br><span class="line">Data Size:    15643904 Bytes = 15277.25 kB = 14.92 MB</span><br><span class="line">Load Address: <span class="number">00000000</span></span><br><span class="line">Entry Point:  <span class="number">00000000</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="cpio-命令"><a href="#cpio-命令" class="headerlink" title="cpio 命令"></a>cpio 命令</h1><p>参考如下链接进行了解：<br><a href="http://blog.csdn.net/wh_19910525/article/details/8112538" target="_blank" rel="noopener">http://blog.csdn.net/wh_19910525/article/details/8112538</a></p><hr><h1 id="挂载ext4文件系统步骤"><a href="#挂载ext4文件系统步骤" class="headerlink" title="挂载ext4文件系统步骤"></a>挂载ext4文件系统步骤</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># mkdir tmp</span></span><br><span class="line"><span class="meta"># sudo mount -t ext4 -o loop system.img tmp/</span></span><br><span class="line"><span class="meta"># mount</span></span><br></pre></td></tr></table></figure><p>可以看到 <code>system.img</code> 已挂载到 <code>tmp/</code> 目录下，如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/VictorHuang/share/uncompress/system.img on /home/VictorHuang/share/uncompress/<span class="function">tmp type <span class="title">ext4</span> <span class="params">(rw)</span></span></span><br></pre></td></tr></table></figure><p></p><p>这样就可以看到 <code>tmp/</code> 目录下有相关的文件了：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">总用量 <span class="number">40</span></span><br><span class="line">drwxr-xr-x <span class="number">7</span> root         root          <span class="number">4096</span>  <span class="number">1</span>月  <span class="number">1</span>  <span class="number">1970</span> ./</span><br><span class="line">drwxr-xr-x <span class="number">3</span> VictorHuangVictorHuang  <span class="number">4096</span>  <span class="number">3</span>月 <span class="number">17</span> <span class="number">17</span>:<span class="number">52</span> ../</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root                 <span class="number">2000</span>  <span class="number">4096</span>  <span class="number">3</span>月 <span class="number">11</span> <span class="number">13</span>:<span class="number">40</span> bin/</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root         root          <span class="number">1065</span>  <span class="number">3</span>月 <span class="number">11</span> <span class="number">13</span>:<span class="number">30</span> build.prop</span><br><span class="line">drwxr-xr-x <span class="number">8</span> root         root          <span class="number">4096</span>  <span class="number">3</span>月 <span class="number">11</span> <span class="number">13</span>:<span class="number">39</span> etc/</span><br><span class="line">drwxr-xr-x <span class="number">7</span> root         root         <span class="number">12288</span>  <span class="number">3</span>月 <span class="number">11</span> <span class="number">13</span>:<span class="number">40</span> lib/</span><br><span class="line">drwx------ <span class="number">2</span> root         root          <span class="number">4096</span>  <span class="number">1</span>月  <span class="number">1</span>  <span class="number">1970</span> lost+found/</span><br><span class="line">drwxr-xr-x <span class="number">3</span> root         root          <span class="number">4096</span>  <span class="number">3</span>月 <span class="number">11</span> <span class="number">13</span>:<span class="number">39</span> usr/</span><br></pre></td></tr></table></figure><p></p><p>这样，我们就可以修改替换 <code>/tmp</code> 目录下的某些模块了，然后再将其打包为新的<code>system.img</code>文件烧写的机器中，看bug是否还会出现。</p><hr><h1 id="解压ramdisk-img"><a href="#解压ramdisk-img" class="headerlink" title="解压ramdisk.img"></a>解压ramdisk.img</h1><p>将 <code>ramdisk.img</code> 重命名为 <code>ramdisk.img.gz</code>，命令如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># mv ramdisk.img ramdisk.img.gz</span></span><br></pre></td></tr></table></figure><p></p><p>使用 <code>gunzip</code> 命令解压 <code>ramdisk.img.gz</code>，获得 <code>ramdisk.img</code>，如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># gunzip ramdisk.img.gz</span></span><br></pre></td></tr></table></figure><p></p><p>此时通过 <code>file</code> 命令查看 <code>ramdisk.img</code> 文件变为：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ramdisk.img: <span class="function">ASCII cpio <span class="title">archive</span> <span class="params">(SVR4 with no CRC)</span></span></span><br></pre></td></tr></table></figure><p></p><p>使用 <code>cpio</code> 命令并解压 <code>ramdisk.img</code> 的内容，如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># cd tmp/</span></span><br><span class="line"><span class="meta"># cpio -i -F ../ramdisk.img</span></span><br></pre></td></tr></table></figure><p></p><p>此时可以看到 <code>ramdisk.img</code> 里面的内容了<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">drwxrwxr-x <span class="number">5</span> VictorHuangVictorHuang   <span class="number">4096</span>  <span class="number">3</span>月 <span class="number">17</span> <span class="number">18</span>:<span class="number">52</span> ./</span><br><span class="line">drwxr-xr-x <span class="number">3</span> VictorHuangVictorHuang   <span class="number">4096</span>  <span class="number">3</span>月 <span class="number">17</span> <span class="number">18</span>:<span class="number">49</span> ../</span><br><span class="line">drwxr-xr-x <span class="number">2</span> VictorHuangVictorHuang   <span class="number">4096</span>  <span class="number">3</span>月 <span class="number">17</span> <span class="number">18</span>:<span class="number">52</span> bin/</span><br><span class="line">-rw-r--r-- <span class="number">1</span> VictorHuangVictorHuang    <span class="number">116</span>  <span class="number">3</span>月 <span class="number">17</span> <span class="number">18</span>:<span class="number">52</span> <span class="keyword">default</span>.prop</span><br><span class="line">-rw-r----- <span class="number">1</span> VictorHuangVictorHuang   <span class="number">1092</span>  <span class="number">3</span>月 <span class="number">17</span> <span class="number">18</span>:<span class="number">52</span> fstab.xxx</span><br><span class="line">-rwxr-x--- <span class="number">1</span> VictorHuangVictorHuang <span class="number">420288</span>  <span class="number">3</span>月 <span class="number">17</span> <span class="number">18</span>:<span class="number">52</span> init*</span><br><span class="line">-rwxr-x--- <span class="number">1</span> VictorHuangVictorHuang  <span class="number">17713</span>  <span class="number">3</span>月 <span class="number">17</span> <span class="number">18</span>:<span class="number">52</span> init.rc*</span><br><span class="line">-rwxr-x--- <span class="number">1</span> VictorHuangVictorHuang  <span class="number">12343</span>  <span class="number">3</span>月 <span class="number">17</span> <span class="number">18</span>:<span class="number">52</span> init_update.rc*</span><br><span class="line">drwxr-xr-x <span class="number">3</span> VictorHuangVictorHuang   <span class="number">4096</span>  <span class="number">3</span>月 <span class="number">17</span> <span class="number">18</span>:<span class="number">52</span> lib/</span><br><span class="line">drwxr-x--- <span class="number">2</span> VictorHuangVictorHuang   <span class="number">4096</span>  <span class="number">3</span>月 <span class="number">17</span> <span class="number">18</span>:<span class="number">52</span> sbin/</span><br><span class="line">-rw-r--r-- <span class="number">1</span> VictorHuangVictorHuang   <span class="number">4024</span>  <span class="number">3</span>月 <span class="number">17</span> <span class="number">18</span>:<span class="number">52</span> ueventd.rc</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="压缩ramdisk-img文件"><a href="#压缩ramdisk-img文件" class="headerlink" title="压缩ramdisk.img文件"></a>压缩ramdisk.img文件</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># cd tmp/</span></span><br><span class="line"><span class="meta"># find . |cpio -ov -H newc |gzip &gt; ../ramdisk.img</span></span><br></pre></td></tr></table></figure><p>这之后在上层目录下就会有生成的 <code>ramdisk.img</code> 文件生成。</p><hr><h1 id="uramdisk-img介绍"><a href="#uramdisk-img介绍" class="headerlink" title="uramdisk.img介绍"></a>uramdisk.img介绍</h1><p><code>uramdisk.img</code> 是由 <code>u-boot</code> 引导的<code>ramdisk</code>文件，<code>ramdisk.img</code> 和 <code>uramdisk.img</code> 的关系如下：</p><p><font color="red">64 个字节 + ramdisk.img = uramdisk.img</font><br>通过 <code>file</code> 命令查看的 <code>uramdisk.img</code> 获得的信息如下：<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uramdisk.img: u-boot legacy uImage, xxx initramfs, Linux/ARM, RAMDisk Image (gzip), 2963484 bytes, Fri Mar 17 16:22:54 2017, Load Address: 0x00000000, Entry Point: 0x00000000, Header CRC: 0x753FEFF1, Data CRC: 0xA1E950C0</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="ramdisk-img生成uramdisk-img"><a href="#ramdisk-img生成uramdisk-img" class="headerlink" title="ramdisk.img生成uramdisk.img"></a>ramdisk.img生成uramdisk.img</h1><p>使用 <code>mkimage</code> 命令来创建，基本的命令格式如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkimage -A arm -O linux -C none  -T $&#123;TYPE&#125; -a $&#123;LOAD_ADDRESS&#125; -e $&#123;ENTRY_ADDRESS&#125; -n <span class="string">"$&#123;BUILD_TARGET&#125; `date +%Y%m%d-%H%M%S`"</span> -d $&#123;SRC_FILE&#125;$&#123;DST_FILE&#125;</span><br></pre></td></tr></table></figure><p></p><ul><li><code>${TYPE}</code> :可以为 kernel 或者 ramdisk，前者标记使用 zImage 生成 uImage，后者标记使用 ramdisk.img 生成 uramdisk.img；</li><li><code>${LOAD_ADDRESS}</code> 和 <code>${ENTRY_ADDRESS}</code>：两个加载和入口地址很关键；</li><li>双引号括起来的内容为文件的说明；</li><li><code>${SRC_FILE}</code>：源文件名，为 zImage 或者是 ramdisk.img 文件；</li><li><code>${DST_FILE}</code>：生成的文件名，uImage 或者 uramdisk.img；</li></ul><p>生成 <code>uImage</code> 命令：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># mkimage -A arm -O linux -C none  -T kernel -a 0x00000000 -e 0x00000000 -n <span class="meta-string">"xxx kernel uImage"</span> -d zImage+dtb.bin uImage+dtb</span></span><br></pre></td></tr></table></figure><p></p><p>生成 <code>uramdisk.img</code><br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># mkimage -A arm -O linux -C none  -T ramdisk -a 0x00000000 -e 0x00000000 -n <span class="meta-string">"xxx Root Filesystem"</span> -d ./ramdisk.img ./uramdisk.img</span></span><br></pre></td></tr></table></figure><p></p><hr><h1 id="由uramdisk-img生成ramdisk-img"><a href="#由uramdisk-img生成ramdisk-img" class="headerlink" title="由uramdisk.img生成ramdisk.img"></a>由uramdisk.img生成ramdisk.img</h1><p>舍弃 <code>uramdisk.img</code> 的前64个字节<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># dd <span class="meta-keyword">if</span>=uramdisk.img of=ramdisk.img.gz bs=64 skip=1</span></span><br></pre></td></tr></table></figure><p></p><p>接下来的几步参照上面打包生成 <code>ramdisk.img</code> 的方法。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># gunzip ramdisk.img.gz</span></span><br><span class="line"><span class="meta"># cd tmp/</span></span><br><span class="line"><span class="meta"># cpio -i -F ../ramdisk.img</span></span><br></pre></td></tr></table></figure><p></p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blog.csdn.net/yatelanda/article/details/7972329" target="_blank" rel="noopener">http://blog.csdn.net/yatelanda/article/details/7972329</a><br><a href="http://blog.csdn.net/do_script/article/details/7768427" target="_blank" rel="noopener">http://blog.csdn.net/do_script/article/details/7768427</a><br><a href="http://blog.csdn.net/hancunai0017/article/details/6873948" target="_blank" rel="noopener">http://blog.csdn.net/hancunai0017/article/details/6873948</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Android编译相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android编译相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Makefile中添加获取编译的任务数</title>
      <link href="/bee61d9c/"/>
      <url>/bee61d9c/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>本内容转自：<a href="https://blog.csdn.net/robertsong2004/article/details/39012455" target="_blank" rel="noopener">https://blog.csdn.net/robertsong2004/article/details/39012455</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> Do a parallel build with multiple jobs, based on the number of CPUs online</span><br><span class="line"><span class="meta">#</span> in this system: 'make -j8' on a 8-CPU system, etc.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> (To override it, run 'make JOBS=1' and similar.)</span><br><span class="line"><span class="meta">#</span></span><br><span class="line">ifeq ($(JOBS),)</span><br><span class="line">  JOBS := $(shell grep -c ^processor /proc/cpuinfo 2&gt;/dev/null)</span><br><span class="line">  ifeq ($(JOBS),)</span><br><span class="line">    JOBS := 1</span><br><span class="line">  endif</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Android编译相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android编译相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>system_core目录下添加新的应用程序</title>
      <link href="/0a930e32/"/>
      <url>/0a930e32/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>往Android里面添加新的应用程序，比如说有一个xxx_app/的应用程序要编译进系统中。<br>本文主要记录这个过程中需要做哪些事。<a id="more"></a></p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul><li>将 xxx_app/ 拷贝到 <code>&lt;Project_Dir&gt;/system/core/</code> 目录下</li><li><p>在 xxx_app/ 目录下添加<code>Android.mk</code>文件，指定相关的参数。如：<br>LOCAL_MODULE：指定编译生成的app名称；<br>LOCAL_SRC_FILES：指定要编译所需的源文件；<br>LOCAL_CFLAGS：指定编译选项；<br>LOCAL_STATIC_LIBRARIES：指定编译生成的静态库；<br>LOCAL_SHARED_LIBRARIES：指定所需的动态库；<br>LOCAL_MODULE_PATH：指定编译的生成路径。</p></li><li><p>在 <code>&lt;Project_Dir&gt;/build/target/product/minicore.mk</code> 文件指定要编译<code>xxx_app</code><br><code>PRODUCT_PACKAGES += xxx_app \</code>：</p></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://blog.csdn.net/mr_raptor/article/details/7539978" target="_blank" rel="noopener">http://blog.csdn.net/mr_raptor/article/details/7539978</a><br><a href="http://blog.csdn.net/mr_raptor/article/details/7540066" target="_blank" rel="noopener">http://blog.csdn.net/mr_raptor/article/details/7540066</a><br><a href="http://blog.csdn.net/mr_raptor/article/details/7540730" target="_blank" rel="noopener">http://blog.csdn.net/mr_raptor/article/details/7540730</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Android编译相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android编译相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android全编编译kernel和uboot</title>
      <link href="/3928006b/"/>
      <url>/3928006b/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>在Android的工程目录下执行<code>make</code>命令，就会编译出<code>system.img</code>，执行本目录下的<code>Makefile</code>文件，该<code>Makefile</code>只有简单的一行，就是 <code>build/core/main.mk</code>。具体的话可以上网查Android编译过程。</p><p>本文主要是记录在Android的编译工程中加入编译kernel和uboot的功能。<a id="more"></a></p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>新开一个项目，编译环境是基于linux，移植android的编译系统。但是使用make进行编译，只编译出 <code>uramdisk</code>和<code>system.img</code>，uboot和kernel只能单独执行下面的脚本进行编译：<br><code>./build-xxx-project.sh uboot</code>：编译uboot<br><code>./build-xxx-project.sh uImage</code>：编译kernel</p><p>这就有个问题，如果我们想要将kernel编译出来的某些ko打包进system.img，通过宏<code>PRODUCT_COPY_FILES</code> 进行拷贝。这就有个问题，如果是个干净的库，编译<code>system.img</code>，有需要.ko文件才能打包，但是kernel没有编译，这就导致编译出错了。关于如何将ko打包进system.img，可以参照<a href="http://wowothink.com/2018/05/01/%E6%89%93%E5%8C%85ko%E6%96%87%E4%BB%B6%E5%88%B0image%E4%B8%AD/">打包ko到image中</a></p><p>所以现在需要在执行 make 的时候，先编译kernel，再编译<code>system.img</code>。</p><hr><h1 id="make"><a href="#make" class="headerlink" title="make"></a>make</h1><p>执行make的时候，会默认去执行 <code>build/core/main.mk</code> 的<font color="red">droidcore</font>目标，内容如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Build files <span class="keyword">and</span> then package it into the rom formats</span><br><span class="line">.PHONY: droidcore</span><br><span class="line">droidcore: files \</span><br><span class="line">systemimage \</span><br><span class="line">$(INSTALLED_BOOTIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_RECOVERYIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_VBMETAIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_USERDATAIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_CACHEIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_BPTIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_VENDORIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_PRODUCTIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_SYSTEMOTHERIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_FILES_FILE) \</span><br><span class="line">$(INSTALLED_FILES_FILE_VENDOR) \</span><br><span class="line">$(INSTALLED_FILES_FILE_PRODUCT) \</span><br><span class="line">$(INSTALLED_FILES_FILE_SYSTEMOTHER) \</span><br><span class="line">soong_docs</span><br></pre></td></tr></table></figure><p></p><p><code>droidcore</code>目标又依赖于上面的这些东西，这些东西又依赖于其他Makefile文件文件中定义的目标。</p><hr><h1 id="添加kernelimage和bootloader的依赖"><a href="#添加kernelimage和bootloader的依赖" class="headerlink" title="添加kernelimage和bootloader的依赖"></a>添加<code>kernelimage</code>和<code>bootloader</code>的依赖</h1><p>在 <code>build/core/main.mk</code>中的<code>droidcore</code>目标添加<code>kernelimage</code>和<code>bootloader</code>的<font color="red">依赖</font>，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Build files <span class="keyword">and</span> then package it into the rom formats</span><br><span class="line">.PHONY: droidcore</span><br><span class="line">droidcore: files \</span><br><span class="line">    bootloader \</span><br><span class="line">    kernelimage \</span><br><span class="line">systemimage \</span><br></pre></td></tr></table></figure><hr><h1 id="新增编译kernelimage和bootloader的目标"><a href="#新增编译kernelimage和bootloader的目标" class="headerlink" title="新增编译kernelimage和bootloader的目标"></a>新增编译<code>kernelimage</code>和<code>bootloader</code>的目标</h1><p>在 <code>build/core/Makefile</code> 中添加新增编译<code>kernelimage</code>和<code>bootloader</code>的<font color="red">目标</font>，如下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.PHONY: bootloader</span><br><span class="line">bootloader:</span><br><span class="line">    @echo <span class="string">"============================= make uboot ==============================="</span></span><br><span class="line">    ./build-xxx-project.sh uboot</span><br><span class="line">    @install -D u-boot-imx6/u-boot.bin $(PRODUCT_OUT)/u-boot.bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.PHONY: kernelimage</span><br><span class="line">kernelimage:</span><br><span class="line">    @echo <span class="string">"============================= make kernel uImage ==============================="</span></span><br><span class="line">    ./build-xxx-project.sh uImage</span><br><span class="line">    @install -D kernel-imx6/arch/arm/boot/uImage+dtb $(PRODUCT_OUT)/uImage+dtb</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Android编译相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android编译相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android编译流程</title>
      <link href="/21f93ebf/"/>
      <url>/21f93ebf/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>本文是自己整理和理解的Android编译流程，特此做记录。<a id="more"></a></p><h1 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#source build/envsetup.sh</span></span><br><span class="line"><span class="meta">#lunch <span class="meta-string">&lt;buildName-buildType&gt;</span></span></span><br><span class="line"><span class="meta">#make 2&gt;&amp;1 | tee build-log.txt</span></span><br></pre></td></tr></table></figure><hr><h1 id="source-build-envsetup-sh"><a href="#source-build-envsetup-sh" class="headerlink" title="source build/envsetup.sh"></a>source build/envsetup.sh</h1><p>这个命令是用来将<code>envsetup.sh</code>里的所有用到的命令加载到环境变量里去。<br>在<code>envsetup.sh</code>中会定义一系列命令，当执行该脚本之后，首先会去<code>include device/xxxx/xxxx/vendorsetup.sh</code>的文件。<br><code>vendorsetup.sh</code>会将product的信息比如(xxx-yyy)通过调用函数<code>add_lunch_combo()</code>写入到<code>LUNCH_MENU_CHOICES[]</code>数组中。<br>最后可以直接在shell下就可以敲入<code>envsetup.sh</code>中的某个命令并执行。比如说<code>#lunch</code>，就会执行<code>function lunch()</code>的内容打印可以编译的<code>product</code>选项：</p><hr><h1 id="lunch-xxx-yyy"><a href="#lunch-xxx-yyy" class="headerlink" title="lunch xxx-yyy"></a>lunch xxx-yyy</h1><p>xxx标记Product的信息，对应于 <code>TARGET_PRODUCT</code>；<br>yyy标记编译类型，对应于<code>TARGET_BUILD_VARIANT</code>，比如：</p><ul><li>eng: 工程机，</li><li>user:最终用户机</li><li>userdebug:调试测试机</li><li>tests:测试机<br><img src="http://p6x2iir9l.bkt.clouddn.com/Android%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B-1.png" alt="编译类型"></li></ul><p>lunch的最后会导出全局的环境变量以及执行其他的一些操作，如下：</p><h2><a href="#" class="headerlink"></a><img src="http://p6x2iir9l.bkt.clouddn.com/Android%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B-2.png" alt="环境变量"></h2><h1 id="make-j4"><a href="#make-j4" class="headerlink" title="make -j4"></a>make -j4</h1><p>这之后就是调用各个目录下的<code>Makefile</code>进行编译。</p><hr><h1 id="编译生成的文件"><a href="#编译生成的文件" class="headerlink" title="编译生成的文件"></a>编译生成的文件</h1><p>生成的文件在 <code>out/target/product/&lt;buildName&gt;/</code> 目录下：</p><ul><li>root/ :根文件系统，包括init、init.rc，挂载在 / 目录下；</li><li>system/ : Android 系统的二进制和库文件，挂载在 /system 目录下；</li><li>Data/ : Android 的data分区，挂载在 /data 目录下；</li><li>Recovery/ : 进入recovery模式下的根文件系统；</li><li>ramdisk.img: 由 root/. 直接生成，不直接使用；</li><li>system.img: 由system/ 生成EXT4的image，可以被programmed进去SD/eMMC的SYSTEM分区，使用dd命令；</li><li>recovery.img：由recovery/ 生成EXT4的image，可以被programmed进去SD/eMMC的RECOVERY分区，使用dd命令；</li></ul><hr><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://blog.csdn.net/mr_raptor/article/details/7539978" target="_blank" rel="noopener">http://blog.csdn.net/mr_raptor/article/details/7539978</a><br><a href="http://blog.csdn.net/mr_raptor/article/details/7540066" target="_blank" rel="noopener">http://blog.csdn.net/mr_raptor/article/details/7540066</a><br><a href="http://blog.csdn.net/mr_raptor/article/details/7540730" target="_blank" rel="noopener">http://blog.csdn.net/mr_raptor/article/details/7540730</a><br><a href="http://gityuan.com/2016/03/19/android-build/" target="_blank" rel="noopener">http://gityuan.com/2016/03/19/android-build/</a><br><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/opensource/os-cn-android-build/</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Android编译相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android编译相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Kernel优化--initcall_debug</title>
      <link href="/127f8b72/"/>
      <url>/127f8b72/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>在 <a href="https://elinux.org/Main_Page" target="_blank" rel="noopener">https://elinux.org/Main_Page</a> 的文章中，提供了嵌入式linux的相关wiki。其中有专门一个章节用来讲启动时间并提供了几种优化方式：<a href="https://elinux.org/Boot_Time" target="_blank" rel="noopener">https://elinux.org/Boot_Time</a><br>本文主要使用initcall debug来定位哪个模块加载时间过长。<a id="more"></a></p><hr><h1 id="initcall-debug"><a href="#initcall-debug" class="headerlink" title="initcall debug"></a>initcall debug</h1><p>这个功能可以用于计算每个模块调用initcall的时间，这样就可以知道哪个模块初始化的时间过长。<br>魅族内核组吴章金发起了“嵌入式 Linux 知识库 (elinux.org) 中文翻译计划”，其中boot time的链接为：<a href="https://github.com/tinyclub/elinux/blob/master/zh/dev_portals/Boot_Time/Boot_Time.md" target="_blank" rel="noopener">https://github.com/tinyclub/elinux/blob/master/zh/dev_portals/Boot_Time/Boot_Time.md</a></p><hr><h1 id="往cmdline传递参数"><a href="#往cmdline传递参数" class="headerlink" title="往cmdline传递参数"></a>往cmdline传递参数</h1><p>往cmdline传递以下两个参数<code>initcall_debug=1 ignore_loglevel=1</code>，在 <code>/proc/cmdline</code> 可以查看当前使用的cmdline情况。</p><p>传递这两个参数可以打开<code>initcall_debug</code>功能，dmesg的输出变为下面的格式，我们可以通过这里面的内容来进行Kernel的优化。<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[    <span class="number">6.302837</span>] initcall cdns3_driver_platform_register+<span class="number">0x0</span>/<span class="number">0x24</span> returned <span class="number">0</span> after <span class="number">73878</span> usecs</span><br><span class="line">[    <span class="number">6.311062</span>] calling  ehci_hcd_init+<span class="number">0x0</span>/<span class="number">0x70</span> @ <span class="number">1</span></span><br><span class="line">[    6.315596] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver</span><br><span class="line">[    <span class="number">6.322165</span>] initcall ehci_hcd_init+<span class="number">0x0</span>/<span class="number">0x70</span> returned <span class="number">0</span> after <span class="number">6411</span> usecs</span><br><span class="line">[    <span class="number">6.328790</span>] calling  ehci_platform_init+<span class="number">0x0</span>/<span class="number">0x60</span> @ <span class="number">1</span></span><br><span class="line">[    <span class="number">6.333762</span>] ehci-platform: EHCI generic platform driver</span><br><span class="line">[    <span class="number">6.339365</span>] initcall ehci_platform_init+<span class="number">0x0</span>/<span class="number">0x60</span> returned <span class="number">0</span> after <span class="number">5467</span> usecs</span><br><span class="line">[    <span class="number">6.346423</span>] calling  xhci_hcd_init+<span class="number">0x0</span>/<span class="number">0x20</span> @ <span class="number">1</span></span><br><span class="line">[    <span class="number">6.350971</span>] initcall xhci_hcd_init+<span class="number">0x0</span>/<span class="number">0x20</span> returned <span class="number">0</span> after <span class="number">0</span> usecs</span><br><span class="line">[    <span class="number">6.357353</span>] calling  xhci_plat_init+<span class="number">0x0</span>/<span class="number">0x34</span> @ <span class="number">1</span></span><br><span class="line">[    <span class="number">6.362425</span>] initcall xhci_plat_init+<span class="number">0x0</span>/<span class="number">0x34</span> returned <span class="number">0</span> after <span class="number">428</span> usecs</span><br><span class="line">[    <span class="number">6.369058</span>] calling  usb_storage_driver_init+<span class="number">0x0</span>/<span class="number">0x48</span> @ <span class="number">1</span></span><br><span class="line">[    <span class="number">6.374593</span>] usbcore: registered <span class="keyword">new</span> interface driver usb-storage</span><br><span class="line">[    <span class="number">6.380702</span>] initcall usb_storage_driver_init+<span class="number">0x0</span>/<span class="number">0x48</span> returned <span class="number">0</span> after <span class="number">6063</span> usecs</span><br><span class="line">[    <span class="number">6.388223</span>] calling  usb3503_init+<span class="number">0x0</span>/<span class="number">0x68</span> @ <span class="number">1</span></span><br><span class="line">[    <span class="number">6.392925</span>] initcall usb3503_init+<span class="number">0x0</span>/<span class="number">0x68</span> returned <span class="number">0</span> after <span class="number">239</span> usecs</span><br><span class="line">[    <span class="number">6.399384</span>] calling  ci_hdrc_platform_register+<span class="number">0x0</span>/<span class="number">0x24</span> @ <span class="number">1</span></span><br><span class="line">[    <span class="number">6.405166</span>] initcall ci_hdrc_platform_register+<span class="number">0x0</span>/<span class="number">0x24</span> returned <span class="number">0</span> after <span class="number">79</span> usecs</span><br><span class="line">[    <span class="number">6.412671</span>] calling  ci_hdrc_usb2_driver_init+<span class="number">0x0</span>/<span class="number">0x20</span> @ <span class="number">1</span></span><br><span class="line">[    <span class="number">6.418345</span>] initcall ci_hdrc_usb2_driver_init+<span class="number">0x0</span>/<span class="number">0x20</span> returned <span class="number">0</span> after <span class="number">171</span> usecs</span><br></pre></td></tr></table></figure><p></p><hr><h1 id="倒叙排列输出时间"><a href="#倒叙排列输出时间" class="headerlink" title="倒叙排列输出时间"></a>倒叙排列输出时间</h1><p>有了上面串口的信息，我们可以通过将函数名和与之对应的时间提取出来，然后倒叙排列，输出到excel文件中，以直观的方式展示出来。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line">file = open(<span class="string">"./cal_time/kernel-log.txt"</span>)</span><br><span class="line">line = <span class="number">0</span></span><br><span class="line">list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    content = file.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> content:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    line = line+<span class="number">1</span></span><br><span class="line">    content=content.strip(<span class="string">'\n'</span>)</span><br><span class="line">    usecs_part = content.endswith(<span class="string">"usecs"</span>)</span><br><span class="line">    <span class="keyword">if</span> usecs_part == <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 获取usecs参数</span></span><br><span class="line">        <span class="comment">#print("%d: %s\n" %(line,content))</span></span><br><span class="line">        sec_start_index = content.find(<span class="string">"after"</span>)+<span class="number">6</span></span><br><span class="line">        sec_end_index = content.find(<span class="string">"usecs"</span>)<span class="number">-1</span></span><br><span class="line">        useconds = content[sec_start_index:sec_end_index]</span><br><span class="line">        usec = int(useconds)</span><br><span class="line">        <span class="comment">#print("%d, %d, %d, %s\n" %(sec_start_index, sec_end_index, usec, useconds))</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取函数名</span></span><br><span class="line">        func_start_index = content.find(<span class="string">"initcall"</span>)+<span class="number">9</span></span><br><span class="line">        func_end_index = content.find(<span class="string">"+"</span>)</span><br><span class="line">        func_name = content[func_start_index:func_end_index]</span><br><span class="line">        <span class="comment">#print("%d, %d, %s\n" %(func_start_index, func_end_index, func_name))</span></span><br><span class="line">        list.append((usec, func_name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 采用降序排序</span></span><br><span class="line">list.sort(reverse = <span class="keyword">True</span>)</span><br><span class="line"><span class="comment">#print(list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入到excel表格中</span></span><br><span class="line">data=xlwt.Workbook()</span><br><span class="line">table=data.add_sheet(<span class="string">"函数耗时统计"</span>)</span><br><span class="line">table.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">u'函数名'</span>)</span><br><span class="line">table.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">u'耗时'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(list)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">2</span>):</span><br><span class="line">        table.write(i+<span class="number">1</span>, <span class="number">1</span>-j, list[i][j])</span><br><span class="line">data.save(<span class="string">"output.xls"</span>)</span><br></pre></td></tr></table></figure><p></p><p>输出的结果如下：<br><img src="http://p6x2iir9l.bkt.clouddn.com/Linux%20Kernel%E4%BC%98%E5%8C%96--initcall_debug-1.jpg" alt="输出结果"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux Kernel优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Kernel裁剪--menuconfig的使用</title>
      <link href="/0e320fa6/"/>
      <url>/0e320fa6/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>在项目初期，NXP提供了i.MX7ul的BSP包，里面包含了大量第三方平台的配置以及本项目未使用的功能。因此，需要在此基础上进行kernel的裁剪。<br>本文主要讲在不影响主要功能的前提下进行Linux Kernel裁剪的步骤。<a id="more"></a></p><hr><h1 id="开发平台"><a href="#开发平台" class="headerlink" title="开发平台"></a>开发平台</h1><p>SOC: i.MX7ul<br>Kernel: 4.9.51</p><hr><h1 id="porting"><a href="#porting" class="headerlink" title="porting"></a>porting</h1><p>porting uboot和kernel，保证kernel能够正常启动和串口能够正常使用。</p><hr><h1 id="替换-config为defconfig"><a href="#替换-config为defconfig" class="headerlink" title="替换.config为defconfig"></a>替换.config为defconfig</h1><p>将 <code>kernel_imx7/</code> 目录下的<code>.config</code>拷贝到 <code>arch/arm64/configs/xxx_defconfig</code>做这一步是为了后面使用 <code>make menuconfig</code> 图形化配置生成的<code>.config</code>和<code>xxx_defconfig</code>直接对比，对比的内容可以保证是自己通过图形化配置修改过的。<br>上面的方式通常是不标准的，<code>make CROSS_COMPILE=XXX ARCH=arm64 xxx_defconfig</code> 会将<code>arch/arm64/configs/xxx_defconfig</code>文件根据依赖关系生成<code>.config</code>文件。<code>make CROSS_COMPILE=XXX ARCH=arm64 savedefconfig</code>就可以将当前的<code>.config</code>文件生成与之对应的<code>defconfig</code>文件。</p><hr><h1 id="图形化配置"><a href="#图形化配置" class="headerlink" title="图形化配置"></a>图形化配置</h1><h2 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h2><p>执行 <code>make menuconfig ARCH=arm xxx_defconfig</code><br>这里会将<code>xxx_defconfig</code>和<code>kernel_imx7/</code>下所有的<code>Kconfig</code>生成图形化配置。</p><p>操作方式如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Arrow keys navigate the menu.  &lt;Enter&gt; selects submenus ---&gt; (or empty submenus ----).  Highlighted letters are hotkeys.</span><br><span class="line">Pressing &lt;Y&gt; includes, &lt;N&gt; excludes, &lt;M&gt; modularizes features.  Press &lt;Esc&gt;&lt;Esc&gt; to exit, &lt;?&gt; for Help, &lt;/&gt; for Search.</span><br><span class="line">Legend: [*] built-in  [ ] excluded  &lt;M&gt; module  &lt; &gt; module capable</span><br></pre></td></tr></table></figure><p></p><p>比如说，这里面的<code>Device Drivers</code>下，有个<code>USB support</code>，我们的项目中不需要这个功能，可以将其设置为N，然后保存到<code>.config</code>中。<br>这样，我们就可以将更新后的<code>.config</code>文件再次替换<code>xxx_defconfig</code>，这次修改的，就是去掉<code>USB support</code>相关的配置。或者使用<code>make savedefconfig</code>命令将<code>.config</code>转换为对应的<code>defconfig</code>文件。</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>比如说我们知道某个配置，想要将其使能，但是不知道它的依赖关系以及在图形化配置下的哪个位置，那么可以使用<code>/</code>来进行搜索。比如说我们要使能<code>CONFIG_USB_LIBCOMPOSITE</code>，使用<code>\</code>搜索，然后使用数字键跳转到对应的内容上。</p><p>建议每次按照机能修改，每改一次做一次提交，保证kernel能正常的启动，并进行详细的说明。不要一次性改太多，免得以后调查问题回退不好定位。多次执行第4步，直至初步将kernel大致裁剪完毕。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux Kernel优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Kernel优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打包ko到image中</title>
      <link href="/18a8e793/"/>
      <url>/18a8e793/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>很多时候，我们要在系统启动的时候在<code>init.rc</code>中指定开机insmod某个ko文件，因此，需要将ko文件添加到system.img中。此处以Android下打包<code>bcmdhd.ko</code>到<code>system/lib/modules/</code>为例。<a id="more"></a></p><hr><h1 id="编译生成-bcmdhd-ko"><a href="#编译生成-bcmdhd-ko" class="headerlink" title="编译生成 bcmdhd.ko"></a>编译生成 bcmdhd.ko</h1><p>通过<code>Kernel_SrcDir/drivers/net/wireless/bcmdhd/</code> 目录编译生成的 <code>bcmdhd.ko</code>会保存在如下的两个路径：</p><ul><li><p><code>Android_SrcDir/device/ProjectName/common/kernel-mod/lib/modules/4.1.15/kernel/drivers/net/wireless/bcmdhd/bcmdhd.ko</code></p></li><li><p><code>Kernel_SrcDir/drivers/net/wireless/bcmdhd/bcmdhd.ko</code></p></li></ul><hr><h1 id="修改xxx-mk文件"><a href="#修改xxx-mk文件" class="headerlink" title="修改xxx.mk文件"></a>修改xxx.mk文件</h1><p>在<code>Android_SrcDir/device/ProjectName/common/kernel-mod/xxx.mk</code> 添加以下4宏：</p><p>指定编译存放在哪个路径<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MY_KERNEL_MOD_INSTALL_PATH := $(TARGET_OUT)/usr/lib/modules</span><br><span class="line">LOCAL_MODULE_PATH := $(MY_KERNEL_MOD_INSTALL_PATH)</span><br></pre></td></tr></table></figure><p></p><p>指定ko的文件来源路径<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MY_KERNEL_WIFI_BCMDHD_PATH := lib/modules/<span class="number">4.1</span><span class="number">.15</span>/kernel/</span><br><span class="line">LOCAL_PREBUILT_EXECUTABLES := \</span><br><span class="line">$(MY_KERNEL_WIFI_BCMDHD_PATH)/drivers/net/wireless/bcmdhd/bcmdhd.ko</span><br></pre></td></tr></table></figure><p></p><p><code>bcmdhd.ko</code>最终就会编译进system.img中去，即该ko会放到<code>system/usr/lib/modules/</code> 目录中去。</p><p>经过测试，这样修改编译还是会提示找不到 <code>bcmdhd.ko</code>，需要将该ko先拷贝到<code>lib/modules/4.1.15/kernel/drivers/net/wireless/bcmdhd/</code> 目录下，然后重新编译就会自动拷贝打包。</p><p>上述的调用关系流程为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Android_SrcDir/device/ProjectName/common/kernel-mod/xxx.mk</span><br><span class="line">ALL_DEFAULT_INSTALLED_MODULES += $(addprefix $(LOCAL_MODULE_PATH)/,$(notdir $(LOCAL_PREBUILT_EXECUTABLES)))</span><br><span class="line"></span><br><span class="line">Android_SrcDir/build/core/main.mk</span><br><span class="line">Default_MODULES := $(sort $(ALL_DEFAULT_INSTALLED_MODULES) \</span><br><span class="line"></span><br><span class="line">Android_SrcDir/build/core/main.mk</span><br><span class="line">modules_to_install := $(sort $(Default_MODULES) \</span><br></pre></td></tr></table></figure><p>这部分的内容参照：<a href="http://blog.csdn.net/jscese/article/details/39209341" target="_blank" rel="noopener">http://blog.csdn.net/jscese/article/details/39209341</a></p><hr><h1 id="修改init-rc文件"><a href="#修改init-rc文件" class="headerlink" title="修改init.rc文件"></a>修改init.rc文件</h1><p>一般init.rc会放在<code>Android_SrcDir/device/ProjectName/SubProjectName/</code>目录下。</p><hr><h1 id="添加配置文件的存放路径"><a href="#添加配置文件的存放路径" class="headerlink" title="添加配置文件的存放路径"></a>添加配置文件的存放路径</h1><p>在<code>bcmdhd.ko</code> 使用过程中需要用到<code>fw_bcmdhd.bin</code>和<code>nvram.txt</code>等固件或配置文件，所以需要将其他们拷贝到指定路径，然后<code>insmod bcmdhd.ko</code>可以从该位置获取到这些文件的信息。<br>将<code>fw_bcmdhd.bin</code>和<code>nvram.txt</code>等固件或配置文件拷贝到<code>Android_SrcDir/device/ProjectName/SubProjectName/firmware_path</code> 路径下，其中 <code>firmware_path/</code> 目录可以自己创建。</p><p>在 <code>Android_SrcDir/device/ProjectName/SubProjectName/BoardConfig.mk</code> 文件中的<code>PRODUCT_COPY_FILES</code>宏下添加要拷贝到的路径，比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PRODUCT_COPY_FILES +=   \</span><br><span class="line">    device/ProjectName/SubProjectName/firmware_path/fw_bcmdhd.bin:system/etc/wifi/firmware/fw_bcmdhd.bin \</span><br><span class="line">device/ProjectName/SubProjectName/firmware_path/nvram.txt:system/etc/wifi/firmware/nvram.txt</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Android编译相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android编译相关 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kernel添加spidev的设备节点</title>
      <link href="/65b43654/"/>
      <url>/65b43654/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>如果在内核中配置spidev，会在/dev目录下产生设备节点，通过此节点可以操作挂载在该SPI总线上的设备。用户空间通过该节点可以访问内核空间。<a id="more"></a></p><hr><h1 id="配置spidev设备步骤"><a href="#配置spidev设备步骤" class="headerlink" title="配置spidev设备步骤"></a>配置spidev设备步骤</h1><p>在i.MX6，Kernel 4.1.15上配置spidev的支持。</p><h2 id="配置dts支持spi"><a href="#配置dts支持spi" class="headerlink" title="配置dts支持spi"></a>配置dts支持spi</h2><p>根据spi的连接原理图配置对应的<code>imx6qp-xxx.dts</code>，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&amp;ecspi1 &#123;</span><br><span class="line">compatible = <span class="string">"fsl,imx6q-ecspi"</span>;  <span class="comment">// 匹配spi-imx驱动</span></span><br><span class="line">fsl,spi-num-chipselects = &lt;<span class="number">1</span>&gt;;</span><br><span class="line">cs-gpios = &lt;&amp;gpio3 <span class="number">19</span> <span class="number">0</span>&gt;;</span><br><span class="line">pinctrl-names = <span class="string">"default"</span>;</span><br><span class="line">pinctrl<span class="number">-0</span> = &lt;&amp;pinctrl_ecspi1 &amp;pinctrl_ecspi1_cs&gt;;</span><br><span class="line">status = <span class="string">"okay"</span>;</span><br><span class="line">spidev@<span class="number">0x00</span> &#123;         <span class="comment">// 必须添加spidev的设备节点</span></span><br><span class="line">        compatible = <span class="string">"spidev"</span>;</span><br><span class="line">        spi-max-frequency = &lt;<span class="number">20000000</span>&gt;;</span><br><span class="line">        reg = &lt;<span class="number">0</span>&gt;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pinctrl_ecspi1: ecspi1grp &#123;</span><br><span class="line">fsl,pins = &lt;</span><br><span class="line">MX6QDL_PAD_EIM_D17__ECSPI1_MISO<span class="number">0x100b1</span></span><br><span class="line">MX6QDL_PAD_EIM_D18__ECSPI1_MOSI<span class="number">0x100b1</span></span><br><span class="line">MX6QDL_PAD_EIM_D16__ECSPI1_SCLK<span class="number">0x100b1</span></span><br><span class="line">&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">pinctrl_ecspi1_cs: ecspi1cs &#123;</span><br><span class="line">fsl,pins = &lt;</span><br><span class="line">MX6QDL_PAD_EIM_D19__GPIO3_IO19 <span class="number">0x80000000</span></span><br><span class="line">&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="配置-imx6q-ecspi-的支持"><a href="#配置-imx6q-ecspi-的支持" class="headerlink" title="配置 imx6q-ecspi 的支持"></a>配置 imx6q-ecspi 的支持</h2><p>在<code>drivers/spi/spi-imx.c</code>的<code>static const struct of_device_id spi_imx_dt_ids[];</code>中仿照</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; .compatible = <span class="string">"fsl,imx6ul-ecspi"</span>, .data = &amp;imx6ul_ecspi_devtype_data, &#125;</span><br></pre></td></tr></table></figure><p>添加支持新的设备：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; .compatible = <span class="string">"fsl,imx6q-ecspi"</span>, .data = &amp;imx6q_ecspi_devtype_data, &#125;</span><br></pre></td></tr></table></figure><font color="red">这里面的名字一定要与dts中的compatible字段保持一致。如果platform设备与驱动匹配上了，那么就会执行<code>drivers/spi/spi-imx.c</code>的<code>spi_imx_probe()</code>函数，在probe()函数中会通过of接口获取dts中的配置，比如cs-gpios、num-chipselects 等信息。并且还会通过<code>platform_get_resource()</code>和<br><code>devm_ioremap_resource()</code>获取io_base以及映射io_base到内存空间去，以及获取irq等信息。如下：</font><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">res = platform_get_resource(pdev, IORESOURCE_MEM, <span class="number">0</span>);</span><br><span class="line">spi_imx-&gt;base = devm_ioremap_resource(&amp;pdev-&gt;dev, res);</span><br><span class="line"><span class="keyword">if</span> (IS_ERR(spi_imx-&gt;base)) &#123;</span><br><span class="line">    ret = PTR_ERR(spi_imx-&gt;base);</span><br><span class="line">    <span class="keyword">goto</span> out_master_put;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">irq = platform_get_irq(pdev, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (irq &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    ret = irq;</span><br><span class="line">    <span class="keyword">goto</span> out_master_put;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = devm_request_irq(&amp;pdev-&gt;dev, irq, spi_imx_isr, <span class="number">0</span>,</span><br><span class="line">               dev_name(&amp;pdev-&gt;dev), spi_imx);</span><br><span class="line"><span class="keyword">if</span> (ret) &#123;</span><br><span class="line">    dev_err(&amp;pdev-&gt;dev, <span class="string">"can't get irq%d: %d\n"</span>, irq, ret);</span><br><span class="line">    <span class="keyword">goto</span> out_master_put;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当probe()成功后，驱动正确加载，在板子上输入<code>#cat /proc/iomem</code>命令可以看到当前io mem的情况，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">uid=<span class="number">0</span> gid=<span class="number">1007</span>@Android:/ #cat /proc/iomem</span><br><span class="line"><span class="number">00110000</span><span class="number">-00111f</span>ff : /soc/dma-apbh@<span class="number">00110000</span></span><br><span class="line"><span class="number">00130000</span><span class="number">-00133f</span>ff : galcore <span class="keyword">register</span> region</span><br><span class="line"><span class="number">00134000</span><span class="number">-00137f</span>ff : galcore <span class="keyword">register</span> region</span><br><span class="line"><span class="number">00905000</span><span class="number">-0093f</span>fff : <span class="number">905000.</span>sram</span><br><span class="line"><span class="number">00940000</span><span class="number">-0095f</span>fff : <span class="number">940000.</span>sram</span><br><span class="line"><span class="number">00960000</span><span class="number">-0097f</span>fff : <span class="number">960000.</span>sram</span><br><span class="line"><span class="number">02018000</span><span class="number">-0201b</span>fff : /soc/aips-bus@<span class="number">02000000</span>/spba-bus@<span class="number">02000000</span>/ecspi@<span class="number">02018000</span></span><br><span class="line"><span class="number">02020000</span><span class="number">-02023f</span>ff : /soc/aips-bus@<span class="number">02000000</span>/spba-bus@<span class="number">02000000</span>/serial@<span class="number">02020000</span></span><br><span class="line"><span class="number">0209</span>c000<span class="number">-0209f</span>fff : /soc/aips-bus@<span class="number">02000000</span>/gpio@<span class="number">0209</span>c000</span><br><span class="line"><span class="number">020</span>a0000<span class="number">-020</span>a3fff : /soc/aips-bus@<span class="number">02000000</span>/gpio@<span class="number">020</span>a0000</span><br></pre></td></tr></table></figure><p>可见，ecspi使用的io 内存映射的空间是从02018000-0201bfff。如果我们使用<code>#cat /proc/interupts</code>的命令可以查看注册中断的情况，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">uid=<span class="number">0</span> gid=<span class="number">1007</span>@Android:/ #cat /proc/interrupts</span><br><span class="line">           CPU0       CPU1       CPU2       CPU3       </span><br><span class="line"><span class="number">16</span>:       <span class="number">1358</span>        <span class="number">419</span>       <span class="number">1274</span>       <span class="number">1059</span>       GIC  <span class="number">29</span> Edge      twd</span><br><span class="line"><span class="number">17</span>:          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>       GPC  <span class="number">55</span> Level     i.MX Timer Tick</span><br><span class="line"><span class="number">22</span>:        <span class="number">226</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>       GPC  <span class="number">26</span> Level     <span class="number">2020000.</span>serial</span><br><span class="line"><span class="number">24</span>:         <span class="number">33</span>          <span class="number">0</span>          <span class="number">0</span>          <span class="number">0</span>       GPC  <span class="number">35</span> Level     <span class="number">2018000.</span>ecspi</span><br></pre></td></tr></table></figure><p>这些信息不用我们去配置，在官方BSP包中的dts已配置好，我们只需要include对应的dts并且在那基础上做自己的修改。上述配置信息就在 imx6q.dtsi 文件中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ecspi1: ecspi@<span class="number">02018000</span> &#123;</span><br><span class="line">    <span class="meta">#address-cells = <span class="meta-string">&lt;1&gt;;</span></span></span><br><span class="line">    <span class="meta">#size-cells = <span class="meta-string">&lt;0&gt;;</span></span></span><br><span class="line">    compatible = <span class="string">"fsl,imx6q-ecspi"</span>, <span class="string">"fsl,imx51-ecspi"</span>;</span><br><span class="line">    reg = &lt;<span class="number">0x02018000</span> <span class="number">0x4000</span>&gt;;</span><br><span class="line">    interrupts = &lt;<span class="number">0</span> <span class="number">35</span> IRQ_TYPE_LEVEL_HIGH&gt;;</span><br><span class="line">    clocks = &lt;&amp;clks IMX6Q_CLK_ECSPI5&gt;,</span><br><span class="line">             &lt;&amp;clks IMX6Q_CLK_ECSPI5&gt;;</span><br><span class="line">    clock-names = <span class="string">"ipg"</span>, <span class="string">"per"</span>;</span><br><span class="line">    dmas = &lt;&amp;sdma <span class="number">11</span> <span class="number">7</span> <span class="number">1</span>&gt;, &lt;&amp;sdma <span class="number">12</span> <span class="number">7</span> <span class="number">2</span>&gt;;</span><br><span class="line">    dma-names = <span class="string">"rx"</span>, <span class="string">"tx"</span>;</span><br><span class="line">    status = <span class="string">"disabled"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个文件中很多设备都是disabled的，如果我们需要使用，不必再这里设置okay，<font color="red">因为通常情况下客户会自己添加一个imx6qp-xxx.dts的文件，然后再<code>#include &quot;imx6q.dtsi&quot;</code>，在imx6qp-xxx.dts添加自己所需要的设备之后会设置<code>status = &quot;okay&quot;</code>，此时会将imx6q.dtsi中关于status的信息覆盖同名参数并且合并其他的信息。</font>如imx6qp-xxx.dts的配置一样。</p><hr><h2 id="spidev驱动"><a href="#spidev驱动" class="headerlink" title="spidev驱动"></a>spidev驱动</h2><p>上述配置spidev设备之后，就要配置添加spidev驱动。在 <code>arch/arm/configs/xxx_defconfig</code>中添加<code>CONFIG_SPI_SPIDEV=y</code>那么就会编译<code>drivers/spi/spidev.c</code>文件，该文件的内容是注册一个spidev驱动。该驱动是一个字符设备驱动。</p><font color="red">如果设备与驱动匹配，那么就会执行<code>spidev_probe()</code>的内容。在<code>spidev_probe()</code>函数中会调用<code>device_create()</code>成功后在 /dev 目录下就会生成 spidev 相关的设备节点。</font><hr><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Linux driver </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux driver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/4a17b156/"/>
      <url>/4a17b156/</url>
      
        <content type="html"><![CDATA[<!-- build time:Fri Apr 17 2020 17:02:04 GMT+0800 (中国标准时间) --><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 测试使用 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
